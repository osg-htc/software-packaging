From 20f65ba234434ef03590f04bc30aed1f9364dba1 Mon Sep 17 00:00:00 2001
From: Matyas Selmeci <matyas@cs.wisc.edu>
Date: Fri, 15 Nov 2019 21:09:11 -0600
Subject: [PATCH] koji_passwd_cache

Cache passwords to decrypt SSL key in memory.
---
 koji/ssl/SSLCommon.py | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/koji/ssl/SSLCommon.py b/koji/ssl/SSLCommon.py
index a1ab2bb..aec1112 100644
--- a/koji/ssl/SSLCommon.py
+++ b/koji/ssl/SSLCommon.py
@@ -19,6 +19,7 @@
 import SSLConnection
 import httplib
 import socket
+import getpass
 
 def our_verify(connection, x509, errNum, errDepth, preverifyOK):
     # print("Verify: errNum = %s, errDepth = %s, preverifyOK = %s" % (errNum, errDepth, preverifyOK))
@@ -28,6 +29,26 @@ def our_verify(connection, x509, errNum, errDepth, preverifyOK):
     return preverifyOK
 
 
+cached_passwd = None
+def passwd_callback(max_length, ask_twice, userdata):
+    cpass = globals()['cached_passwd']
+    if cpass:
+        return cpass
+
+    typed_pass = getpass.getpass("Enter PEM pass phrase: ")
+    if len(typed_pass) > max_length:
+        print "Password is longer than what OpenSSL is able to handle"
+        return False
+
+    if ask_twice:
+        typed_pass2 = getpass.getpass("Please enter password again for verification: ")
+        if typed_pass != typed_pass2:
+            return False
+
+    globals()['cached_passwd'] = typed_pass
+    return typed_pass
+
+
 def CreateSSLContext(certs):
     key_and_cert = certs['key_and_cert']
     peer_ca_cert = certs['peer_ca_cert']
@@ -36,6 +57,7 @@ def CreateSSLContext(certs):
             raise Exception("%s does not exist or is not readable" % f)
 
     ctx = SSL.Context(SSL.SSLv23_METHOD)   # Use best possible TLS Method
+    ctx.set_passwd_cb(passwd_callback, None)
     ctx.use_certificate_file(key_and_cert)
     ctx.use_privatekey_file(key_and_cert)
     ctx.load_verify_locations(peer_ca_cert)
-- 
2.6.3

