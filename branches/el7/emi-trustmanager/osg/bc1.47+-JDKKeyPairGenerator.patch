Index: emi-trustmanager-3.0.3/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java
===================================================================
--- emi-trustmanager-3.0.3.orig/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java	2014-11-12 00:51:07.000000000 -0600
+++ emi-trustmanager-3.0.3/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java	2014-11-24 18:36:13.572550969 -0600
@@ -21,6 +21,7 @@
 import java.math.BigInteger;
 import java.security.InvalidKeyException;
 import java.security.KeyPair;
+import java.security.KeyPairGenerator;
 import java.security.NoSuchAlgorithmException;
 import java.security.NoSuchProviderException;
 import java.security.PrivateKey;
@@ -30,6 +31,7 @@
 import java.security.SignatureException;
 import java.security.cert.CertificateEncodingException;
 import java.security.cert.X509Certificate;
+import java.security.spec.RSAKeyGenParameterSpec;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Enumeration;
@@ -51,7 +53,6 @@
 import org.bouncycastle.asn1.x509.X509Name;
 import org.bouncycastle.jce.PKCS10CertificationRequest;
 import org.bouncycastle.jce.provider.BouncyCastleProvider;
-import org.bouncycastle.jce.provider.JDKKeyPairGenerator;
 import org.bouncycastle.openssl.PEMWriter;
 import org.bouncycastle.x509.X509V3CertificateGenerator;
 import org.glite.security.util.PrivateKeyReader;
@@ -283,8 +284,11 @@
      * Generates the private and public keys if they are not given.
      */
     private void generateKeys() {
-        JDKKeyPairGenerator.RSA keyPairGen = new JDKKeyPairGenerator.RSA();
-        keyPairGen.initialize(m_keyLength, new SecureRandom());
+        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA", "BC");
+        keyPairGen.initialize(
+            new RSAKeyGenParameterSpec(m_keyLength,
+            BigInteger.valueOf(65537)),
+            new SecureRandom());
         KeyPair pair = keyPairGen.generateKeyPair();
         m_privateKey = pair.getPrivate();
         m_publicKey = pair.getPublic();
Index: emi-trustmanager-3.0.3/test/src/org/glite/security/util/PrivateKeyReaderTest.java
===================================================================
--- emi-trustmanager-3.0.3.orig/test/src/org/glite/security/util/PrivateKeyReaderTest.java	2011-03-28 18:43:34.000000000 -0500
+++ emi-trustmanager-3.0.3/test/src/org/glite/security/util/PrivateKeyReaderTest.java	2014-11-24 18:30:00.681774369 -0600
@@ -22,11 +22,11 @@
 
 import org.apache.log4j.Logger;
 
-import org.bouncycastle.jce.provider.JDKKeyPairGenerator;
 import org.bouncycastle.openssl.PasswordFinder;
 
 import org.glite.security.TestBase;
 
+import java.math.BigInteger;
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
 import java.io.FileInputStream;
@@ -35,8 +35,10 @@
 import java.io.StringBufferInputStream;
 import java.io.StringReader;
 import java.security.KeyPair;
+import java.security.KeyPairGenerator;
 import java.security.PrivateKey;
 import java.security.SecureRandom;
+import java.security.spec.RSAKeyGenParameterSpec;
 
 
 /**
@@ -432,8 +434,11 @@
      * @throws Throwable DOCUMENT ME!
      */
     public void testWriteRead() throws Throwable {
-        JDKKeyPairGenerator.RSA keyPairGen = new JDKKeyPairGenerator.RSA();
-        keyPairGen.initialize(1024, new SecureRandom());
+        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA", "BC");
+        keyPairGen.initialize(
+            new RSAKeyGenParameterSpec(1024,
+            BigInteger.valueOf(65537)),
+            new SecureRandom());
         KeyPair pair = keyPairGen.generateKeyPair();
         PrivateKey privateKey = pair.getPrivate();
         
