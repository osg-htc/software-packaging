From 67a67e8688023e682d6421958791e7d895981802 Mon Sep 17 00:00:00 2001
From: Matyas Selmeci <matyas@cs.wisc.edu>
Date: Tue, 25 Nov 2014 20:45:42 -0600
Subject: [PATCH 13/26] DERObjectIdentifier -> ASN1ObjectIdentifier (bc1.47)

---
 src/org/glite/security/util/DNImpl.java                |  4 ++--
 src/org/glite/security/util/DNImplRFC2253.java         | 18 +++++++++---------
 .../security/util/proxy/CertificateExtensionData.java  |  6 +++---
 src/org/glite/security/util/proxy/ProxyCertUtil.java   |  8 ++++----
 .../security/util/proxy/ProxyCertificateGenerator.java |  6 +++---
 .../security/util/proxy/ProxyCertificateInfo.java      |  8 ++++----
 src/org/glite/security/util/proxy/ProxyPolicy.java     |  6 +++---
 7 files changed, 28 insertions(+), 28 deletions(-)

diff --git a/src/org/glite/security/util/DNImpl.java b/src/org/glite/security/util/DNImpl.java
index 9774747..122f00e 100644
--- a/src/org/glite/security/util/DNImpl.java
+++ b/src/org/glite/security/util/DNImpl.java
@@ -16,7 +16,7 @@
  */
 package org.glite.security.util;
 
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.x509.X509Name;
 
 import java.security.Principal;
@@ -41,7 +41,7 @@ public class DNImpl extends DNImplRFC2253 {
      *            The number of fields in the DN (both oids and rdns have to
      *            have this number of items).
      */
-    public DNImpl(DERObjectIdentifier[] newOids, String[] newRdns, int newCount) {
+    public DNImpl(ASN1ObjectIdentifier[] newOids, String[] newRdns, int newCount) {
         super(newOids, newRdns, newCount);
     }
 
diff --git a/src/org/glite/security/util/DNImplRFC2253.java b/src/org/glite/security/util/DNImplRFC2253.java
index ba9f64a..d377c35 100644
--- a/src/org/glite/security/util/DNImplRFC2253.java
+++ b/src/org/glite/security/util/DNImplRFC2253.java
@@ -18,7 +18,7 @@ package org.glite.security.util;
 
 import org.apache.log4j.Logger;
 
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.x509.X509Name;
 
 import org.bouncycastle.jce.X509Principal;
@@ -66,7 +66,7 @@ public class DNImplRFC2253 implements DN {
     public String[] m_rdns = null;
 
     /** The array of object identifiers. */
-    public DERObjectIdentifier[] m_oids = null;
+    public ASN1ObjectIdentifier[] m_oids = null;
 
     /** The number of fields in the DN. */
     public int m_count = 0;
@@ -78,7 +78,7 @@ public class DNImplRFC2253 implements DN {
      * @param newRdns The array or relative distinguished names.
      * @param newCount The number of fields in the DN (both oids and rdns have to have this number of items).
      */
-    public DNImplRFC2253(DERObjectIdentifier[] newOids, String[] newRdns, int newCount) {
+    public DNImplRFC2253(ASN1ObjectIdentifier[] newOids, String[] newRdns, int newCount) {
         m_oids = newOids;
         m_rdns = newRdns;
         m_count = newCount;
@@ -163,7 +163,7 @@ public class DNImplRFC2253 implements DN {
             }
         }
 
-        m_oids = (DERObjectIdentifier[]) x509Principal.getOIDs().toArray(new DERObjectIdentifier[] {});
+        m_oids = (ASN1ObjectIdentifier[]) x509Principal.getOIDs().toArray(new ASN1ObjectIdentifier[] {});
         m_rdns = (String[]) x509Principal.getValues().toArray(new String[] {});
         m_count = m_oids.length;
     }
@@ -175,7 +175,7 @@ public class DNImplRFC2253 implements DN {
      */
     @SuppressWarnings("unchecked")
 	public DNImplRFC2253(X509Name x509Name) {
-        m_oids = (DERObjectIdentifier[]) x509Name.getOIDs().toArray(new DERObjectIdentifier[] {});
+        m_oids = (ASN1ObjectIdentifier[]) x509Name.getOIDs().toArray(new ASN1ObjectIdentifier[] {});
         m_rdns = (String[]) x509Name.getValues().toArray(new String[0]);
         m_count = m_oids.length;
 
@@ -349,7 +349,7 @@ public class DNImplRFC2253 implements DN {
 	private void parse(String inputDN, boolean reversed) {
         X509Principal x509Principal = new X509Principal(reversed, inputDN);
 
-        m_oids = (DERObjectIdentifier[]) x509Principal.getOIDs().toArray(new DERObjectIdentifier[] {});
+        m_oids = (ASN1ObjectIdentifier[]) x509Principal.getOIDs().toArray(new ASN1ObjectIdentifier[] {});
         m_rdns = (String[]) x509Principal.getValues().toArray(new String[0]);
         m_count = m_oids.length;
     }
@@ -389,7 +389,7 @@ public class DNImplRFC2253 implements DN {
 
         X509Principal x509Principal = new X509Principal(false, newInput.toString());
 
-        m_oids = (DERObjectIdentifier[]) x509Principal.getOIDs().toArray(new DERObjectIdentifier[] {});
+        m_oids = (ASN1ObjectIdentifier[]) x509Principal.getOIDs().toArray(new ASN1ObjectIdentifier[] {});
         m_rdns = (String[]) x509Principal.getValues().toArray(new String[0]);
         m_count = m_oids.length;
     }
@@ -404,7 +404,7 @@ public class DNImplRFC2253 implements DN {
     public boolean equals(Object inputDN2) {
         int count;
         String[] rdns = null;
-        DERObjectIdentifier[] oids = null;
+        ASN1ObjectIdentifier[] oids = null;
         
         if (inputDN2 instanceof DNImpl) {
             DNImpl dn2 = (DNImpl) inputDN2;
@@ -475,7 +475,7 @@ public class DNImplRFC2253 implements DN {
         int newCount = m_count - 1;
 
         String[] newRdns = new String[newCount];
-        DERObjectIdentifier[] newOids = new DERObjectIdentifier[newCount];
+        ASN1ObjectIdentifier[] newOids = new ASN1ObjectIdentifier[newCount];
 
         for (int n = 0; n < newCount; n++) {
             newRdns[n] = m_rdns[n];
diff --git a/src/org/glite/security/util/proxy/CertificateExtensionData.java b/src/org/glite/security/util/proxy/CertificateExtensionData.java
index 5b7c723..8dbd6e0 100644
--- a/src/org/glite/security/util/proxy/CertificateExtensionData.java
+++ b/src/org/glite/security/util/proxy/CertificateExtensionData.java
@@ -17,7 +17,7 @@
 package org.glite.security.util.proxy;
 
 import org.bouncycastle.asn1.ASN1Encodable;
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 
 /**
  * A class representing a x509 certificate extension for easily handling them.
@@ -28,7 +28,7 @@ public class CertificateExtensionData {
     /**
      * The oid of the extension.
      */
-    public DERObjectIdentifier oid;
+    public ASN1ObjectIdentifier oid;
     /**
      * The flag for whether the extension is critical. 
      */
@@ -45,7 +45,7 @@ public class CertificateExtensionData {
      * @param critical The criticality flag of the extension.
      * @param value The contents of the extension.
      */
-    public CertificateExtensionData(DERObjectIdentifier oid, boolean critical, ASN1Encodable value) {
+    public CertificateExtensionData(ASN1ObjectIdentifier oid, boolean critical, ASN1Encodable value) {
         this.oid = oid;
         this.critical = critical;
         this.value = value;
diff --git a/src/org/glite/security/util/proxy/ProxyCertUtil.java b/src/org/glite/security/util/proxy/ProxyCertUtil.java
index 2bcf1d7..0c54094 100644
--- a/src/org/glite/security/util/proxy/ProxyCertUtil.java
+++ b/src/org/glite/security/util/proxy/ProxyCertUtil.java
@@ -20,7 +20,7 @@ import java.math.BigInteger;
 import java.util.Vector;
 import java.util.regex.Pattern;
 
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.x509.X509Name;
 import org.glite.security.util.DN;
 
@@ -59,13 +59,13 @@ public class ProxyCertUtil {
      */
     public static BigInteger getSN(X509Name dn) {
         Vector oids = dn.getOIDs();
-        DERObjectIdentifier oid = (DERObjectIdentifier) oids.elementAt(0);
+        ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier) oids.elementAt(0);
         String sn = (String) dn.getValues().elementAt(0);
         BigInteger bi = testGetSN(oid, sn);
         if (bi != null) {
             return bi;
         }
-        oid = (DERObjectIdentifier) oids.elementAt(oids.size() - 1);
+        oid = (ASN1ObjectIdentifier) oids.elementAt(oids.size() - 1);
         sn = (String) dn.getValues().elementAt(oids.size() - 1);
         return testGetSN(oid, sn);
 
@@ -78,7 +78,7 @@ public class ProxyCertUtil {
      * @param value The value of the RDN.
      * @return The serial number if the oid was CN and the value just a integer number.
      */
-    private static BigInteger testGetSN(DERObjectIdentifier oid, String value) {
+    private static BigInteger testGetSN(ASN1ObjectIdentifier oid, String value) {
         if (oid == X509Name.CN) {
             if (Pattern.matches("\\d*", value)) {
                 return new BigInteger(value);
diff --git a/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java b/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java
index e7ce652..f2381da 100644
--- a/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java
+++ b/src/org/glite/security/util/proxy/ProxyCertificateGenerator.java
@@ -41,7 +41,7 @@ import org.bouncycastle.asn1.ASN1EncodableVector;
 import org.bouncycastle.asn1.ASN1Sequence;
 import org.bouncycastle.asn1.ASN1Encodable;
 import org.bouncycastle.asn1.DERObject;
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.DEROctetString;
 import org.bouncycastle.asn1.DERPrintableString;
 import org.bouncycastle.asn1.DERSequence;
@@ -214,7 +214,7 @@ public class ProxyCertificateGenerator {
      * @param value The extension value.
      */
     public void addExtension(String oid, boolean critical, ASN1Encodable value) {
-        m_certGen.addExtension(new DERObjectIdentifier(oid), critical, value);
+        m_certGen.addExtension(new ASN1ObjectIdentifier(oid), critical, value);
     }
 
     /**
@@ -429,7 +429,7 @@ public class ProxyCertificateGenerator {
         int rdns = subjectSequence.size();
         DERSet rdn = (DERSet) subjectSequence.getObjectAt(rdns - 1);
         DERSequence rdnSequence = (DERSequence) rdn.getObjectAt(0);
-        DERObjectIdentifier oid = (DERObjectIdentifier) rdnSequence.getObjectAt(0);
+        ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier) rdnSequence.getObjectAt(0);
         if (oid.equals(X509Name.CN)) {
             String cn = rdnSequence.getObjectAt(1).toString();
             if (cn.equals("proxy")) { // old style unlimited proxy
diff --git a/src/org/glite/security/util/proxy/ProxyCertificateInfo.java b/src/org/glite/security/util/proxy/ProxyCertificateInfo.java
index 6abebce..7711170 100644
--- a/src/org/glite/security/util/proxy/ProxyCertificateInfo.java
+++ b/src/org/glite/security/util/proxy/ProxyCertificateInfo.java
@@ -21,7 +21,7 @@ import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 
 import org.bouncycastle.asn1.ASN1OctetString;
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.x509.X509Name;
 import org.glite.security.util.CertUtil;
 
@@ -92,7 +92,7 @@ public class ProxyCertificateInfo {
         // If not, check if the DN ends with either "cn=proxy" or "cn=limited"
         // proxy indicating that it is legacy proxy.
         X509Name subject = (X509Name) m_cert.getSubjectDN();
-        DERObjectIdentifier oid = (DERObjectIdentifier) subject.getOIDs().lastElement();
+        ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier) subject.getOIDs().lastElement();
 
         // not ending with CN RDN, don't know what this cert is.
         if (!X509Name.CN.equals(oid)) {
@@ -119,7 +119,7 @@ public class ProxyCertificateInfo {
      * @return true in case DN is legacy proxy dn.
      */
     public static boolean isLegacyDN(X509Name subject) {
-        DERObjectIdentifier oid = (DERObjectIdentifier) subject.getOIDs().lastElement();
+        ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier) subject.getOIDs().lastElement();
         // not ending with CN RDN, don't know what this cert is.
         if (oid != X509Name.CN) {
             return false;
@@ -148,7 +148,7 @@ public class ProxyCertificateInfo {
             // If not, check if the DN ends with "cn=limited proxy" proxy
             // indicating that it is limited legacy proxy.
             X509Name subject = (X509Name) m_cert.getSubjectDN();
-            DERObjectIdentifier oid = (DERObjectIdentifier) subject.getOIDs().lastElement();
+            ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier) subject.getOIDs().lastElement();
 
             // not ending with CN RDN, this shouldn't happen as it passed the
             // getProxyType, but check anyway, defence in depth and all...
diff --git a/src/org/glite/security/util/proxy/ProxyPolicy.java b/src/org/glite/security/util/proxy/ProxyPolicy.java
index 310936c..2a44fe4 100644
--- a/src/org/glite/security/util/proxy/ProxyPolicy.java
+++ b/src/org/glite/security/util/proxy/ProxyPolicy.java
@@ -23,7 +23,7 @@ import org.bouncycastle.asn1.ASN1EncodableVector;
 import org.bouncycastle.asn1.ASN1OctetString;
 import org.bouncycastle.asn1.ASN1Sequence;
 import org.bouncycastle.asn1.DERObject;
-import org.bouncycastle.asn1.DERObjectIdentifier;
+import org.bouncycastle.asn1.ASN1ObjectIdentifier;
 import org.bouncycastle.asn1.DEROctetString;
 import org.bouncycastle.asn1.DERSequence;
 
@@ -84,7 +84,7 @@ public class ProxyPolicy extends ASN1Object {
      */
     public ProxyPolicy(ASN1Sequence seq) {
         if (seq != null && seq.size() > 0) {
-            if (seq.getObjectAt(0) instanceof DERObjectIdentifier) {
+            if (seq.getObjectAt(0) instanceof ASN1ObjectIdentifier) {
                 m_oid = seq.getObjectAt(0).toString();
             } else {
                 throw new IllegalArgumentException("ProxyPolicy parser error, expected object identifier, but got:"
@@ -140,7 +140,7 @@ public class ProxyPolicy extends ASN1Object {
      */
     public DERObject toASN1Primitive() {
         ASN1EncodableVector v = new ASN1EncodableVector();
-        v.add(new DERObjectIdentifier(m_oid));
+        v.add(new ASN1ObjectIdentifier(m_oid));
         if (m_policy != null) {
             v.add(new DEROctetString(m_policy));
         }
-- 
2.0.1

