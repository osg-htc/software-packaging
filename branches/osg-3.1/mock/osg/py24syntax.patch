Index: mock-1.0.36/py/mockbuild/backend.py
===================================================================
--- mock-1.0.36.orig/py/mockbuild/backend.py	2012-11-01 15:53:00.000000003 -0500
+++ mock-1.0.36/py/mockbuild/backend.py	2012-11-26 17:07:22.000000003 -0600
@@ -207,33 +207,34 @@
         statestr = "scrub %s" % scrub_opts
         self.start(statestr)
         try:
-            self._resetLogging()
-            self._callHooks('clean')
-            for scrub in scrub_opts:
-                if scrub == 'all':
-                    self.root_log.info("scrubbing everything for %s" % self.config_name)
-                    self._unlock_and_rm_chroot()
-                    self.chrootWasCleaned = True
-                    mockbuild.util.rmtree(self.cachedir, selinux=self.selinux)
-                elif scrub == 'chroot':
-                    self.root_log.info("scrubbing chroot for %s" % self.config_name)
-                    self._unlock_and_rm_chroot()
-                    self.chrootWasCleaned = True
-                elif scrub == 'cache':
-                    self.root_log.info("scrubbing cache for %s" % self.config_name)
-                    mockbuild.util.rmtree(self.cachedir, selinux=self.selinux)
-                elif scrub == 'c-cache':
-                    self.root_log.info("scrubbing c-cache for %s" % self.config_name)
-                    mockbuild.util.rmtree(os.path.join(self.cachedir, 'ccache'), selinux=self.selinux)
-                elif scrub == 'root-cache':
-                    self.root_log.info("scrubbing root-cache for %s" % self.config_name)
-                    mockbuild.util.rmtree(os.path.join(self.cachedir, 'root_cache'), selinux=self.selinux)
-                elif scrub == 'yum-cache':
-                    self.root_log.info("scrubbing yum-cache for %s" % self.config_name)
-                    mockbuild.util.rmtree(os.path.join(self.cachedir, 'yum_cache'), selinux=self.selinux)
-        except IOError, e:
-            getLog().warn("parts of chroot do not exist: %s" % e )
-            pass
+            try:
+                self._resetLogging()
+                self._callHooks('clean')
+                for scrub in scrub_opts:
+                    if scrub == 'all':
+                        self.root_log.info("scrubbing everything for %s" % self.config_name)
+                        self._unlock_and_rm_chroot()
+                        self.chrootWasCleaned = True
+                        mockbuild.util.rmtree(self.cachedir, selinux=self.selinux)
+                    elif scrub == 'chroot':
+                        self.root_log.info("scrubbing chroot for %s" % self.config_name)
+                        self._unlock_and_rm_chroot()
+                        self.chrootWasCleaned = True
+                    elif scrub == 'cache':
+                        self.root_log.info("scrubbing cache for %s" % self.config_name)
+                        mockbuild.util.rmtree(self.cachedir, selinux=self.selinux)
+                    elif scrub == 'c-cache':
+                        self.root_log.info("scrubbing c-cache for %s" % self.config_name)
+                        mockbuild.util.rmtree(os.path.join(self.cachedir, 'ccache'), selinux=self.selinux)
+                    elif scrub == 'root-cache':
+                        self.root_log.info("scrubbing root-cache for %s" % self.config_name)
+                        mockbuild.util.rmtree(os.path.join(self.cachedir, 'root_cache'), selinux=self.selinux)
+                    elif scrub == 'yum-cache':
+                        self.root_log.info("scrubbing yum-cache for %s" % self.config_name)
+                        mockbuild.util.rmtree(os.path.join(self.cachedir, 'yum_cache'), selinux=self.selinux)
+            except IOError, e:
+                getLog().warn("parts of chroot do not exist: %s" % e )
+                pass
         finally:
             print "finishing: %s" % statestr
             self.finish(statestr)
@@ -705,7 +706,7 @@
             self._setupFiles()
             log.debug("shell: mounting all filesystems")
             self._mountall()
-        except Exception as e:
+        except Exception, e:
             log.error(e)
             self.unlockBuildRoot()
             return mockbuild.exception.RootError(e).resultcode
