commit 159e566f554dc598a3774b241abad45eaf751dd8
Author: Brian Bockelman <bbockelm@cse.unl.edu>
Date:   Wed Apr 24 09:38:51 2013 -0500

    Make trustmanager reload CRLs by default.  Fixes #80.

diff --git a/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java b/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java
index b26e682..0bfe716 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java
@@ -18,11 +18,13 @@ import org.globus.gsi.stores.ResourceCertStoreParameters;
 
 import org.globus.gsi.provider.GlobusProvider;
 
+import javax.security.auth.x500.X500Principal;
 import java.security.cert.X509CRLSelector;
 import java.security.cert.CertStore;
 import java.security.cert.X509CRL;
 import java.util.Map;
 import java.util.Collection;
+import java.util.Vector;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.ListIterator;
@@ -53,7 +55,7 @@ public class CertificateRevocationLists {
     private static String defaultCrlLocations = null;
     private static CertificateRevocationLists defaultCrl  = null;
     
-    private Map crlIssuerDNMap;
+    private volatile Map<String, X509CRL> crlIssuerDNMap;
 
     private CertificateRevocationLists() {}
 
@@ -65,6 +67,25 @@ public class CertificateRevocationLists {
         return (X509CRL[]) crls.toArray(new X509CRL[crls.size()]);
     }
 
+    public Collection<X509CRL> getCRLs(X509CRLSelector selector) {
+        Collection<X500Principal> issuers = selector.getIssuers();
+        int size = issuers.size();
+        Collection<X509CRL> retval = new Vector<X509CRL>(size);
+        // Yup, this stinks.  There's loss when we convert from principal to
+        // string.  Hence, depending on weird encoding effects, we may miss
+        // some CRLs.
+        Map<String, X509CRL> crlMap = this.crlIssuerDNMap;
+        if (crlMap == null) return retval;
+        for (X500Principal principal : issuers) {
+            String dn = principal.getName();
+            X509CRL crl = crlMap.get(dn);
+            if (crl != null) {
+                retval.add(crl);
+            }
+        }
+        return retval;
+    }
+
     public X509CRL getCrl(String issuerName) {
         if (this.crlIssuerDNMap == null) {
             return null;
@@ -83,7 +104,7 @@ public class CertificateRevocationLists {
         }
 
         StringTokenizer tokens = new StringTokenizer(locations, ",");
-        Map newCrlIssuerDNMap = new HashMap();
+        Map<String, X509CRL> newCrlIssuerDNMap = new HashMap<String, X509CRL>();
         
         while(tokens.hasMoreTokens()) {
             
@@ -93,7 +114,7 @@ public class CertificateRevocationLists {
               CertStore tmp = CertStore.getInstance(GlobusProvider.CERTSTORE_TYPE, parameters);
               Collection<X509CRL> coll = (Collection<X509CRL>) tmp.getCRLs(new X509CRLSelector());
               for (X509CRL crl : coll) {
-                newCrlIssuerDNMap.put(crl.getIssuerDN().getName(), crl);
+                newCrlIssuerDNMap.put(crl.getIssuerX500Principal().getName(), crl);
               }
             } catch (Exception e) {
                 throw new RuntimeException(e);
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java
index 9817df4..0793d25 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java
@@ -16,6 +16,7 @@
 package org.globus.gsi.trustmanager;
 
 import org.globus.gsi.util.KeyStoreUtil;
+import org.globus.gsi.CertificateRevocationLists;
 
 import java.security.InvalidKeyException;
 import java.security.KeyStore;
@@ -47,6 +48,7 @@ import org.globus.gsi.GSIConstants;
  * @since 1.0
  */
 public class CRLChecker implements CertificateChecker {
+    private CertificateRevocationLists crlsList;
     private CertStore certStore;
     private KeyStore keyStore;
     private boolean checkDateValidity;
@@ -54,11 +56,26 @@ public class CRLChecker implements CertificateChecker {
     /**
      * Creates a CRLChecker where the CRL's are in the supplied stores.
      *
+     * @param crlsList          The object containing the CRL's
+     * @param keyStore          The store used to get trusted certs.
+     * @param checkDateValidity Should we check if the CRL date is valid.
+     */
+    public CRLChecker(CertificateRevocationLists crlsList, KeyStore keyStore, boolean checkDateValidity) {
+        this.crlsList = crlsList;
+        this.certStore = null;
+        this.keyStore = keyStore;
+        this.checkDateValidity = checkDateValidity;
+    }
+
+    /**
+     * Creates a CRLChecker where the CRL's are in the supplied stores.
+     *
      * @param certStore         The store containing the CRL's
      * @param keyStore          The store used to get trusted certs.
      * @param checkDateValidity Should we check if the CRL date is valid.
      */
     public CRLChecker(CertStore certStore, KeyStore keyStore, boolean checkDateValidity) {
+        this.crlsList = null;
         this.certStore = certStore;
         this.keyStore = keyStore;
         this.checkDateValidity = checkDateValidity;
@@ -80,11 +97,15 @@ public class CRLChecker implements CertificateChecker {
         crlSelector.addIssuer(certIssuer);
 
         Collection<? extends CRL> crls;
-        try {
-            crls = this.certStore.getCRLs(crlSelector);
-        } catch (CertStoreException e) {
-            throw new CertPathValidatorException(
+        if (crlsList != null) {
+            crls = crlsList.getCRLs(crlSelector);
+        } else {
+            try {
+                crls = this.certStore.getCRLs(crlSelector);
+            } catch (CertStoreException e) {
+                throw new CertPathValidatorException(
                     "Error accessing CRL from certificate store", e);
+            }
         }
 
         if (crls.size() < 1) {
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java
index 718ddad..bdb1c4d 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java
@@ -19,6 +19,7 @@ import org.globus.gsi.util.ProxyCertificateUtil;
 
 import org.globus.gsi.X509ProxyCertPathParameters;
 import org.globus.gsi.X509ProxyCertPathValidatorResult;
+import org.globus.gsi.CertificateRevocationLists;
 
 import org.globus.gsi.provider.SigningPolicyStore;
 
@@ -436,7 +437,14 @@ public class X509ProxyCertPathValidator extends CertPathValidatorSpi {
         checkers.add(new DateValidityChecker());
         checkers.add(new UnsupportedCriticalExtensionChecker());
         checkers.add(new IdentityChecker(this));
-        checkers.add(new CRLChecker(this.certStore, this.keyStore, true));
+        // NOTE: the (possible) refresh of the CRLs happens when we call getDefault.
+        // Hence, we must recreate crlsList for each call to checkCertificate
+        // Sadly, this also means that the amount of work necessary for checkCertificate
+        // can be arbitrarily large (if the CRL is indeed refreshed).
+        //
+        // Note we DO NOT use this.certStore by default!  TODO: This differs from the unit test
+        CertificateRevocationLists crlsList = CertificateRevocationLists.getDefaultCertificateRevocationLists();
+        checkers.add(new CRLChecker(crlsList, this.keyStore, true));
         checkers.add(new SigningPolicyChecker(this.policyStore));
         return checkers;
     }
diff --git a/ssl-proxies/src/main/java/org/globus/util/GlobusPathMatchingResourcePatternResolver.java b/ssl-proxies/src/main/java/org/globus/util/GlobusPathMatchingResourcePatternResolver.java
index 2ea95ac..b61f958 100644
--- a/ssl-proxies/src/main/java/org/globus/util/GlobusPathMatchingResourcePatternResolver.java
+++ b/ssl-proxies/src/main/java/org/globus/util/GlobusPathMatchingResourcePatternResolver.java
@@ -72,7 +72,6 @@ public class GlobusPathMatchingResourcePatternResolver {
             URL resourceURL = getClass().getClassLoader().getResource(pathUntilWildcard);
             this.mainClassPath = resourceURL.getPath();
             this.locationPattern = Pattern.compile(antToRegexConverter(locationPattern.replaceFirst("classpath:/", "").replaceFirst(pathUntilWildcard, "")));
-            System.err.println("Main classpath: " + this.mainClassPath);
             parseDirectoryStructure(new File(this.mainClassPath));
         } else if (locationPattern.startsWith("file:")) {
             if ((locationPattern.replaceFirst("file:", "").compareTo(getPathUntilWildcard(locationPattern.replaceFirst("file:", ""), true))) == 0) {//Check to see if the pattern is not a pattern
diff --git a/ssl-proxies/src/test/java/org/globus/gsi/provider/TestProxyPathValidator.java b/ssl-proxies/src/test/java/org/globus/gsi/provider/TestProxyPathValidator.java
index dddb8b5..93c8a82 100644
--- a/ssl-proxies/src/test/java/org/globus/gsi/provider/TestProxyPathValidator.java
+++ b/ssl-proxies/src/test/java/org/globus/gsi/provider/TestProxyPathValidator.java
@@ -18,8 +18,12 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.globus.common.CoGProperties;
+
 import org.globus.gsi.util.CertificateLoadUtil;
 
+import org.globus.gsi.CertificateRevocationLists;
+
 import org.globus.gsi.trustmanager.CRLChecker;
 import org.globus.gsi.trustmanager.CertificateChecker;
 import org.globus.gsi.trustmanager.DateValidityChecker;
@@ -283,9 +287,13 @@ public class TestProxyPathValidator {
     public X509CRL[] crls;
     CertificateFactory factory;
 
+    String crlDir;
+
     @Before
     public void setup() throws Exception {
 
+        CoGProperties.getDefault().setProperty(CoGProperties.getDefault().CRL_CACHE_LIFETIME, "1");
+
         Security.addProvider(new MockGlobusProvider());
 
         factory = CertificateFactory.getInstance("X.509");
@@ -312,6 +320,8 @@ public class TestProxyPathValidator {
             }
             crls[i] = CertificateLoadUtil.loadCrl(in);
         }
+
+        crlDir = loader.getResource(BASE).getPath();
     }
 
     private void validateChain(X509Certificate[] chainCerts, KeyStore keyStore, CertStore certStore,
@@ -346,7 +356,7 @@ public class TestProxyPathValidator {
             throws Exception {
 
         MockProxyCertPathValidator validator =
-                new MockProxyCertPathValidator(false, false, false);
+                new MockProxyCertPathValidator(false, false, false, false);
         X509ProxyCertPathParameters parameters =
                 new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
                         false);
@@ -359,6 +369,26 @@ public class TestProxyPathValidator {
         assert (expectedIdentity.equals(result.getIdentityCertificate()));
     }
 
+    private void validateChainBuiltin(X509Certificate[] chainCerts,
+                               KeyStore keyStore,
+                               CertStore certStore,
+                               SigningPolicyStore policyStore)
+            throws Exception {
+
+        List<X509Certificate> certList = Arrays.asList(chainCerts);
+        CertPath certPath = factory.generateCertPath(certList);
+        MockProxyCertPathValidator validator =
+                new MockProxyCertPathValidator(false, false, false, true);
+        X509ProxyCertPathParameters parameters =
+                new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
+                        false);
+        X509ProxyCertPathValidatorResult result =
+                (X509ProxyCertPathValidatorResult) validator
+                        .engineValidate(certPath, parameters
+                        );
+
+    }
+
     private void validateError(X509Certificate[] certChain, KeyStore keyStore,
                                CertStore certStore,
                                SigningPolicyStore policyStore, String error)
@@ -368,7 +398,40 @@ public class TestProxyPathValidator {
 
         CertPath chain = factory.generateCertPath(certList);
         MockProxyCertPathValidator validator =
-                new MockProxyCertPathValidator(false, false, false);
+                new MockProxyCertPathValidator(false, false, false, false);
+        X509ProxyCertPathParameters parameters =
+                new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
+                        false);
+        boolean exception = false;
+        try {
+            X509ProxyCertPathValidatorResult result =
+                    (X509ProxyCertPathValidatorResult) validator
+                            .engineValidate(chain, parameters
+                            );
+        } catch (IllegalArgumentException e) {
+            if (e.getMessage().indexOf(error) != -1) {
+                exception = true;
+            }
+        } catch (CertPathValidatorException e) {
+            if (e.getMessage().indexOf(error) != -1) {
+
+                exception = true;
+            }
+        }
+
+        assert (exception);
+    }
+
+    private void validateErrorBuiltin(X509Certificate[] certChain, KeyStore keyStore,
+                                     CertStore certStore,
+                                     SigningPolicyStore policyStore, String error)
+            throws Exception {
+
+        List<X509Certificate> certList = Arrays.asList(certChain);
+
+        CertPath chain = factory.generateCertPath(certList);
+        MockProxyCertPathValidator validator =
+                new MockProxyCertPathValidator(false, false, false, true);
         X509ProxyCertPathParameters parameters =
                 new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
                         false);
@@ -404,7 +467,7 @@ public class TestProxyPathValidator {
         CertPath certPath = factory.generateCertPath(certList);
 
         MockProxyCertPathValidator validator =
-                new MockProxyCertPathValidator(false, false, true);
+                new MockProxyCertPathValidator(false, false, true, false);
         X509ProxyCertPathParameters parameters =
                 new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
                         false);
@@ -499,7 +562,7 @@ public class TestProxyPathValidator {
                 goodCertsArr[1], true);
 
         MockProxyCertPathValidator validator =
-                new MockProxyCertPathValidator(false, false, false);
+                new MockProxyCertPathValidator(false, false, false, false);
         X509ProxyCertPathParameters parameters =
                 new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
                         true);
@@ -642,7 +705,7 @@ public class TestProxyPathValidator {
         certList.add(chain[1]);
         certList.add(chain[2]);
         CertPath path = factory.generateCertPath(certList);
-        MockProxyCertPathValidator validator = new MockProxyCertPathValidator(false, false, false);
+        MockProxyCertPathValidator validator = new MockProxyCertPathValidator(false, false, false, false);
         X509ProxyCertPathParameters parameters =
                 new X509ProxyCertPathParameters(keyStore, certStore, policyStore, false, map);
         X509ProxyCertPathValidatorResult result =
@@ -892,6 +955,18 @@ public class TestProxyPathValidator {
         chain = new X509Certificate[]{goodCertsArr[28], goodCertsArr[25]};
         validateChain(chain, keyStore, certStore, policyStore, goodCertsArr[28],
                 false);
+
+        // ca2 user2 revoked CRL
+        // The sleep statements here are to force a CRL refresh.
+        chain = new X509Certificate[]{goodCertsArr[27], goodCertsArr[25]};
+        String caCertLocations =
+                CoGProperties.getDefault().getCaCertLocations();
+        System.setProperty("X509_CERT_DIR", crlDir);
+        Thread.sleep(100);
+        validateErrorBuiltin(chain, keyStore, certStore, policyStore, "revoked");
+        Thread.sleep(100);
+        System.setProperty("X509_CERT_DIR", caCertLocations);
+        validateChainBuiltin(chain, keyStore, certStore, policyStore);
     }
 
     @Test
@@ -932,15 +1007,18 @@ public class TestProxyPathValidator {
         boolean checkCertificateDateValidity;
         boolean checkCRLDateValidity;
         boolean checkSigningPolicy;
+        boolean useBuiltinCRL;
         private CertificateChecker dateChecker = new DateValidityChecker();
 
         public MockProxyCertPathValidator(boolean checkCertificateDateValidity_,
                                           boolean checkCRLDateValidity_,
-                                          boolean checkSigningPolicy_) {
+                                          boolean checkSigningPolicy_,
+                                          boolean useBuiltinCRL_) {
 
             this.checkCertificateDateValidity = checkCertificateDateValidity_;
             this.checkCRLDateValidity = checkCRLDateValidity_;
             this.checkSigningPolicy = checkSigningPolicy_;
+            this.useBuiltinCRL = useBuiltinCRL_;
         }
 
         @Override
@@ -951,7 +1029,12 @@ public class TestProxyPathValidator {
             }
             checkers.add(new UnsupportedCriticalExtensionChecker());
             checkers.add(new IdentityChecker(this));
-            checkers.add(new CRLChecker(this.certStore, this.keyStore, this.checkCertificateDateValidity));
+            if (useBuiltinCRL) {
+              CertificateRevocationLists crls = CertificateRevocationLists.getDefaultCertificateRevocationLists();
+              checkers.add(new CRLChecker(crls, this.keyStore, this.checkCertificateDateValidity));
+            } else {
+              checkers.add(new CRLChecker(this.certStore, this.keyStore, this.checkCertificateDateValidity));
+            }
             if (this.checkSigningPolicy) {
                 checkers.add(new SigningPolicyChecker(this.policyStore));
             }
diff --git a/ssl-proxies/src/test/java/org/globus/gsi/provider/TestTrustManager.java b/ssl-proxies/src/test/java/org/globus/gsi/provider/TestTrustManager.java
index e2e813d..c33749a 100644
--- a/ssl-proxies/src/test/java/org/globus/gsi/provider/TestTrustManager.java
+++ b/ssl-proxies/src/test/java/org/globus/gsi/provider/TestTrustManager.java
@@ -60,7 +60,7 @@ public class TestTrustManager extends TestProxyPathValidator {
                         null);
         PKITrustManager manager =
                 new PKITrustManager(
-                        new MockProxyCertPathValidator(false, false, false),
+                        new MockProxyCertPathValidator(false, false, false, false),
                         validatorParam);
         X509Certificate[] certChain =
                 new X509Certificate[]{goodCertsArr[5], goodCertsArr[1],
@@ -81,7 +81,7 @@ public class TestTrustManager extends TestProxyPathValidator {
 
         // Fail because of reject limited proxy
         validatorParam = new X509ProxyCertPathParameters(keyStore, certStore, policyStore, true, null);
-        manager = new PKITrustManager(new MockProxyCertPathValidator(false, false, false), validatorParam);
+        manager = new PKITrustManager(new MockProxyCertPathValidator(false, false, false, false), validatorParam);
         certChain = new X509Certificate[]{goodCertsArr[3], goodCertsArr[1], goodCertsArr[0]};
         boolean exception = false;
         try {
diff --git a/ssl-proxies/src/test/java/org/globus/gsi/proxy/ProxyPathValidatorTest.java b/ssl-proxies/src/test/java/org/globus/gsi/proxy/ProxyPathValidatorTest.java
index 2d8ad4c..55d07e8 100644
--- a/ssl-proxies/src/test/java/org/globus/gsi/proxy/ProxyPathValidatorTest.java
+++ b/ssl-proxies/src/test/java/org/globus/gsi/proxy/ProxyPathValidatorTest.java
@@ -14,6 +14,8 @@
  */
 package org.globus.gsi.proxy;
 
+import org.globus.common.CoGProperties;
+
 import org.globus.gsi.util.CertificateLoadUtil;
 
 import org.globus.gsi.trustmanager.CRLChecker;
@@ -263,6 +265,8 @@ public class ProxyPathValidatorTest extends TestCase {
     }
 
     public static X509Certificate[] initCerts() throws Exception {
+        CoGProperties.getDefault().setProperty(CoGProperties.getDefault().CRL_CACHE_LIFETIME, "1");
+
         X509Certificate[] goodCertsArr = new X509Certificate[certs.length];
         ClassLoader loader = ProxyPathValidatorTest.class.getClassLoader();
         for (int i = 0; i < certs.length; i++) {
commit be4b5d183c4fbe26661cf601d553e5622ed94499
Author: Brian Bockelman <bbockelm@cse.unl.edu>
Date:   Mon Apr 29 07:53:19 2013 -0500

    Fix error message and list implementation, as suggested by code review.

diff --git a/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java b/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java
index 0bfe716..79f6652 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/CertificateRevocationLists.java
@@ -24,7 +24,7 @@ import java.security.cert.CertStore;
 import java.security.cert.X509CRL;
 import java.util.Map;
 import java.util.Collection;
-import java.util.Vector;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.ListIterator;
@@ -70,7 +70,7 @@ public class CertificateRevocationLists {
     public Collection<X509CRL> getCRLs(X509CRLSelector selector) {
         Collection<X500Principal> issuers = selector.getIssuers();
         int size = issuers.size();
-        Collection<X509CRL> retval = new Vector<X509CRL>(size);
+        Collection<X509CRL> retval = new ArrayList<X509CRL>(size);
         // Yup, this stinks.  There's loss when we convert from principal to
         // string.  Hence, depending on weird encoding effects, we may miss
         // some CRLs.
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java
index 0793d25..43b4886 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/CRLChecker.java
@@ -104,7 +104,7 @@ public class CRLChecker implements CertificateChecker {
                 crls = this.certStore.getCRLs(crlSelector);
             } catch (CertStoreException e) {
                 throw new CertPathValidatorException(
-                    "Error accessing CRL from certificate store", e);
+                    "Error accessing CRL from certificate store: " + e.getMessage(), e);
             }
         }
 
