From ea194dbe56799dc3c38e042b9a04e96908464196 Mon Sep 17 00:00:00 2001
From: Mike McLean <mikem@redhat.com>
Date: Mon, 23 Sep 2019 16:22:12 -0400
Subject: [PATCH 1/5] joinpath function

---
 koji/util.py | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/koji/util.py b/koji/util.py
index eaf78134..0bdb9627 100644
--- a/koji/util.py
+++ b/koji/util.py
@@ -455,6 +455,22 @@ def relpath(*args, **kwargs):
     return os.path.relpath(*args, **kwargs)
 
 
+
+def joinpath(path, *paths):
+    """A wrapper around os.path.join that limits directory traversal"""
+
+    # note that the first path is left alone
+
+    newpaths = []
+    for _p in paths:
+        p = os.path.normpath(_p)
+        if p == '..' or p.startswith('../') or p.startswith('/'):
+            raise ValueError('Invalid path segment: %s' % _p)
+        newpaths.append(p)
+
+    return os.path.join(path, *newpaths)
+
+
 def eventFromOpts(session, opts):
     """Determine event id from standard cli options
 
-- 
2.25.1

From 49ef76b602f392d09342e99f3812fcd319189154 Mon Sep 17 00:00:00 2001
From: Mike McLean <mikem@redhat.com>
Date: Mon, 23 Sep 2019 16:22:12 -0400
Subject: [PATCH 2/5] tests for joinpath

---
 tests/test_lib/test_utils.py | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/tests/test_lib/test_utils.py b/tests/test_lib/test_utils.py
index 226534a6..af8b3965 100644
--- a/tests/test_lib/test_utils.py
+++ b/tests/test_lib/test_utils.py
@@ -153,6 +153,28 @@ def test_openRemoteFile(self, m_copyfileobj, m_TemporaryFile,
         for m in mocks:
             m.assert_not_called()
 
+    def test_joinpath_bad(self):
+        bad_joins = [
+            ['/foo', '../bar'],
+            ['/foo', 'a/b/../../../bar'],
+            ['/foo', '/bar'],
+            ['/foo//', '/bar'],
+            ['/foo', 'bar', 'baz', '/zoo'],
+            ]
+        for args in bad_joins:
+            with self.assertRaises(ValueError):
+                koji.util.joinpath(*args)
+
+    def test_joinpath_good(self):
+        p = koji.util.joinpath('/foo', 'bar')
+        self.assertEquals(p, '/foo/bar')
+
+        p = koji.util.joinpath('/foo', 'bar/../baz')
+        self.assertEquals(p, '/foo/baz')
+
+        p = koji.util.joinpath('/foo', 'a/b/c/../../../z')
+        self.assertEquals(p, '/foo/z')
+
 
 class MavenUtilTestCase(unittest.TestCase):
     """Test maven relative functions"""
-- 
2.25.1

From 5a01aa05f3a57aa1bf8be9b2b5a2d5f34d766580 Mon Sep 17 00:00:00 2001
From: Mike McLean <mikem@redhat.com>
Date: Mon, 23 Sep 2019 20:28:22 -0400
Subject: [PATCH 3/5] hub: use joinpath instead of os.path.join

---
 hub/kojihub.py | 141 +++++++++++++++++++++++++------------------------
 1 file changed, 71 insertions(+), 70 deletions(-)

diff --git a/hub/kojihub.py b/hub/kojihub.py
index bc9f70ca..15d4f5c0 100644
--- a/hub/kojihub.py
+++ b/hub/kojihub.py
@@ -58,6 +58,7 @@
 from koji.context import context
 from koji.util import dslice
 from koji.util import md5_constructor
+from koji.util import joinpath
 from koji.util import multi_fnmatch
 from koji.util import safer_move
 from koji.util import sha1_constructor
@@ -2387,13 +2388,13 @@ def repo_init(tag, with_src=False, with_debuginfo=False, event=None):
     #generate pkglist files
     pkglist = {}
     for repoarch in repo_arches:
-        archdir = os.path.join(repodir, repoarch)
+        archdir = joinpath(repodir, repoarch)
         koji.ensuredir(archdir)
         # Make a symlink to our topdir
         top_relpath = os.path.relpath(koji.pathinfo.topdir, archdir)
-        top_link = os.path.join(archdir, 'toplink')
+        top_link = joinpath(archdir, 'toplink')
         os.symlink(top_relpath, top_link)
-        pkglist[repoarch] = open(os.path.join(archdir, 'pkglist'), 'w')
+        pkglist[repoarch] = open(joinpath(archdir, 'pkglist'), 'w')
     #NOTE - rpms is now an iterator
     for rpminfo in rpms:
         if not with_debuginfo and koji.is_debuginfo(rpminfo['name']):
@@ -2418,7 +2419,7 @@ def repo_init(tag, with_src=False, with_debuginfo=False, event=None):
 
     #write blocked package lists
     for repoarch in repo_arches:
-        blocklist = open(os.path.join(repodir, repoarch, 'blocklist'), 'w')
+        blocklist = open(joinpath(repodir, repoarch, 'blocklist'), 'w')
         for pkg in blocks:
             blocklist.write(pkg['package_name'])
             blocklist.write('\n')
@@ -2434,9 +2435,9 @@ def repo_init(tag, with_src=False, with_debuginfo=False, event=None):
                          'epoch': archive['build_epoch'],
                          'volume_name': archive['volume_name'],
                         }
-            srcdir = os.path.join(koji.pathinfo.mavenbuild(buildinfo),
+            srcdir = joinpath(koji.pathinfo.mavenbuild(buildinfo),
                                   koji.pathinfo.mavenrepo(archive))
-            destlink = os.path.join(repodir, 'maven',
+            destlink = joinpath(repodir, 'maven',
                                     koji.pathinfo.mavenrepo(archive))
             dir_links.add((srcdir, destlink))
             dest_parent = os.path.dirname(destlink)
@@ -2489,7 +2490,7 @@ def _write_maven_repo_metadata(destdir, artifacts):
   </versioning>
 </metadata>
 """ % datetime.datetime.now().strftime('%Y%m%d%H%M%S')
-    mdfile = open(os.path.join(destdir, 'maven-metadata.xml'), 'w')
+    mdfile = open(joinpath(destdir, 'maven-metadata.xml'), 'w')
     mdfile.write(contents)
     mdfile.close()
     _generate_maven_metadata(destdir)
@@ -2514,12 +2515,12 @@ def dist_repo_init(tag, keys, task_opts):
     insert.execute()
     repodir = koji.pathinfo.distrepo(repo_id, tinfo['name'])
     for arch in arches:
-        koji.ensuredir(os.path.join(repodir, arch))
+        koji.ensuredir(joinpath(repodir, arch))
     # handle comps
     if task_opts.get('comps'):
-        groupsdir = os.path.join(repodir, 'groups')
+        groupsdir = joinpath(repodir, 'groups')
         koji.ensuredir(groupsdir)
-        shutil.copyfile(os.path.join(koji.pathinfo.work(),
+        shutil.copyfile(joinpath(koji.pathinfo.work(),
             task_opts['comps']), groupsdir + '/comps.xml')
     # note: we need to match args from the other postRepoInit callback
     koji.plugin.run_callbacks('postRepoInit', tag=tinfo, with_src=False,
@@ -3620,7 +3621,7 @@ def get_build_logs(build):
     for dirpath, dirs, files in os.walk(logdir):
         subdir = os.path.relpath(dirpath, logdir)
         for fn in files:
-            filepath = os.path.join(dirpath, fn)
+            filepath = joinpath(dirpath, fn)
             if os.path.islink(filepath):
                 logger.warning("Symlink under logdir: %s", filepath)
                 continue
@@ -4368,17 +4369,17 @@ def list_archive_files(archive_id, queryOpts=None, strict=False):
     if maven_info:
         maven_archive = get_maven_archive(archive_info['id'], strict=True)
         archive_info.update(maven_archive)
-        file_path = os.path.join(koji.pathinfo.mavenbuild(build_info),
+        file_path = joinpath(koji.pathinfo.mavenbuild(build_info),
                                  koji.pathinfo.mavenfile(archive_info))
     elif win_info:
         win_archive = get_win_archive(archive_info['id'], strict=True)
         archive_info.update(win_archive)
-        file_path = os.path.join(koji.pathinfo.winbuild(build_info),
+        file_path = joinpath(koji.pathinfo.winbuild(build_info),
                                  koji.pathinfo.winfile(archive_info))
     elif image_info:
         image_archive = get_image_archive(archive_info['id'], strict=True)
         archive_info.update(image_archive)
-        file_path = os.path.join(koji.pathinfo.imagebuild(build_info),
+        file_path = joinpath(koji.pathinfo.imagebuild(build_info),
                                  archive_info['filename'])
     else:
         # TODO: support other build types
@@ -4471,9 +4472,9 @@ def list_task_output(taskID, stat=False, all_volumes=False):
         for path, dirs, files in os.walk(taskDir):
             for filename in files:
                 relpath = path[len(taskDir) + 1:]
-                relfilename = os.path.join(relpath, filename)
+                relfilename = joinpath(relpath, filename)
                 if stat:
-                    stat_info = os.stat(os.path.join(path, filename))
+                    stat_info = os.stat(joinpath(path, filename))
                     stat_map = {}
                     for attr in dir(stat_info):
                         if attr == 'st_size':
@@ -5163,7 +5164,7 @@ def check_noarch_rpms(basepath, rpms, logs=None):
     for arch in logs:
         for log in logs[arch]:
             if os.path.basename(log) == 'noarch_rpmdiff.json':
-                task_hash = json.load(open(os.path.join(basepath, log), 'rt'))
+                task_hash = json.load(open(joinpath(basepath, log), 'rt'))
                 for task_id in task_hash:
                     hashes[task_id] = task_hash[task_id]
 
@@ -5440,7 +5441,7 @@ def get_metadata(self, metadata, directory):
         if metadata.endswith('.json'):
             # handle uploaded metadata
             workdir = koji.pathinfo.work()
-            path = os.path.join(workdir, directory, metadata)
+            path = joinpath(workdir, directory, metadata)
             if not os.path.exists(path):
                 raise koji.GenericError("No such file: %s" % metadata)
             fo = open(path, 'rb')
@@ -5584,7 +5585,7 @@ def import_metadata(self):
         #       - doesn't fit with current major archive categories
         builddir = koji.pathinfo.build(self.buildinfo)
         koji.ensuredir(builddir)
-        path = os.path.join(builddir, 'metadata.json')
+        path = joinpath(builddir, 'metadata.json')
         fo = open(path, 'w')
         try:
             fo.write(self.raw_metadata)
@@ -5751,7 +5752,7 @@ def prep_outputs(self):
             if fileinfo.get('metadata_only', False):
                 self.metadata_only = True
             workdir = koji.pathinfo.work()
-            path = os.path.join(workdir, self.directory, fileinfo.get('relpath', ''), fileinfo['filename'])
+            path = joinpath(workdir, self.directory, fileinfo.get('relpath', ''), fileinfo['filename'])
             fileinfo['hub.path'] = path
 
             filesize = os.path.getsize(path)
@@ -5998,14 +5999,14 @@ def _import_wrapper(task_id, build_info, rpm_results):
     rpm_task_dir = koji.pathinfo.task(task_id)
 
     for rpm_path in [rpm_results['srpm']] + rpm_results['rpms']:
-        rpm_path = os.path.join(rpm_task_dir, rpm_path)
+        rpm_path = joinpath(rpm_task_dir, rpm_path)
         rpm_info = import_rpm(rpm_path, build_info, rpm_buildroot_id, wrapper=True)
         import_rpm_file(rpm_path, build_info, rpm_info)
         add_rpm_sig(rpm_info['id'], koji.rip_rpm_sighdr(rpm_path))
 
     for log in rpm_results['logs']:
         # assume we're only importing noarch packages
-        import_build_log(os.path.join(rpm_task_dir, log),
+        import_build_log(joinpath(rpm_task_dir, log),
                          build_info, subdir='noarch')
 
 def merge_scratch(task_id):
@@ -6107,12 +6108,12 @@ def merge_scratch(task_id):
     for task_id, info in tasks.items():
         taskpath = koji.pathinfo.task(task_id)
         for filename in info['rpms']:
-            filepath = os.path.realpath(os.path.join(taskpath, filename))
+            filepath = os.path.realpath(joinpath(taskpath, filename))
             rpminfo = import_rpm(filepath, build, info['buildroot_id'])
             import_rpm_file(filepath, build, rpminfo)
             add_rpm_sig(rpminfo['id'], koji.rip_rpm_sighdr(filepath))
         for logname in info['logs']:
-            logpath = os.path.realpath(os.path.join(taskpath, logname))
+            logpath = os.path.realpath(joinpath(taskpath, logname))
             import_build_log(logpath, build, subdir=info['arch'])
 
     # flag tags whose content has changed, so relevant repos can be regen'ed
@@ -6372,7 +6373,7 @@ def import_archive_internal(filepath, buildinfo, type, typeInfo, buildroot_id=No
 
         if not metadata_only:
             # move the file to it's final destination
-            mavendir = os.path.join(koji.pathinfo.mavenbuild(buildinfo),
+            mavendir = joinpath(koji.pathinfo.mavenbuild(buildinfo),
                                     koji.pathinfo.mavenrepo(typeInfo))
             _import_archive_file(filepath, mavendir)
             _generate_maven_metadata(mavendir)
@@ -6393,15 +6394,15 @@ def import_archive_internal(filepath, buildinfo, type, typeInfo, buildroot_id=No
         if not metadata_only:
             destdir = koji.pathinfo.winbuild(buildinfo)
             if relpath:
-                destdir = os.path.join(destdir, relpath)
+                destdir = joinpath(destdir, relpath)
             _import_archive_file(filepath, destdir)
     elif type == 'image':
         insert = InsertProcessor('image_archives')
         insert.set(archive_id=archive_id)
         insert.set(arch=typeInfo['arch'])
         insert.execute()
         if not metadata_only:
-            imgdir = os.path.join(koji.pathinfo.imagebuild(buildinfo))
+            imgdir = joinpath(koji.pathinfo.imagebuild(buildinfo))
             _import_archive_file(filepath, imgdir)
         # import log files?
     else:
@@ -8533,8 +8534,8 @@ def rpmdiff(basepath, rpmlist, hashes):
         # ignore differences in file size, md5sum, and mtime
         # (files may have been generated at build time and contain
         #  embedded dates or other insignificant differences)
-        d = koji.rpmdiff.Rpmdiff(os.path.join(basepath, first_rpm),
-            os.path.join(basepath, other_rpm), ignore='S5TN')
+        d = koji.rpmdiff.Rpmdiff(joinpath(basepath, first_rpm),
+            joinpath(basepath, other_rpm), ignore='S5TN')
         if d.differs():
             raise koji.BuildError(
                 'The following noarch package built differently on different architectures: %s\n'
@@ -8569,27 +8570,27 @@ def importImageInternal(task_id, build_id, imgdata):
     imgdata['relpath'] = koji.pathinfo.taskrelpath(imgdata['task_id'])
     archives = []
     for imgfile in imgdata['files']:
-        fullpath = os.path.join(workpath, imgfile)
+        fullpath = joinpath(workpath, imgfile)
         archivetype = get_archive_type(imgfile)
         logger.debug('image type we are importing is: %s' % archivetype)
         if not archivetype:
             raise koji.BuildError('Unsupported image type')
         archives.append(import_archive(fullpath, build_info, 'image', imgdata))
 
     # upload logs
     logs = [f for f in os.listdir(workpath) if f.endswith('.log')]
     for logfile in logs:
-        logsrc = os.path.join(workpath, logfile)
+        logsrc = joinpath(workpath, logfile)
         if tinfo['method'] == 'livemedia':
             # multiarch livemedia spins can have log name conflicts, so we
             # add the arch to the path
-            logdir = os.path.join(koji.pathinfo.build(build_info),
+            logdir = joinpath(koji.pathinfo.build(build_info),
                                   'data/logs/image', imgdata['arch'])
         else:
-            logdir = os.path.join(koji.pathinfo.build(build_info),
+            logdir = joinpath(koji.pathinfo.build(build_info),
                                   'data/logs/image')
         koji.ensuredir(logdir)
-        final_path = os.path.join(logdir, os.path.basename(logfile))
+        final_path = joinpath(logdir, os.path.basename(logfile))
         if os.path.exists(final_path):
             raise koji.GenericError("Error importing build log. %s already exists." % final_path)
         if os.path.islink(logsrc) or not os.path.isfile(logsrc):
@@ -9560,13 +9561,13 @@ def getChangelogEntries(self, buildID=None, taskID=None, filepath=None, author=N
             if not srpms:
                 return _applyQueryOpts([], queryOpts)
             srpm_info = srpms[0]
-            srpm_path = os.path.join(koji.pathinfo.build(build_info), koji.pathinfo.rpm(srpm_info))
+            srpm_path = joinpath(koji.pathinfo.build(build_info), koji.pathinfo.rpm(srpm_info))
         elif taskID:
             if not filepath:
                 raise koji.GenericError('filepath must be spcified with taskID')
             if filepath.startswith('/') or '../' in filepath:
                 raise koji.GenericError('invalid filepath: %s' % filepath)
-            srpm_path = os.path.join(koji.pathinfo.work(),
+            srpm_path = joinpath(koji.pathinfo.work(),
                                      koji.pathinfo.taskrelpath(taskID),
                                      filepath)
         else:
@@ -10015,7 +10016,7 @@ def getRPMDeps(self, rpmID, depType=None, queryOpts=None):
         if not rpm_info or not rpm_info['build_id']:
             return _applyQueryOpts([], queryOpts)
         build_info = get_build(rpm_info['build_id'])
-        rpm_path = os.path.join(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
+        rpm_path = joinpath(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
         if not os.path.exists(rpm_path):
             return _applyQueryOpts([], queryOpts)
 
@@ -10055,7 +10056,7 @@ def listRPMFiles(self, rpmID, queryOpts=None):
         if not rpm_info or not rpm_info['build_id']:
             return _applyQueryOpts([], queryOpts)
         build_info = get_build(rpm_info['build_id'])
-        rpm_path = os.path.join(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
+        rpm_path = joinpath(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
         if not os.path.exists(rpm_path):
             return _applyQueryOpts([], queryOpts)
 
@@ -10100,7 +10101,7 @@ def getRPMFile(self, rpmID, filename):
         if not rpm_info or not rpm_info['build_id']:
             return {}
         build_info = get_build(rpm_info['build_id'])
-        rpm_path = os.path.join(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
+        rpm_path = joinpath(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
         if not os.path.exists(rpm_path):
             return {}
 
@@ -10136,15 +10137,15 @@ def getRPMHeaders(self, rpmID=None, taskID=None, filepath=None, headers=None):
             if not rpm_info or not rpm_info['build_id']:
                 return {}
             build_info = get_build(rpm_info['build_id'])
-            rpm_path = os.path.join(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
+            rpm_path = joinpath(koji.pathinfo.build(build_info), koji.pathinfo.rpm(rpm_info))
             if not os.path.exists(rpm_path):
                 return {}
         elif taskID:
             if not filepath:
                 raise koji.GenericError('filepath must be specified with taskID')
             if filepath.startswith('/') or '../' in filepath:
                 raise koji.GenericError('invalid filepath: %s' % filepath)
-            rpm_path = os.path.join(koji.pathinfo.work(),
+            rpm_path = joinpath(koji.pathinfo.work(),
                                     koji.pathinfo.taskrelpath(taskID),
                                     filepath)
         else:
@@ -11891,24 +11892,24 @@ def moveMavenBuildToScratch(self, task_id, results, rpm_results):
         task.assertHost(host.id)
         scratchdir = koji.pathinfo.scratch()
         username = get_user(task.getOwner())['name']
-        destdir = os.path.join(scratchdir, username, 'task_%s' % task_id)
+        destdir = joinpath(scratchdir, username, 'task_%s' % task_id)
         for reldir, files in results['files'].items() + [('', results['logs'])]:
             for filename in files:
                 if reldir:
-                    relpath = os.path.join(reldir, filename)
+                    relpath = joinpath(reldir, filename)
                 else:
                     relpath = filename
-                src = os.path.join(koji.pathinfo.task(results['task_id']), relpath)
-                dest = os.path.join(destdir, relpath)
+                src = joinpath(koji.pathinfo.task(results['task_id']), relpath)
+                dest = joinpath(destdir, relpath)
                 koji.ensuredir(os.path.dirname(dest))
                 safer_move(src, dest)
                 os.symlink(dest, src)
         if rpm_results:
             for relpath in [rpm_results['srpm']] + rpm_results['rpms'] + \
                     rpm_results['logs']:
-                src = os.path.join(koji.pathinfo.task(rpm_results['task_id']),
+                src = joinpath(koji.pathinfo.task(rpm_results['task_id']),
                                    relpath)
-                dest = os.path.join(destdir, 'rpms', relpath)
+                dest = joinpath(destdir, 'rpms', relpath)
                 koji.ensuredir(os.path.dirname(dest))
                 safer_move(src, dest)
                 os.symlink(dest, src)
@@ -11923,19 +11924,19 @@ def moveWinBuildToScratch(self, task_id, results, rpm_results):
         task.assertHost(host.id)
         scratchdir = koji.pathinfo.scratch()
         username = get_user(task.getOwner())['name']
-        destdir = os.path.join(scratchdir, username, 'task_%s' % task_id)
+        destdir = joinpath(scratchdir, username, 'task_%s' % task_id)
         for relpath in results['output'].keys() + results['logs']:
-            filename = os.path.join(koji.pathinfo.task(results['task_id']), relpath)
-            dest = os.path.join(destdir, relpath)
+            filename = joinpath(koji.pathinfo.task(results['task_id']), relpath)
+            dest = joinpath(destdir, relpath)
             koji.ensuredir(os.path.dirname(dest))
             safer_move(filename, dest)
             os.symlink(dest, filename)
         if rpm_results:
             for relpath in [rpm_results['srpm']] + rpm_results['rpms'] + \
                     rpm_results['logs']:
-                filename = os.path.join(koji.pathinfo.task(rpm_results['task_id']),
+                filename = joinpath(koji.pathinfo.task(rpm_results['task_id']),
                                         relpath)
-                dest = os.path.join(destdir, 'rpms', relpath)
+                dest = joinpath(destdir, 'rpms', relpath)
                 koji.ensuredir(os.path.dirname(dest))
                 safer_move(filename, dest)
                 os.symlink(dest, filename)
@@ -11954,22 +11955,22 @@ def moveImageBuildToScratch(self, task_id, results):
             workdir = koji.pathinfo.task(sub_results['task_id'])
             scratchdir = koji.pathinfo.scratch()
             username = get_user(task.getOwner())['name']
-            destdir = os.path.join(scratchdir, username,
+            destdir = joinpath(scratchdir, username,
                 'task_%s' % sub_results['task_id'])
             for img in sub_results['files'] + sub_results['logs']:
-                src = os.path.join(workdir, img)
-                dest = os.path.join(destdir, img)
+                src = joinpath(workdir, img)
+                dest = joinpath(destdir, img)
                 koji.ensuredir(destdir)
                 logger.debug('renaming %s to %s' % (src, dest))
                 safer_move(src, dest)
                 os.symlink(dest, src)
             if 'rpmresults' in sub_results:
                 rpm_results = sub_results['rpmresults']
                 for relpath in [rpm_results['srpm']] + rpm_results['rpms'] + \
                         rpm_results['logs']:
-                    src = os.path.join(koji.pathinfo.task(
+                    src = joinpath(koji.pathinfo.task(
                         rpm_results['task_id']), relpath)
-                    dest = os.path.join(destdir, 'rpms', relpath)
+                    dest = joinpath(destdir, 'rpms', relpath)
                     koji.ensuredir(os.path.dirname(dest))
                     safer_move(src, dest)
                     os.symlink(dest, src)
@@ -12123,36 +12124,36 @@ def completeMavenBuild(self, task_id, build_id, maven_results, rpm_results):
                 # This directory has a .pom file, so get the Maven group_id,
                 # artifact_id, and version from it and associate those with
                 # the artifacts in this directory
-                pom_path = os.path.join(maven_task_dir, relpath, poms[0])
+                pom_path = joinpath(maven_task_dir, relpath, poms[0])
                 pom_info = koji.parse_pom(pom_path)
                 dir_maven_info = koji.pom_to_maven_info(pom_info)
             else:
                 raise koji.BuildError('multiple .pom files in %s: %s' % (relpath, ', '.join(poms)))
 
             for filename in files:
                 if os.path.splitext(filename)[1] in ('.md5', '.sha1'):
                     # metadata, we'll recreate that ourselves
                     continue
-                filepath = os.path.join(maven_task_dir, relpath, filename)
+                filepath = joinpath(maven_task_dir, relpath, filename)
                 if filename == 'maven-metadata.xml':
                     # We want the maven-metadata.xml to be present in the build dir
                     # so that it's a valid Maven repo, but we don't want to track it
                     # in the database because we regenerate it when creating tag repos.
                     # So we special-case it here.
-                    destdir = os.path.join(koji.pathinfo.mavenbuild(build_info),
+                    destdir = joinpath(koji.pathinfo.mavenbuild(build_info),
                                            relpath)
                     _import_archive_file(filepath, destdir)
                     _generate_maven_metadata(destdir)
                     continue
                 archivetype = get_archive_type(filename)
                 if not archivetype:
                     # Unknown archive type, fail the build
                     raise koji.BuildError('unsupported file type: %s' % filename)
                 import_archive(filepath, build_info, 'maven', dir_maven_info, maven_buildroot_id)
 
         # move the logs to their final destination
         for log_path in maven_results['logs']:
-            import_build_log(os.path.join(maven_task_dir, log_path),
+            import_build_log(joinpath(maven_task_dir, log_path),
                              build_info, subdir='maven')
 
         if rpm_results:
@@ -12285,17 +12286,17 @@ def completeWinBuild(self, task_id, build_id, results, rpm_results):
             if not archivetype:
                 # Unknown archive type, fail the build
                 raise koji.BuildError('unsupported file type: %s' % relpath)
-            filepath = os.path.join(task_dir, relpath)
+            filepath = joinpath(task_dir, relpath)
             metadata['relpath'] = os.path.dirname(relpath)
             import_archive(filepath, build_info, 'win', metadata, buildroot_id=results['buildroot_id'])
 
         # move the logs to their final destination
         for relpath in results['logs']:
             subdir = 'win'
             reldir = os.path.dirname(relpath)
             if reldir:
-                subdir = os.path.join(subdir, reldir)
-            import_build_log(os.path.join(task_dir, relpath),
+                subdir = joinpath(subdir, reldir)
+            import_build_log(joinpath(task_dir, relpath),
                              build_info, subdir=subdir)
 
         if rpm_results:
@@ -12798,7 +12799,7 @@ def distRepoMove(self, repo_id, uploadpath, arch):
                 binfo = get_build(rpminfo['build_id'])
                 builddir = koji.pathinfo.build(binfo)
                 build_dirs[rpminfo['build_id']] = builddir
-            rpminfo['_fullpath'] = os.path.join(builddir, relpath)
+            rpminfo['_fullpath'] = joinpath(builddir, relpath)
             rpmdata[bnp] = rpminfo
 
         # move the uploaded files
@@ -12815,9 +12816,9 @@ def distRepoMove(self, repo_id, uploadpath, arch):
             rpmpath = rpminfo['_fullpath']
             bnp = fn
             bnplet = bnp[0].lower()
-            ddir = os.path.join(archdir, 'Packages', bnplet)
+            ddir = joinpath(archdir, 'Packages', bnplet)
             koji.ensuredir(ddir)
-            l_dst = os.path.join(ddir, bnp)
+            l_dst = joinpath(ddir, bnp)
             if os.path.exists(l_dst):
                 raise koji.GenericError("File already in repo: %s", l_dst)
             logger.debug("os.link(%r, %r)", rpmpath, l_dst)
@@ -12863,21 +12864,21 @@ def get_upload_path(reldir, name, create=False, volume=None):
         host.verify()
         Task(task_id).assertHost(host.id)
         check_user = False
-    udir = os.path.join(koji.pathinfo.work(volume=volume), reldir)
+    udir = joinpath(koji.pathinfo.work(volume=volume), reldir)
     if create:
         koji.ensuredir(udir)
         if check_user:
             # assuming login was asserted earlier
-            u_fn = os.path.join(udir, '.user')
+            u_fn = joinpath(udir, '.user')
             if os.path.exists(u_fn):
                 user_id = int(open(u_fn, 'r').read())
                 if context.session.user_id != user_id:
                     raise koji.GenericError("Invalid upload directory, not owner: %s" % orig_reldir)
             else:
                 fo = open(u_fn, 'w')
                 fo.write(str(context.session.user_id))
                 fo.close()
-    return os.path.join(udir, name)
+    return joinpath(udir, name)
 
 def get_verify_class(verify):
     if verify == 'md5':
-- 
2.25.1

From c394bcd7e24856cd366537f93764a8592b234ba2 Mon Sep 17 00:00:00 2001
From: Mike McLean <mikem@redhat.com>
Date: Mon, 23 Sep 2019 21:03:06 -0400
Subject: [PATCH 4/5] hub plugins: use joinpath instead of os.path.join

---
 plugins/hub/rpm2maven.py | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/plugins/hub/rpm2maven.py b/plugins/hub/rpm2maven.py
index ad78b8fe..2f65996b 100644
--- a/plugins/hub/rpm2maven.py
+++ b/plugins/hub/rpm2maven.py
@@ -8,6 +8,7 @@
 import koji
 from koji.context import context
 from koji.plugin import callback
+from koji.util import joinpath
 from koji.util import rmtree
 import ConfigParser
 import fnmatch
@@ -40,7 +41,7 @@ def maven_import(cbtype, *args, **kws):
     else:
         return
 
-    tmpdir = os.path.join(koji.pathinfo.work(), 'rpm2maven', koji.buildLabel(buildinfo))
+    tmpdir = joinpath(koji.pathinfo.work(), 'rpm2maven', koji.buildLabel(buildinfo))
     try:
         if os.path.exists(tmpdir):
             rmtree(tmpdir)
@@ -85,10 +86,10 @@ def scan_and_import(buildinfo, rpminfo, tmpdir):
         if len(poms) != 1:
             continue
 
-        pom_info = koji.parse_pom(os.path.join(dirpath, poms[0]))
+        pom_info = koji.parse_pom(joinpath(dirpath, poms[0]))
         maven_info = koji.pom_to_maven_info(pom_info)
         maven_archives.append({'maven_info': maven_info,
-                               'files': [os.path.join(dirpath, f) for f in filenames]})
+                               'files': [joinpath(dirpath, f) for f in filenames]})
 
     if not maven_archives:
         return
-- 
2.25.1

From 67c55a57150565bef4c7face20e805174cc452e3 Mon Sep 17 00:00:00 2001
From: Mike McLean <mikem@redhat.com>
Date: Mon, 23 Sep 2019 22:29:05 -0400
Subject: [PATCH 5/5] whitespace: adjust indentations

---
 hub/kojihub.py | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/hub/kojihub.py b/hub/kojihub.py
index 15d4f5c0..70200729 100644
--- a/hub/kojihub.py
+++ b/hub/kojihub.py
@@ -2436,9 +2436,9 @@ def repo_init(tag, with_src=False, with_debuginfo=False, event=None):
                          'volume_name': archive['volume_name'],
                         }
             srcdir = joinpath(koji.pathinfo.mavenbuild(buildinfo),
-                                  koji.pathinfo.mavenrepo(archive))
+                              koji.pathinfo.mavenrepo(archive))
             destlink = joinpath(repodir, 'maven',
-                                    koji.pathinfo.mavenrepo(archive))
+                                koji.pathinfo.mavenrepo(archive))
             dir_links.add((srcdir, destlink))
             dest_parent = os.path.dirname(destlink)
             artifact_dirs.setdefault(dest_parent, set()).add((archive['group_id'],
@@ -4370,17 +4370,17 @@ def list_archive_files(archive_id, queryOpts=None, strict=False):
         maven_archive = get_maven_archive(archive_info['id'], strict=True)
         archive_info.update(maven_archive)
         file_path = joinpath(koji.pathinfo.mavenbuild(build_info),
-                                 koji.pathinfo.mavenfile(archive_info))
+                             koji.pathinfo.mavenfile(archive_info))
     elif win_info:
         win_archive = get_win_archive(archive_info['id'], strict=True)
         archive_info.update(win_archive)
         file_path = joinpath(koji.pathinfo.winbuild(build_info),
-                                 koji.pathinfo.winfile(archive_info))
+                             koji.pathinfo.winfile(archive_info))
     elif image_info:
         image_archive = get_image_archive(archive_info['id'], strict=True)
         archive_info.update(image_archive)
         file_path = joinpath(koji.pathinfo.imagebuild(build_info),
-                                 archive_info['filename'])
+                             archive_info['filename'])
     else:
         # TODO: support other build types
         if strict:
@@ -6374,7 +6374,7 @@ def import_archive_internal(filepath, buildinfo, type, typeInfo, buildroot_id=No
         if not metadata_only:
             # move the file to it's final destination
             mavendir = joinpath(koji.pathinfo.mavenbuild(buildinfo),
-                                    koji.pathinfo.mavenrepo(typeInfo))
+                                koji.pathinfo.mavenrepo(typeInfo))
             _import_archive_file(filepath, mavendir)
             _generate_maven_metadata(mavendir)
     elif type == 'win':
@@ -8585,10 +8585,10 @@ def importImageInternal(task_id, build_id, imgdata):
             # multiarch livemedia spins can have log name conflicts, so we
             # add the arch to the path
             logdir = joinpath(koji.pathinfo.build(build_info),
-                                  'data/logs/image', imgdata['arch'])
+                              'data/logs/image', imgdata['arch'])
         else:
             logdir = joinpath(koji.pathinfo.build(build_info),
-                                  'data/logs/image')
+                              'data/logs/image')
         koji.ensuredir(logdir)
         final_path = joinpath(logdir, os.path.basename(logfile))
         if os.path.exists(final_path):
@@ -9568,8 +9568,8 @@ def getChangelogEntries(self, buildID=None, taskID=None, filepath=None, author=N
             if filepath.startswith('/') or '../' in filepath:
                 raise koji.GenericError('invalid filepath: %s' % filepath)
             srpm_path = joinpath(koji.pathinfo.work(),
-                                     koji.pathinfo.taskrelpath(taskID),
-                                     filepath)
+                                 koji.pathinfo.taskrelpath(taskID),
+                                 filepath)
         else:
             raise koji.GenericError('either buildID or taskID and filepath must be specified')
 
@@ -10146,8 +10146,8 @@ def getRPMHeaders(self, rpmID=None, taskID=None, filepath=None, headers=None):
             if filepath.startswith('/') or '../' in filepath:
                 raise koji.GenericError('invalid filepath: %s' % filepath)
             rpm_path = joinpath(koji.pathinfo.work(),
-                                    koji.pathinfo.taskrelpath(taskID),
-                                    filepath)
+                                koji.pathinfo.taskrelpath(taskID),
+                                filepath)
         else:
             raise koji.GenericError('either rpmID or taskID and filepath must be specified')
 
@@ -11908,7 +11908,7 @@ def moveMavenBuildToScratch(self, task_id, results, rpm_results):
             for relpath in [rpm_results['srpm']] + rpm_results['rpms'] + \
                     rpm_results['logs']:
                 src = joinpath(koji.pathinfo.task(rpm_results['task_id']),
-                                   relpath)
+                               relpath)
                 dest = joinpath(destdir, 'rpms', relpath)
                 koji.ensuredir(os.path.dirname(dest))
                 safer_move(src, dest)
@@ -11935,7 +11935,7 @@ def moveWinBuildToScratch(self, task_id, results, rpm_results):
             for relpath in [rpm_results['srpm']] + rpm_results['rpms'] + \
                     rpm_results['logs']:
                 filename = joinpath(koji.pathinfo.task(rpm_results['task_id']),
-                                        relpath)
+                                    relpath)
                 dest = joinpath(destdir, 'rpms', relpath)
                 koji.ensuredir(os.path.dirname(dest))
                 safer_move(filename, dest)
@@ -12141,7 +12141,7 @@ def completeMavenBuild(self, task_id, build_id, maven_results, rpm_results):
                     # in the database because we regenerate it when creating tag repos.
                     # So we special-case it here.
                     destdir = joinpath(koji.pathinfo.mavenbuild(build_info),
-                                           relpath)
+                                       relpath)
                     _import_archive_file(filepath, destdir)
                     _generate_maven_metadata(destdir)
                     continue
-- 
2.25.1

