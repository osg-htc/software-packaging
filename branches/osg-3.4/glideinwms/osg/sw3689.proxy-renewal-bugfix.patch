diff --git a/frontend/gwms_renew_proxies.py b/frontend/gwms_renew_proxies.py
index 8e881b8c..47167eba 100755
--- a/frontend/gwms_renew_proxies.py
+++ b/frontend/gwms_renew_proxies.py
@@ -116,15 +116,52 @@ def _run_command(command):
     return stdout, stderr, proc.returncode
 
 
-def voms_proxy_init(proxy, *args):
-    """Create a proxy using voms-proxy-init. Without any additional args, it generates a proxy without VOMS attributes.
+def parse_vomses(vomses_contents):
+    """Parse the contents of a vomses file with the the following format per line:
+
+    "<VO ALIAS> " "<VOMS ADMIN HOSTNAME>" "<VOMS ADMIN PORT>" "<VOMS CERT DN>" "<VO NAME>"
+
+    And return two mappings:
+
+    1. Case insensitive VO name to their canonical versions
+    2. VO certificate DN to URI, i.e. HOSTNAME:PORT
+    """
+    vo_info = re.findall(r'"[\w\.]+"\s+"([^"]+)"\s+"(\d+)"\s+"([^"]+)"\s+"([\w\.]+)"', vomses_contents, re.IGNORECASE)
+    # VO names are case-sensitive but we don't expect users to get the case right in proxies.ini
+    vo_names = dict([(vo[3].lower(), vo[3]) for vo in vo_info])
+    # A mapping between VO certificate subject DNs and VOMS URI of the form "<HOSTNAME>:<PORT>"
+    # We had to separate this out from the VO name because a VO could have multiple vomses entries
+    vo_uris = dict([(vo[2], vo[0] + ':' + vo[1]) for vo in vo_info])
+    return vo_names, vo_uris
+
+
+def voms_proxy_init(proxy, voms_attr=None):
+    """Create a proxy using voms-proxy-init, using the proxy information and optionally VOMS attribute.
     Returns stdout, stderr, and return code of voms-proxy-init
     """
-    cmd = ['voms-proxy-init', '--debug',
+    cmd = ['voms-proxy-init',
+           '-debug',
+           '-old',
            '-cert', proxy.cert,
            '-key', proxy.key,
            '-out', proxy.tmp_output_fd.name,
-           '-valid', '%s:00' % proxy.lifetime] + list(args)
+           '-valid', '%s:00' % proxy.lifetime]
+
+    if voms_attr:
+        # Some VOMS servers don't support capability/role/group selection so we just use the VO name when making
+        # the request. We don't handle this in the VO class because voms-proxy-fake requires the full VO name
+        # and command string.
+        if voms_attr.voms.endswith('/Role=NULL/Capability=NULL'):
+            voms = voms_attr.name
+        else:
+            voms = voms_attr.voms
+            # We specify '-order' because some European CEs care about VOMS AC order
+            # The '-order' option chokes if a Capability is specified but we want to make sure we request it
+            # in '-voms' because we're not sure if anything is looking for it
+        fqan = re.sub(r'\/Capability=\w+$', '', voms_attr.fqan)
+        cmd += ['-voms', voms,
+                '-order', fqan]
+
     return _run_command(cmd)
 
 
@@ -167,14 +204,7 @@ def main():
     # Load VOMS Admin server info for case-sensitive VO name and for faking the VOMS Admin server URI
     vomses = os.getenv('VOMS_USERCONF', '/etc/vomses')
     with open(vomses, 'r') as _:
-        # "<VO ALIAS> " "<VOMS ADMIN HOSTNAME>" "<VOMS ADMIN PORT>" "<VOMS CERT DN>" "<VO NAME>"
-        # "osg" "voms.grid.iu.edu" "15027" "/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=voms.grid.iu.edu" "osg"
-        vo_info = re.findall(r'"\w+"\s+"([^"]+)"\s+"(\d+)"\s+"([^"]+)"\s+"(\w+)"', _.read(), re.IGNORECASE)
-        # VO names are case-sensitive but we don't expect users to get the case right in the proxies.ini
-        vo_name_map = dict([(vo[3].lower(), vo[3]) for vo in vo_info])
-        # A mapping between VO certificate subject DNs and VOMS URI of the form "<HOSTNAME>:<PORT>"
-        # We had to separate this out from the VO name because a VO could have multiple vomses entries
-        vo_uri_map = dict([(vo[2], vo[0] + ':' + vo[1]) for vo in vo_info])
+        vo_name_map, vo_uri_map = parse_vomses(_.read())
 
     retcode = 0
     # Proxy renewals
@@ -207,11 +237,7 @@ def main():
             vo_attr = VO(vo_name_map[proxy_config['vo'].lower()], proxy_config['fqan'])
 
             if safe_boolcomp(proxy_config['use_voms_server'], True):
-                # we specify '-order' because some European CEs care about VOMS AC order
-                # The '-order' option chokes if a Capability is specified but we want to make sure we request it
-                # in '-voms' because we're not sure if anything is looking for it
-                fqan = re.sub(r'\/Capability=\w+$', '', vo_attr.fqan)
-                stdout, stderr, client_rc = voms_proxy_init(proxy, '-voms', vo_attr.voms, '-order', fqan)
+                stdout, stderr, client_rc = voms_proxy_init(proxy, vo_attr)
             else:
                 vo_attr.cert = proxy_config['vo_cert']
                 vo_attr.key = proxy_config['vo_key']
diff --git a/unittests/test_renew_proxy.py b/unittests/test_renew_proxy.py
index 101b474a..1994cf16 100755
--- a/unittests/test_renew_proxy.py
+++ b/unittests/test_renew_proxy.py
@@ -1,33 +1,93 @@
 #!/usr/bin/env python
 
-import re
+import mock
 import unittest2 as unittest
 import xmlrunner
 
 from glideinwms.frontend import gwms_renew_proxies as proxy
 
+VOMSES = '''
+"GLOW" "glow-voms.cs.wisc.edu" "15001" "/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=glow-voms.cs.wisc.edu" "GLOW"
+"osg" "voms.grid.iu.edu" "15027" "/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=voms.grid.iu.edu" "osg"
+"osg" "voms1.opensciencegrid.org" "15027" "/DC=org/DC=incommon/C=US/ST=WI/L=Madison/O=University of Wisconsin-Madison/OU=OCIS/CN=voms1.opensciencegrid.org" "osg"
+"xenon.biggrid.nl" "voms.grid.sara.nl" "30008" "/O=dutchgrid/O=hosts/OU=sara.nl/CN=voms.grid.sara.nl" "xenon.biggrid.nl"
+'''
+
+
+# FIXME: Refactor _run_command to accept **kwargs instead
+def get_opt_val(cmd, opt_name):
+    """Given a command as a list, return the value of opt_name.
+    """
+    return cmd[cmd.index(opt_name)+1]
+
+
+class TestUtils(unittest.TestCase):
+    """Test utility functions in gwms_renew_proxies
+    """
+
+    def test_parse_vomses(self):
+        name_map, uri_map = proxy.parse_vomses(VOMSES)
+        for nocap, canonical in [('osg', 'osg'), ('glow', 'GLOW'), ('xenon.biggrid.nl', 'xenon.biggrid.nl')]:
+            self.assertEqual(name_map[nocap], canonical)
+        for dn, uri in [('/O=dutchgrid/O=hosts/OU=sara.nl/CN=voms.grid.sara.nl',
+                         'voms.grid.sara.nl:30008'),
+                        ('/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=voms.grid.iu.edu',
+                         'voms.grid.iu.edu:15027'),
+                        ('/DC=org/DC=incommon/C=US/ST=WI/L=Madison/O=University of Wisconsin-Madison/OU=OCIS/CN=voms1.opensciencegrid.org',
+                         'voms1.opensciencegrid.org:15027'),
+                        ('/DC=org/DC=opensciencegrid/O=Open Science Grid/OU=Services/CN=glow-voms.cs.wisc.edu',
+                         'glow-voms.cs.wisc.edu:15001')]:
+            self.assertEqual(uri_map[dn], uri)
+
+    @mock.patch('frontend.gwms_renew_proxies._run_command')
+    def test_voms_proxy_init(self, mock_run_command):
+        mock_proxy = mock.MagicMock()
+        proxy.voms_proxy_init(mock_proxy)
+        mock_run_command.assert_called_once()
+        for option in ('-voms', '-order'):
+            self.assertNotIn(option, mock_run_command.call_args[0][0])
+
+    @mock.patch('frontend.gwms_renew_proxies._run_command')
+    def test_voms_proxy_init_with_voms(self, mock_run_command):
+        mock_proxy = mock.MagicMock()
+        mock_voms_attr = mock.Mock()
+        mock_voms_attr.name = 'VoName'
+
+        for role, expected_val in [('NULL', 'name'), ('pilot', 'voms')]:
+            mock_voms_attr.fqan = '/Role={0}/Capability=NULL'.format(role)
+            mock_voms_attr.voms = '/{0}{1}'.format(mock_voms_attr.name, mock_voms_attr.fqan)
+            proxy.voms_proxy_init(mock_proxy, mock_voms_attr)
+
+            command = mock_run_command.call_args[0][0]
+            voms_opt = '-voms'
+            order_opt = '-order'
+            self.assertIn(voms_opt, command)
+            self.assertEqual(get_opt_val(command, voms_opt), getattr(mock_voms_attr, expected_val))
+            self.assertIn(order_opt, command)
+            self.assertFalse('/Capability=' in get_opt_val(command, order_opt))
 
 class TestVo(unittest.TestCase):
+    """Test the VOMS attributes class
+    """
+
+    def setUp(self):
+        self.vo_name = 'glideinwms'
+        self.cmd = '/Role=NULL/Capability=NULL'
 
     def assertVomsAttr(self, vo, vo_name, cmd):
         self.assertEqual(vo.fqan, '/%s%s' % (vo_name, cmd))
         self.assertEqual(vo.voms, '%s:/%s%s' % (vo_name, vo_name, cmd))
 
     def test_fqan_vo_prefix(self):
-        vo_name = 'glideinwms'
-        cmd = '/Role=NULL/Capability=NULL'
-        vo = proxy.VO(vo_name, '/%s%s' % (vo_name, cmd))
-        self.assertVomsAttr(vo, vo_name, cmd)
+        vo = proxy.VO(self.vo_name, '/%s%s' % (self.vo_name, self.cmd))
+        self.assertVomsAttr(vo, self.vo_name, self.cmd)
 
     def test_fqan_without_vo_prefix(self):
-        vo_name = 'glideinwms'
-        cmd = '/Role=NULL/Capability=NULL'
-        vo = proxy.VO(vo_name, cmd)
-        self.assertVomsAttr(vo, vo_name, cmd)
+        vo = proxy.VO(self.vo_name, self.cmd)
+        self.assertVomsAttr(vo, self.vo_name, self.cmd)
 
     def test_fqan_malformed(self):
-        vo_name = 'glideinwms'
-        self.assertRaises(ValueError, proxy.VO, vo_name, vo_name)
+        self.assertRaises(ValueError, proxy.VO, self.vo_name, self.vo_name)
 
 
 if __name__ == '__main__':
