diff --git a/src/condor_utils/LoadPlugins.cpp b/src/condor_utils/LoadPlugins.cpp
index 6310bc9c6b0cb0404c2c7f3265ba562105059708..b76121a44d9d7e94a309069546452063492036b7 100644
--- a/src/condor_utils/LoadPlugins.cpp
+++ b/src/condor_utils/LoadPlugins.cpp
@@ -124,7 +124,7 @@ LoadPlugins()
 #ifdef WIN32
         if( NULL == LoadLibrary(plugin_file) ) {
 #else
-		if (!dlopen(plugin_file, RTLD_NOW)) {
+		if (!dlopen(plugin_file, RTLD_NOW | RTLD_GLOBAL)) {
 #endif
 			error = getErrorString();
 			if (error) {
diff --git a/src/condor_collector.V6/collector.cpp b/src/condor_collector.V6/collector.cpp
index 596dffb1afe2ec2ac2d732679871e0ff5b966d30..fb4cfab290b8b474fe072ebf61d95cc3d15e6b36 100644
--- a/src/condor_collector.V6/collector.cpp
+++ b/src/condor_collector.V6/collector.cpp
@@ -46,7 +46,7 @@
 
 #include "collector.h"
 
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 #include "CollectorPlugin.h"
 #endif
 
@@ -723,7 +723,7 @@ int CollectorDaemon::receive_invalidation(Service* /*s*/,
     /* let the off-line plug-in invalidate the given ad */
     offline_plugin_.invalidate ( command, cad );
 
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 	CollectorPluginManager::Invalidate(command, cad);
 #endif
 
@@ -787,7 +787,7 @@ int CollectorDaemon::receive_update(Service* /*s*/, int command, Stream* sock)
 	/* let the off-line plug-in have at it */
 	offline_plugin_.update ( command, *cad );
 
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 	CollectorPluginManager::Update(command, *cad);
 #endif
 
@@ -918,7 +918,7 @@ int CollectorDaemon::receive_update_expect_ack( Service* /*s*/,
 	if(cad)
     offline_plugin_.update ( command, *cad );
 
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
     CollectorPluginManager::Update ( command, *cad );
 #endif
 
diff --git a/src/condor_collector.V6/collector_main.cpp b/src/condor_collector.V6/collector_main.cpp
index d708dafbe38540919ded3edff28cb77cea0a6052..eb6819a680f2add26a0da4cbbbad88fd8b22a622 100644
--- a/src/condor_collector.V6/collector_main.cpp
+++ b/src/condor_collector.V6/collector_main.cpp
@@ -22,7 +22,7 @@
 #include "view_server.h"
 #include "subsystem_info.h"
 
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 #include "CollectorPlugin.h"
 #endif
 
@@ -52,7 +52,7 @@ void main_init(int argc, char *argv[])
 	Daemon=new ViewServer();
 	Daemon->Init();
 
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 	CollectorPluginManager::Load();
 
 	CollectorPluginManager::Initialize();
@@ -71,7 +71,7 @@ void main_config()
 void main_shutdown_fast()
 {
 	Daemon->Exit();
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 	CollectorPluginManager::Shutdown();
 #endif
 	DC_Exit(0);
@@ -82,7 +82,7 @@ void main_shutdown_fast()
 void main_shutdown_graceful()
 {
 	Daemon->Shutdown();
-#if defined(HAVE_DLOPEN)
+#if defined(HAVE_DLOPEN) && !defined(DARWIN)
 	CollectorPluginManager::Shutdown();
 #endif
 	DC_Exit(0);
diff --git a/src/condor_collector.V6/CollectorPlugin.h b/src/condor_collector.V6/CollectorPlugin.h
index f5e858cd177cde33a2c6958c53dfd8647d8a12d4..d249f3fc0e8c7b5261524ceeaa3a6c38485cd767 100644
--- a/src/condor_collector.V6/CollectorPlugin.h
+++ b/src/condor_collector.V6/CollectorPlugin.h
@@ -51,13 +51,9 @@ class CollectorPlugin
      * statically initialized instance of itself, so that it will be
      * registered when its object file is loaded
      */
-    CollectorPlugin()
-    {
-        bool rc = PluginManager<CollectorPlugin>::registerPlugin(this);
-        dprintf(D_ALWAYS, "Plugin registration %s\n", rc ? "succeeded" : "failed");
-    };
+    CollectorPlugin();
 
-	virtual ~CollectorPlugin() {};
+	virtual ~CollectorPlugin();
 
 	virtual void initialize() = 0;
 
diff --git a/src/condor_collector.V6/CollectorPluginManager.cpp b/src/condor_collector.V6/CollectorPluginManager.cpp
index 569354659e12c46be18f54f5c011179d51f07f5f..360910a77438b7c42d4ea18dfe8db35783e7f6e0 100644
--- a/src/condor_collector.V6/CollectorPluginManager.cpp
+++ b/src/condor_collector.V6/CollectorPluginManager.cpp
@@ -71,3 +71,13 @@ CollectorPluginManager::Invalidate(int command, const ClassAd &ad)
 	}
 }
 
+CollectorPlugin::CollectorPlugin()
+{
+    if (PluginManager<CollectorPlugin>::registerPlugin(this)) {
+		dprintf(D_ALWAYS, "Plugin registration succeeded\n");
+	} else {
+		dprintf(D_ALWAYS, "Plugin registration failed\n");
+	}
+}
+
+CollectorPlugin::~CollectorPlugin() { }
diff --git a/src/python-bindings/CMakeLists.txt b/src/python-bindings/CMakeLists.txt
index dc0b643ab9feb2692fc9a0b610a7ed19757f9731..8eea1fbd61855de9ef77bd1613114ae89618b22f 100644
--- a/src/python-bindings/CMakeLists.txt
+++ b/src/python-bindings/CMakeLists.txt
@@ -148,14 +148,16 @@ else()
     endif()
     install ( TARGETS classad_python_user DESTINATION "${C_LIBEXEC}" )
 
-    # This is to be used as a collector plugin module which invoke python functions.
-    add_library( collector_python_plugin SHARED collector_plugin.cpp )
-    target_link_libraries( collector_python_plugin condor_utils pyclassad )
-    set_target_properties( collector_python_plugin PROPERTIES SUFFIX ".so" )
-    if ( NOT CMAKE_SKIP_RPATH )
-      set_target_properties( collector_python_plugin PROPERTIES INSTALL_RPATH "${CONDOR_RPATH}")
+    if ( LINUX )
+      # This is to be used as a collector plugin module which invoke python functions.
+      add_library( collector_python_plugin SHARED collector_plugin.cpp )
+      target_link_libraries( collector_python_plugin condor_utils pyclassad )
+      set_target_properties( collector_python_plugin PROPERTIES SUFFIX ".so" )
+      if ( NOT CMAKE_SKIP_RPATH )
+        set_target_properties( collector_python_plugin PROPERTIES INSTALL_RPATH "${CONDOR_RPATH}")
+      endif()
+      install ( TARGETS collector_python_plugin DESTINATION "${C_LIBEXEC}" )
     endif()
-    install ( TARGETS collector_python_plugin DESTINATION "${C_LIBEXEC}" )
 
 
     set_source_files_properties(config.cpp collector.cpp negotiator.cpp secman.cpp dc_tool.cpp schedd.cpp classad.cpp classad_module.cpp classad_parsers.cpp event.cpp log_reader.cpp claim.cpp startd.cpp bulk_query_iterator.cpp PROPERTIES COMPILE_FLAGS "-Wno-strict-aliasing -Wno-cast-qual -Wno-deprecated -Wno-write-strings")
