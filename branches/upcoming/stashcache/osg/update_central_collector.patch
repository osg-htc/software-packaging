--- a/bin/StashDaemon/stashcache
+++ b/bin/StashDaemon/stashcache
@@ -11,6 +11,7 @@ import signal
 import Queue
 import threading
 import time
+import traceback
 import htcondor
 import xrootd_cache_stats
 
@@ -41,20 +42,20 @@ class HeartBeatThread(threading.Thread):
             try:
                 central_coll_url = htcondor.param['OSG_COLLECTOR_HOST']
             except KeyError:
-                central_coll_url = 'collector.opensciencegrid.org'
+                central_coll_url = 'collector.opensciencegrid.org:9619'
             central_coll = htcondor.Collector(central_coll_url)
 
-            local_master = None
-            while not local_master:
-                try:
-                    local_master = local_coll.locate(htcondor.DaemonTypes.Master)
-                except ValueError: # Master has not advertised to the collector yet
-                    pass
-                except IOError: # Failed communication with collector
-                    raise CondorException('Could not locate Collector at %s' % self.url)
-
             xrootd_addr = 'root://' + self.url
             while True:
+                local_master = None
+                while not local_master:
+                    try:
+                        local_master = local_coll.locate(htcondor.DaemonTypes.Master)
+                    except ValueError: # Master has not advertised to the collector yet
+                        pass
+                    except IOError: # Failed communication with collector
+                        raise CondorException('Could not locate Collector at %s' % self.url)
+
                 cache_ad = xrootd_cache_stats.collect_cache_stats(xrootd_addr, '/stash')
                 if cache_ad['ping_response_status'] == 'ok':
                     try:
@@ -64,25 +65,33 @@ class HeartBeatThread(threading.Thread):
                                               % self.url)
                     # ads need to be updated every 15 min while heartbeats should be done every 30 min
                     for _ in range(2):
-                        for collector in [local_coll, central_coll]:
-                            try:
-                                collector.advertise([cache_ad])
-                            except ValueError:
-                                pass 
+                        try:
+                            local_coll.advertise([cache_ad])
+                            # The central collector has more stringent security reqs (SOFTWARE-1804)
+                            for command, ad in {'UPDATE_MASTER_AD':[local_master],
+                                                'UPDATE_STARTD_AD':[cache_ad]}.iteritems():
+                                central_coll.advertise(ad, command)
+                        except ValueError:
+                            pass
                         time.sleep(900)
                 else:
                     raise XrootdException('No heartbeat from xrootd server')
-        except Exception, error:
+        except Exception:
             # Exceptions don't rise to the main thread so we have to pass them via queue and SIGALARM
+            error = sys.exc_info()
             self.exceptions.put(error)
             signal.alarm(1)
             sys.exit(1)
 
 def raise_heartbeat_exception(signum, frame):
     '''Raise exception from heartbeat thread'''
-    error = _exception_queue.get()
+    exc_type, exc_value, exc_tb = _exception_queue.get()
     kill_xrootd()
-    raise error
+    if exc_type in [XrootdException, CondorException, RuntimeError]:
+        print exc_value
+    else:
+        traceback.print_exception(exc_type, exc_value, exc_tb)
+    sys.exit(1)
 
 def manage_xrootd(signum, frame):
     '''Signal handler for the XRootD service'''
@@ -135,9 +144,5 @@ def main():
         signal.pause()
 
 if __name__ == '__main__':
-    try:
-        main()
-    except (XrootdException, CondorException, RuntimeError), e:
-        print e
-        sys.exit(1)
+    main()
 

