From cb76f1ec1b529c50dccc2d62c04205a13f877c5a Mon Sep 17 00:00:00 2001
From: Matyas Selmeci <matyas@cs.wisc.edu>
Date: Fri, 11 Mar 2016 10:22:54 -0600
Subject: [PATCH] DEBUG: Additional logging in UpdatingKeyManager

---
 .../security/trustmanager/UpdatingKeyManager.java     | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/src/org/glite/security/trustmanager/UpdatingKeyManager.java b/src/org/glite/security/trustmanager/UpdatingKeyManager.java
index 1c2ece8..4cbd581 100644
--- a/src/org/glite/security/trustmanager/UpdatingKeyManager.java
+++ b/src/org/glite/security/trustmanager/UpdatingKeyManager.java
@@ -149,10 +149,11 @@ public class UpdatingKeyManager extends X509ExtendedKeyManager {
      * @throws NoSuchAlgorithmException thrown in case the RSA algorithm or the cert algoritmh is not supported.
      * @throws CertificateException in case the certificate loading fails.
      */
     public UpdatingKeyManager(CaseInsensitiveProperties config, PasswordFinder finder) throws NoSuchAlgorithmException,
             CertificateException {
+        LOGGER.debug("In UpdatingKeyManager(config, finder)");
         identityCertFile = config.getProperty(ContextWrapper.CREDENTIALS_CERT_FILE);
         identityKeyFile = config.getProperty(ContextWrapper.CREDENTIALS_KEY_FILE);
         identityKeyPasswd = config.getProperty(ContextWrapper.CREDENTIALS_KEY_PASSWD);
 
         identityStoreFile = config.getProperty(ContextWrapper.CREDENTIALS_STORE_FILE);
@@ -161,30 +162,48 @@ public class UpdatingKeyManager extends X509ExtendedKeyManager {
         identityStorePasswd = config.getProperty(ContextWrapper.CREDENTIALS_STORE_PASSWD);
 
         proxyFile = config.getProperty(ContextWrapper.CREDENTIALS_PROXY_FILE);
         proxyIntervalBlob = config.getProperty(ContextWrapper.CREDENTIALS_UPDATE_INTERVAL);
 
+        LOGGER.debug("UpdatingKeyManager(config, finder) got properties:");
+        LOGGER.debug("identityCertFile   : " +    identityCertFile   );
+        LOGGER.debug("identityKeyFile    : " +    identityKeyFile    );
+        LOGGER.debug("identityKeyPasswd  : " +    identityKeyPasswd  );
+        LOGGER.debug("identityStoreFile  : " +    identityStoreFile  );
+        LOGGER.debug("identityStoreType  : " +    identityStoreType  );
+        LOGGER.debug("identityStorePasswd: " +    identityStorePasswd);
+        LOGGER.debug("proxyFile          : " +    proxyFile          );
+        //LOGGER.debug("proxyIntervalBlob  : " +    proxyIntervalBlob  );
+
+
         // Create the key manager factory to extract the server key
         try {
             keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
         } catch (NoSuchAlgorithmException e) {
             LOGGER.fatal("Internal: X509 key manager initialization failed: " + e.getMessage());
             throw e;
         }
 
+        LOGGER.debug("passwordFinder = finder;");
         passwordFinder = finder;
 
         try {
+            LOGGER.debug("loadKeystore();");
             loadKeystore();
         } catch (CertificateException e) {
             LOGGER.fatal("credentials loading failed: " + e.getMessage());
             throw e;
         }
 
+        LOGGER.debug("if (proxyIntervalBlob != null) {");
         if (proxyIntervalBlob != null) {
+            LOGGER.debug("intervalSecs = ContextWrapper.getIntervalSecs(proxyIntervalBlob);");
             intervalSecs = ContextWrapper.getIntervalSecs(proxyIntervalBlob);
+            LOGGER.debug("intervalSecs: " + intervalSecs);
+            LOGGER.debug("startUpdateLoop();");
             startUpdateLoop();
+            LOGGER.debug("after startUpdateLoop();");
         }
     }
 
     /**
      * Creates a new UpdatingKeyManager object.
-- 
2.6.3

