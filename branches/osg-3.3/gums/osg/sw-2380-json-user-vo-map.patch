diff --git a/gums-core/src/main/java/gov/bnl/gums/CoreLogic.java b/gums-core/src/main/java/gov/bnl/gums/CoreLogic.java
index 95e4003..f80f5c1 100644
--- a/gums-core/src/main/java/gov/bnl/gums/CoreLogic.java
+++ b/gums-core/src/main/java/gov/bnl/gums/CoreLogic.java
@@ -44,6 +44,57 @@ public class CoreLogic {
      * @param hostname
      * @return
      */
+    public Map getOsgVoUserMap(String hostname) throws Exception {
+        Configuration conf = gums.getConfiguration();
+        Map<String, Set<String> > osgMap = new TreeMap<String, Set<String> >();
+        HostToGroupMapping host2GroupMapper = hostToGroupMapping(conf, hostname);
+
+        if (host2GroupMapper == null) {
+            String message = "Cannot generate osg VO user map for host '" + hostname + "' - it is not defined in any host to group mapping.";
+            gumsAdminLog.warn(message);
+            throw new RuntimeException(message);
+        }
+
+        List<String> groupToAccountMappings = host2GroupMapper.getGroupToAccountMappings();
+
+        // Loop through group to account mappings
+        for (String mappingName : groupToAccountMappings) {
+            GroupToAccountMapping gMap = (GroupToAccountMapping) conf.getGroupToAccountMapping( mappingName );
+            String voName = gMap.getAccountingVo();
+            String voSubgroup = gMap.getAccountingVoSubgroup();
+            if (voSubgroup.equals("") || voName.equals(""))
+                continue;
+            List<String> userGroups = gMap.getUserGroups();
+            List<String> accountMappers = gMap.getAccountMappers();
+            Set<String> userNames = osgMap.get(voSubgroup);
+            if (userNames == null) {
+                userNames = new TreeSet<String>();
+                osgMap.put(voSubgroup, userNames);
+            }
+            for (String groupName : userGroups) {
+                UserGroup userGroup = (UserGroup) conf.getUserGroup( groupName );
+                List<GridUser> members = userGroup.getMemberList();
+                members = new ArrayList<GridUser>(members);
+                for (GridUser user : members) {
+                    if (gums.isUserBanned(user))
+                        continue;
+                    for (String mapperName : accountMappers) {
+                        AccountMapper accountMapper = (AccountMapper) conf.getAccountMapper( mapperName );
+                        AccountInfo account = accountMapper.mapUser(user, false);
+                        if (account != null && account.getUser() != null)
+                            userNames.add(account.getUser());
+                    }
+                }
+            }
+        }
+
+        return osgMap;
+    }
+
+    /**
+     * @param hostname
+     * @return
+     */
     public String generateOsgUserVoMap(String hostname) throws Exception {
         Configuration conf = gums.getConfiguration();
         StringBuffer osgMapBuffer = new StringBuffer("");
diff --git a/gums-core/src/main/java/gov/bnl/gums/admin/GUMSAPIImpl.java b/gums-core/src/main/java/gov/bnl/gums/admin/GUMSAPIImpl.java
index 46f47f6..59adf3b 100644
--- a/gums-core/src/main/java/gov/bnl/gums/admin/GUMSAPIImpl.java
+++ b/gums-core/src/main/java/gov/bnl/gums/admin/GUMSAPIImpl.java
@@ -231,6 +231,27 @@ public class GUMSAPIImpl implements GUMSAPI {
 		}
 	}
 
+	public Map getOsgVoUserMap(String hostname) {
+		try {
+			if (hasReadAllAccess(currentUser(), hostname)) {
+				Map map = gums().getCoreLogic().getOsgVoUserMap(hostname);
+				if (gumsAdminLog.isDebugEnabled())
+					gumsAdminLog.debug(logUserAccess() + "Generated osg vo-user map object for host '" + hostname + "': " + map);
+				else
+					gumsAdminLog.info(logUserAccess() + "Generated osg vo-user map object for host '" + hostname + "'");
+				return map;
+			} else {
+				String message = logUserAccess() + "Unauthorized access to getOsgVoUserMap for host '"+hostname+"'";
+				gumsAdminLog.warn(message);
+				siteAdminLog.warn(message);
+				throw new AuthorizationDeniedException();
+			}
+		} catch (Exception e) {
+			log.error("Unhandled exception.", e);
+			throw new RuntimeException(e.getMessage(), e);
+		}
+	}
+
 	public String generateOsgUserVoMap(String hostname) {
 		try {
 			if (hasReadAllAccess(currentUser(), hostname)) {
diff --git a/gums-service/src/main/java/org/opensciencegrid/gums/service/JSONMapper.java b/gums-service/src/main/java/org/opensciencegrid/gums/service/JSONMapper.java
index 216d98e..c4e1c1c 100644
--- a/gums-service/src/main/java/org/opensciencegrid/gums/service/JSONMapper.java
+++ b/gums-service/src/main/java/org/opensciencegrid/gums/service/JSONMapper.java
@@ -4,6 +4,7 @@ import java.io.IOException;
 import java.io.Writer;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
@@ -62,6 +63,14 @@ public class JSONMapper extends HttpServlet {
         {
             errorResponse(response, response.SC_NOT_FOUND, "REST API not specified; known JSON APIs are /gums/json/mapGridIdentity, /gums/json/manualMapper, /gums/json/userGroup, /gums/json/poolMapper, and /gums/json/version");
         }
+        else if (path_info.equals("/getOsgVoUserMap"))
+        {
+            doGetOsgUserVoMap(request, response);
+        }
+        else if (path_info.equals("/generateOsgUserVoMap"))
+        {
+            doGenerateOsgUserVoMap(request, response);
+        }
         else if (path_info.equals("/mapGridIdentity"))
         {
             doMap(request, response);
@@ -105,6 +114,86 @@ public class JSONMapper extends HttpServlet {
     }
 
 
+    private void doGetOsgUserVoMap(HttpServletRequest request,
+                          HttpServletResponse response)
+        throws ServletException, IOException
+    {
+        String hostname = request.getParameter("hostname");
+        if (hostname == null)
+        {
+            errorResponse(response, response.SC_BAD_REQUEST, "Missing required input parameter 'hostname'");
+            return;
+        }
+
+        Map<String, Set<String> > map = null;
+        try
+        {
+            map = gums.getOsgVoUserMap(hostname);
+        }
+        catch (Exception e)
+        {
+            errorResponse(response, response.SC_INTERNAL_SERVER_ERROR, "Error getting osg VO user map: " + e.getMessage());
+        }
+
+        Writer out = response.getWriter();
+        // see: http://docs.oracle.com/javaee/7/api/javax/json/stream/JsonGenerator.html
+        JsonGenerator gen = Json.createGenerator(out);
+        gen.writeStartObject()
+            .write("result", (map != null) ? "OK" : "FAILED");
+        if (map != null)
+        {
+            gen.writeStartObject("map");
+
+            for (Map.Entry<String, Set<String> > entry : map.entrySet())
+            {
+                String vo = entry.getKey();
+                gen.writeStartArray(vo);
+                Set<String> users = entry.getValue();
+                for (String user : users) {
+                    gen.write(user);
+                }
+                gen.writeEnd();
+            }
+
+            gen.writeEnd();
+        }
+        gen.writeEnd();
+        gen.close();
+    }
+
+    private void doGenerateOsgUserVoMap(HttpServletRequest request,
+                          HttpServletResponse response)
+        throws ServletException, IOException
+    {
+        String hostname = request.getParameter("hostname");
+        if (hostname == null)
+        {
+            errorResponse(response, response.SC_BAD_REQUEST, "Missing required input parameter 'hostname'");
+            return;
+        }
+
+        String map = null;
+        try
+        {
+            map = gums.generateOsgUserVoMap(hostname);
+        }
+        catch (Exception e)
+        {
+            errorResponse(response, response.SC_INTERNAL_SERVER_ERROR, "Error generating osg user VO map: " + e.getMessage());
+        }
+
+        Writer out = response.getWriter();
+        JsonGenerator gen = Json.createGenerator(out);
+        gen.writeStartObject()
+            .write("result", (map != null) ? "OK" : "FAILED");
+        if (map != null)
+        {
+            gen.write("map", map);
+        }
+        gen.writeEnd();
+        gen.close();
+    }
+
     private void doUserGroup(HttpServletRequest request,
                           HttpServletResponse response)
         throws ServletException, IOException
