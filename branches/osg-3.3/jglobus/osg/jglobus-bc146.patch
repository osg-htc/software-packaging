From cc2eae0ca29e81c66ec2def25b1680156ac67020 Mon Sep 17 00:00:00 2001
From: Matyas Selmeci <matyas@cs.wisc.edu>
Date: Wed, 21 Oct 2015 10:25:12 -0500
Subject: [PATCH] jglobus-bc146.patch

---
 pom.xml                                            |  4 +-
 ssl-proxies/pom.xml                                |  2 +-
 .../gsi/bc/BouncyCastleCertProcessingFactory.java  | 29 +++++-----
 .../org/globus/gsi/bc/BouncyCastleOpenSSLKey.java  | 12 ++--
 .../java/org/globus/gsi/bc/BouncyCastleUtil.java   | 67 ++++++++++++++++------
 .../globus/gsi/bc/BouncyCastleX509Extension.java   | 10 ++--
 .../java/org/globus/gsi/bc/X509NameHelper.java     | 35 +++--------
 .../org/globus/gsi/proxy/ext/ProxyCertInfo.java    | 14 ++---
 .../java/org/globus/gsi/proxy/ext/ProxyPolicy.java | 10 ++--
 .../trustmanager/X509ProxyCertPathValidator.java   | 10 ++--
 .../org/globus/gsi/util/CertificateIOUtil.java     |  2 +-
 .../java/org/globus/gsi/util/CertificateUtil.java  | 24 ++++----
 .../bc/BouncyCastleCertProcessingFactoryTest.java  | 10 +---
 .../globus/gsi/proxy/ext/ProxyCertInfoTest.java    |  6 +-
 14 files changed, 120 insertions(+), 115 deletions(-)

diff --git a/pom.xml b/pom.xml
index 34838a5..844c548 100644
--- a/pom.xml
+++ b/pom.xml
@@ -146,12 +146,12 @@
 				<version>1.2.14</version>
 				<scope>compile</scope>
 			</dependency>
 			<dependency>
 				<groupId>org.bouncycastle</groupId>
-				<artifactId>bcprov-jdk15on</artifactId>
-				<version>1.50</version>
+				<artifactId>bcprov-jdk16</artifactId>
+				<version>1.46</version>
 			</dependency>
 			<dependency>
 				<groupId>commons-io</groupId>
 				<artifactId>commons-io</artifactId>
 				<version>1.4</version>
diff --git a/ssl-proxies/pom.xml b/ssl-proxies/pom.xml
index f32d148..28cd567 100644
--- a/ssl-proxies/pom.xml
+++ b/ssl-proxies/pom.xml
@@ -39,11 +39,11 @@
 			<artifactId>log4j</artifactId>
 			<scope>compile</scope>
 		</dependency>
 		<dependency>
 			<groupId>org.bouncycastle</groupId>
-			<artifactId>bcprov-jdk15on</artifactId>
+			<artifactId>bcprov-jdk16</artifactId>
 		</dependency>
 		<dependency>
 			<groupId>commons-io</groupId>
 			<artifactId>commons-io</artifactId>
 		</dependency>
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactory.java b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactory.java
index 135f019..7b03475 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactory.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactory.java
@@ -12,11 +12,10 @@
  *
  * See the License for the specific language governing permissions and limitations under the License.
  */
 package org.globus.gsi.bc;
 
-import org.bouncycastle.asn1.x500.style.BCStyle;
 import org.globus.gsi.util.CertificateLoadUtil;
 import org.globus.gsi.util.ProxyCertificateUtil;
 
 import org.globus.gsi.X509Credential;
 
@@ -47,17 +46,17 @@ import org.globus.gsi.proxy.ext.ProxyCertInfoExtension;
 import org.globus.gsi.proxy.ext.GlobusProxyCertInfoExtension;
 import org.bouncycastle.x509.X509V3CertificateGenerator;
 import org.bouncycastle.jce.PKCS10CertificationRequest;
 import org.bouncycastle.jce.provider.X509CertificateObject;
 import org.bouncycastle.asn1.DERSet;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.DERBitString;
 import org.bouncycastle.asn1.x509.X509Name;
-import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1InputStream;
 import org.bouncycastle.asn1.ASN1Sequence;
-import org.bouncycastle.asn1.x509.Certificate;
 import org.bouncycastle.asn1.x509.TBSCertificateStructure;
+import org.bouncycastle.asn1.x509.X509CertificateStructure;
 import org.bouncycastle.asn1.x509.X509Extensions;
 import org.bouncycastle.asn1.x509.X509Extension;
 import org.bouncycastle.asn1.x509.KeyUsage;
 
 /**
@@ -148,11 +147,11 @@ public class BouncyCastleCertProcessingFactory {
     public X509Certificate createCertificate(InputStream certRequestInputStream, X509Certificate cert,
         PrivateKey privateKey, int lifetime, int delegationMode, X509ExtensionSet extSet, String cnValue)
         throws IOException, GeneralSecurityException {
 
         ASN1InputStream derin = new ASN1InputStream(certRequestInputStream);
-        ASN1Primitive reqInfo = derin.readObject();
+        DERObject reqInfo = derin.readObject();
         PKCS10CertificationRequest certReq = new PKCS10CertificationRequest((ASN1Sequence) reqInfo);
 
         boolean rs = certReq.verify();
 
         if (!rs) {
@@ -412,15 +411,15 @@ public class BouncyCastleCertProcessingFactory {
                 X509Extensions extensions = crt.getExtensions();
                 if (extensions != null) {
                     X509Extension ext;
 
                     // handle key usage ext
-                    ext = extensions.getExtension(X509Extension.keyUsage);
+                    ext = extensions.getExtension(X509Extensions.KeyUsage);
                     if (ext != null) {
 
                         // TBD: handle this better
-                        if (extSet != null && (extSet.get(X509Extension.keyUsage.getId()) != null)) {
+                        if (extSet != null && (extSet.get(X509Extensions.KeyUsage.getId()) != null)) {
                             String err = i18n.getMessage("keyUsageExt");
                             throw new GeneralSecurityException(err);
                         }
 
                         DERBitString bits = (DERBitString) BouncyCastleUtil.getExtensionObject(ext);
@@ -436,11 +435,11 @@ public class BouncyCastleCertProcessingFactory {
                             bytes[0] ^= KeyUsage.keyCertSign;
                         }
 
                         bits = new DERBitString(bytes, bits.getPadBits());
 
-                        certGen.addExtension(X509Extension.keyUsage, ext.isCritical(), bits);
+                        certGen.addExtension(X509Extensions.KeyUsage, ext.isCritical(), bits);
                     }
                 }
 
             } catch (IOException e) {
                 // but this should not happen
@@ -480,11 +479,11 @@ public class BouncyCastleCertProcessingFactory {
         }
 
         X509NameHelper issuer = new X509NameHelper(issuerDN);
 
         X509NameHelper subject = new X509NameHelper(issuerDN);
-        subject.add(BCStyle.CN, (cnValue == null) ? delegDN : cnValue);
+        subject.add(X509Name.CN, (cnValue == null) ? delegDN : cnValue);
 
         certGen.setSubjectDN(subject.getAsName());
         certGen.setIssuerDN(issuer.getAsName());
 
         certGen.setSerialNumber(serialNum);
@@ -571,11 +570,11 @@ public class BouncyCastleCertProcessingFactory {
     public X509Certificate createCertificate(InputStream certRequestInputStream, X509Certificate cert,
         PrivateKey privateKey, int lifetime, GSIConstants.CertificateType certType, X509ExtensionSet extSet,
         String cnValue) throws IOException, GeneralSecurityException {
 
         ASN1InputStream derin = new ASN1InputStream(certRequestInputStream);
-        ASN1Primitive reqInfo = derin.readObject();
+        DERObject reqInfo = derin.readObject();
         PKCS10CertificationRequest certReq = new PKCS10CertificationRequest((ASN1Sequence) reqInfo);
 
         boolean rs = certReq.verify();
 
         if (!rs) {
@@ -816,15 +815,15 @@ public class BouncyCastleCertProcessingFactory {
                 X509Extensions extensions = crt.getExtensions();
                 if (extensions != null) {
                     X509Extension ext;
 
                     // handle key usage ext
-                    ext = extensions.getExtension(X509Extension.keyUsage);
+                    ext = extensions.getExtension(X509Extensions.KeyUsage);
                     if (ext != null) {
 
                         // TBD: handle this better
-                        if (extSet != null && (extSet.get(X509Extension.keyUsage.getId()) != null)) {
+                        if (extSet != null && (extSet.get(X509Extensions.KeyUsage.getId()) != null)) {
                             String err = i18n.getMessage("keyUsageExt");
                             throw new GeneralSecurityException(err);
                         }
 
                         DERBitString bits = (DERBitString) BouncyCastleUtil.getExtensionObject(ext);
@@ -840,11 +839,11 @@ public class BouncyCastleCertProcessingFactory {
                             bytes[0] ^= KeyUsage.keyCertSign;
                         }
 
                         bits = new DERBitString(bytes, bits.getPadBits());
 
-                        certGen.addExtension(X509Extension.keyUsage, ext.isCritical(), bits);
+                        certGen.addExtension(X509Extensions.KeyUsage, ext.isCritical(), bits);
                     }
                 }
 
             } catch (IOException e) {
                 // but this should not happen
@@ -882,11 +881,11 @@ public class BouncyCastleCertProcessingFactory {
         } else {
         	issuerDN = new X509Name(true,issuerCert.getSubjectX500Principal().getName());
         }
         X509NameHelper issuer = new X509NameHelper(issuerDN);
         X509NameHelper subject = new X509NameHelper(issuerDN);
-        subject.add(BCStyle.CN, (cnValue == null) ? delegDN : cnValue);
+        subject.add(X509Name.CN, (cnValue == null) ? delegDN : cnValue);
 
         certGen.setSubjectDN(subject.getAsName());
         certGen.setIssuerDN(issuer.getAsName());
 
         certGen.setSerialNumber(serialNum);
@@ -921,13 +920,13 @@ public class BouncyCastleCertProcessingFactory {
      * @exception GeneralSecurityException
      *                if certificate failed to load.
      */
     public X509Certificate loadCertificate(InputStream in) throws IOException, GeneralSecurityException {
         ASN1InputStream derin = new ASN1InputStream(in);
-        ASN1Primitive certInfo = derin.readObject();
+        DERObject certInfo = derin.readObject();
         ASN1Sequence seq = ASN1Sequence.getInstance(certInfo);
-        return new X509CertificateObject(Certificate.getInstance(seq));
+        return new X509CertificateObject(new X509CertificateStructure(seq));
     }
 
     /**
      * Creates a certificate request from the specified subject DN and a key pair. The
      * <I>"MD5WithRSAEncryption"</I> is used as the signing algorithm of the certificate request.
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleOpenSSLKey.java b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleOpenSSLKey.java
index 867291a..cbd98da 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleOpenSSLKey.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleOpenSSLKey.java
@@ -26,12 +26,12 @@ import java.security.KeyFactory;
 import java.security.PrivateKey;
 import java.security.Security;
 import java.security.interfaces.RSAPrivateCrtKey;
 import java.security.spec.PKCS8EncodedKeySpec;
 import org.bouncycastle.asn1.ASN1InputStream;
-import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1Sequence;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.DERObjectIdentifier;
 import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
 import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
 import org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure;
 import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
@@ -119,16 +119,16 @@ public class BouncyCastleOpenSSLKey extends OpenSSLKey {
 					throw new GeneralSecurityException(
 							"Cannot process empty byte stream.");
 				}
 				ByteArrayInputStream bis = new ByteArrayInputStream(data);
 				ASN1InputStream derin = new ASN1InputStream(bis);
-				ASN1Primitive keyInfo = derin.readObject();
+				DERObject keyInfo = derin.readObject();
 
 				DERObjectIdentifier rsaOid = PKCSObjectIdentifiers.rsaEncryption;
 				AlgorithmIdentifier rsa = new AlgorithmIdentifier(rsaOid);
 				PrivateKeyInfo pkeyinfo = new PrivateKeyInfo(rsa, keyInfo);
-				ASN1Primitive derkey = pkeyinfo.toASN1Primitive();
+				DERObject derkey = pkeyinfo.getDERObject();
 				byte[] keyData = BouncyCastleUtil.toByteArray(derkey);
 				// The DER object needs to be mangled to
 				// create a proper ProvateKeyInfo object
 				PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyData);
 				KeyFactory kfac = KeyFactory.getInstance("RSA");
@@ -148,14 +148,14 @@ public class BouncyCastleOpenSSLKey extends OpenSSLKey {
 		String format = key.getFormat();
 		if (format != null
 				&& (format.equalsIgnoreCase("PKCS#8") || format
 						.equalsIgnoreCase("PKCS8"))) {
 			try {
-				ASN1Primitive keyInfo = BouncyCastleUtil.toASN1Primitive(key
+				DERObject keyInfo = BouncyCastleUtil.toDERObject(key
 						.getEncoded());
 				PrivateKeyInfo pkey = new PrivateKeyInfo((ASN1Sequence) keyInfo);
-				ASN1Primitive derKey = pkey.getPrivateKey();
+				DERObject derKey = pkey.getPrivateKey();
 				return BouncyCastleUtil.toByteArray(derKey);
 			} catch (IOException e) {
 				// that should never happen
 				logger.warn("This shouldn't have happened.", e);
 				return new byte[] {};
@@ -167,11 +167,11 @@ public class BouncyCastleOpenSSLKey extends OpenSSLKey {
 			RSAPrivateKeyStructure st = new RSAPrivateKeyStructure(pKey
 					.getModulus(), pKey.getPublicExponent(), pKey
 					.getPrivateExponent(), pKey.getPrimeP(), pKey.getPrimeQ(),
 					pKey.getPrimeExponentP(), pKey.getPrimeExponentQ(), pKey
 							.getCrtCoefficient());
-			ASN1Primitive ob = st.toASN1Primitive();
+			DERObject ob = st.getDERObject();
 
 			try {
 				return BouncyCastleUtil.toByteArray(ob);
 			} catch (IOException e) {
 				// that should never happen
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleUtil.java b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleUtil.java
index 30d9659..ed85d02 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleUtil.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleUtil.java
@@ -28,19 +28,20 @@ import javax.naming.InvalidNameException;
 import javax.naming.ldap.LdapName;
 import javax.security.auth.x500.X500Principal;
 
 import org.bouncycastle.asn1.ASN1InputStream;
 import org.bouncycastle.asn1.ASN1OctetString;
-import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1Sequence;
 import org.bouncycastle.asn1.ASN1Set;
-import org.bouncycastle.asn1.ASN1String;
 import org.bouncycastle.asn1.DERBitString;
+import org.bouncycastle.asn1.DERBoolean;
+import org.bouncycastle.asn1.DEREncodable;
+import org.bouncycastle.asn1.DERInteger;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.DERObjectIdentifier;
 import org.bouncycastle.asn1.DEROutputStream;
-import org.bouncycastle.asn1.x500.X500Name;
-import org.bouncycastle.asn1.x500.style.BCStyle;
+import org.bouncycastle.asn1.DERString;
 import org.bouncycastle.asn1.x509.BasicConstraints;
 import org.bouncycastle.asn1.x509.TBSCertificateStructure;
 import org.bouncycastle.asn1.x509.X509Extension;
 import org.bouncycastle.asn1.x509.X509Extensions;
 import org.bouncycastle.asn1.x509.X509Name;
@@ -73,11 +74,11 @@ public class BouncyCastleUtil {
      *
      * @param obj DERObject to convert.
      * @return the DER-encoded byte array
      * @exception IOException if conversion fails
      */
-    public static byte[] toByteArray(ASN1Primitive obj)
+    public static byte[] toByteArray(DERObject obj)
 	throws IOException {
 	ByteArrayOutputStream bout = new ByteArrayOutputStream();
 	DEROutputStream der = new DEROutputStream(bout);
 	der.writeObject(obj);
 	return bout.toByteArray();
@@ -89,11 +90,11 @@ public class BouncyCastleUtil {
      *
      * @param data the DER-encoded byte array to convert.
      * @return the DERObject.
      * @exception IOException if conversion fails
      */
-    public static ASN1Primitive toASN1Primitive(byte[] data)
+    public static DERObject toDERObject(byte[] data)
 	throws IOException {
         ByteArrayInputStream inStream = new ByteArrayInputStream(data);
         ASN1InputStream derInputStream = new ASN1InputStream(inStream);
         return derInputStream.readObject();
     }
@@ -105,13 +106,13 @@ public class BouncyCastleUtil {
      *
      * @param obj the DERObject to replicate.
      * @return a copy of the DERObject.
      * @exception IOException if replication fails
      */
-    public static ASN1Primitive duplicate(ASN1Primitive obj)
+    public static DERObject duplicate(DERObject obj)
 	throws IOException {
-	return toASN1Primitive(toByteArray(obj));
+	return toDERObject(toByteArray(obj));
     }
 
     /**
      * Extracts the TBS certificate from the given certificate.
      *
@@ -120,23 +121,23 @@ public class BouncyCastleUtil {
      * @exception IOException if extraction fails.
      * @exception CertificateEncodingException if extraction fails.
      */
     public static TBSCertificateStructure getTBSCertificateStructure(X509Certificate cert)
 	throws CertificateEncodingException, IOException {
-	ASN1Primitive obj = BouncyCastleUtil.toASN1Primitive(cert.getTBSCertificate());
+	DERObject obj = BouncyCastleUtil.toDERObject(cert.getTBSCertificate());
 	return TBSCertificateStructure.getInstance(obj);
     }
 
     /**
      * Extracts the value of a certificate extension.
      *
      * @param ext the certificate extension to extract the value from.
      * @exception IOException if extraction fails.
      */
-    public static ASN1Primitive getExtensionObject(X509Extension ext)
+    public static DERObject getExtensionObject(X509Extension ext)
 	throws IOException {
-	return toASN1Primitive(ext.getValue().getOctets());
+	return toDERObject(ext.getValue().getOctets());
     }
 
     /**
      * Returns certificate type of the given certificate.
      * Please see {@link #getCertificateType(TBSCertificateStructure,
@@ -292,28 +293,28 @@ public class BouncyCastleUtil {
 	throws CertificateException, IOException {
 	X509Extensions extensions = crt.getExtensions();
 	X509Extension ext = null;
 
 	if (extensions != null) {
-	    ext = extensions.getExtension(X509Extension.basicConstraints);
+	    ext = extensions.getExtension(X509Extensions.BasicConstraints);
 	    if (ext != null) {
-		BasicConstraints basicExt = BasicConstraints.getInstance(ext);
+		BasicConstraints basicExt = getBasicConstraints(ext);
 		if (basicExt.isCA()) {
 		    return GSIConstants.CertificateType.CA;
 		}
 	    }
 	}
 
 	GSIConstants.CertificateType type = GSIConstants.CertificateType.EEC;
 
 	// does not handle multiple AVAs
-	X500Name subject = crt.getSubject();
+	X509Name subject = crt.getSubject();
 
 	ASN1Set entry = X509NameHelper.getLastNameEntry(subject);
 	ASN1Sequence ava = (ASN1Sequence)entry.getObjectAt(0);
-	if (BCStyle.CN.equals(ava.getObjectAt(0))) {
-	    String value = ((ASN1String)ava.getObjectAt(1)).getString();
+	if (X509Name.CN.equals(ava.getObjectAt(0))) {
+	    String value = ((DERString)ava.getObjectAt(1)).getString();
 	    if (value.equalsIgnoreCase("proxy")) {
 		type = GSIConstants.CertificateType.GSI_2_PROXY;
 	    } else if (value.equalsIgnoreCase("limited proxy")) {
 		type = GSIConstants.CertificateType.GSI_2_LIMITED_PROXY;
 	    } else if (extensions != null) {
@@ -367,11 +368,11 @@ public class BouncyCastleUtil {
 
 	    if (ProxyCertificateUtil.isProxy(type)) {
 		X509NameHelper iss = new X509NameHelper(crt.getIssuer());
 		iss.add((ASN1Set)BouncyCastleUtil.duplicate(entry));
 		X509Name issuer = iss.getAsName();
-		if (!issuer.equals(X509Name.getInstance(subject))) {
+		if (!issuer.equals(subject)) {
                     String err = i18n.getMessage("proxyDNErr");
 		    throw new CertificateException(err);
 		}
 	    }
 	}
@@ -401,10 +402,40 @@ public class BouncyCastleUtil {
 
 	return keyUsage;
     }
 
     /**
+     * Creates a <code>BasicConstraints</code> object from given
+     * extension.
+     *
+     * @param ext the extension.
+     * @return the <code>BasicConstraints</code> object.
+     * @exception IOException if something fails.
+     */
+    public static BasicConstraints getBasicConstraints(X509Extension ext) 
+	throws IOException {
+	DERObject obj = BouncyCastleUtil.getExtensionObject(ext);
+	if (obj instanceof ASN1Sequence) {
+	    ASN1Sequence seq = (ASN1Sequence)obj;
+	    int size = seq.size();
+	    if (size == 0) {
+		return new BasicConstraints(false);
+	    } else if (size == 1) {
+		DEREncodable value = seq.getObjectAt(0);
+		if (value instanceof DERInteger) {
+		    int length = ((DERInteger)value).getValue().intValue();
+		    return new BasicConstraints(false, length);
+		} else if (value instanceof DERBoolean) {
+		    boolean ca = ((DERBoolean)value).isTrue();
+		    return new BasicConstraints(ca);
+		}
+	    } 
+	}
+	return BasicConstraints.getInstance(obj);
+    }
+
+    /**
      * Creates a <code>ProxyCertInfo</code> object from given
      * extension.
      *
      * @param ext the extension.
      * @return the <code>ProxyCertInfo</code> object.
@@ -498,11 +529,11 @@ public class BouncyCastleUtil {
      */
     public static byte[] getExtensionValue(byte [] certExtValue)
 	throws IOException {
 	ByteArrayInputStream inStream = new ByteArrayInputStream(certExtValue);
 	ASN1InputStream derInputStream = new ASN1InputStream(inStream);
-        ASN1Primitive object = derInputStream.readObject();
+	DERObject object = derInputStream.readObject();
 	if (object instanceof ASN1OctetString) {
 	    return ((ASN1OctetString)object).getOctets();
 	} else {
 	    throw new IOException(i18n.getMessage("octectExp"));
 	}
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleX509Extension.java b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleX509Extension.java
index aaaa3dd..e07743b 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleX509Extension.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/bc/BouncyCastleX509Extension.java
@@ -14,11 +14,11 @@
  */
 package org.globus.gsi.bc;
 
 import java.io.IOException;
 
-import org.bouncycastle.asn1.ASN1Encodable;
+import org.bouncycastle.asn1.DEREncodable;
 
 import org.globus.gsi.X509Extension;
 
 import org.globus.util.I18n;
 
@@ -34,26 +34,26 @@ public class BouncyCastleX509Extension extends X509Extension {
 
     public BouncyCastleX509Extension(String oid) {
 	this(oid, false, null);
     }
 
-    public BouncyCastleX509Extension(String oid, ASN1Encodable value) {
+    public BouncyCastleX509Extension(String oid, DEREncodable value) {
 	this(oid, false, value);
     }
 
     public BouncyCastleX509Extension(String oid, boolean critical,
-				     ASN1Encodable value) {
+				     DEREncodable value) {
 	super(oid, critical, null);
 	setValue(value);
     }
 
-    protected void setValue(ASN1Encodable value) {
+    protected void setValue(DEREncodable value) {
 	if (value == null) {
 	    return;
 	}
     	try {
-	    setValue(BouncyCastleUtil.toByteArray(value.toASN1Primitive()));
+	    setValue(BouncyCastleUtil.toByteArray(value.getDERObject()));
 	} catch (IOException e) {
 	    throw new RuntimeException(i18n.getMessage("byteArrayErr") +
 				       e.getMessage());
 	}
     }
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/bc/X509NameHelper.java b/ssl-proxies/src/main/java/org/globus/gsi/bc/X509NameHelper.java
index 582d05b..19a84f2 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/bc/X509NameHelper.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/bc/X509NameHelper.java
@@ -19,17 +19,15 @@ import java.io.IOException;
 import java.util.Enumeration;
 
 import org.bouncycastle.asn1.ASN1EncodableVector;
 import org.bouncycastle.asn1.ASN1Sequence;
 import org.bouncycastle.asn1.ASN1Set;
-import org.bouncycastle.asn1.ASN1String;
 import org.bouncycastle.asn1.DERObjectIdentifier;
 import org.bouncycastle.asn1.DERPrintableString;
 import org.bouncycastle.asn1.DERSequence;
 import org.bouncycastle.asn1.DERSet;
-import org.bouncycastle.asn1.x500.RDN;
-import org.bouncycastle.asn1.x500.X500Name;
+import org.bouncycastle.asn1.DERString;
 import org.bouncycastle.asn1.x509.X509Name;
 
 /**
  * A helper class to deal with {@link X509Name X509Name} object.
  */
@@ -45,34 +43,19 @@ public class X509NameHelper {
     public X509NameHelper(ASN1Sequence seq) {
         this.seq = seq;
     }
 
     /**
-     * Creates an instance using existing {@link X500Name X500Name}
-     * object.
-     * This behaves like a copy constructor.
-     *
-     * @param name existing <code>X500Name</code>
-     */
-    public X509NameHelper(X500Name name) {
-        try {
-            this.seq = (ASN1Sequence)BouncyCastleUtil.duplicate(name.toASN1Primitive());
-        } catch (IOException e) {
-            throw new RuntimeException(e.getMessage());
-        }
-    }
-
-    /**
      * Creates an instance using existing {@link X509Name X509Name}
      * object.
      * This behaves like a copy constructor.
      *
      * @param name existing <code>X509Name</code>
      */
     public X509NameHelper(X509Name name) {
         try {
-            this.seq = (ASN1Sequence)BouncyCastleUtil.duplicate(name.toASN1Primitive());
+            this.seq = (ASN1Sequence)BouncyCastleUtil.duplicate(name.getDERObject());
         } catch (IOException e) {
             throw new RuntimeException(e.getMessage());
         }
     }
 
@@ -140,14 +123,14 @@ public class X509NameHelper {
     /**
      * Gets the last name component from the {@link X509Name X509Name} name.
      *
      * @return the last name component. Null if there is none.
      */
-    public static ASN1Set getLastNameEntry(X500Name name) {
-        RDN[] rdns = name.getRDNs();
-        int size = rdns.length;
-        return (size > 0) ? (ASN1Set) rdns[size - 1].toASN1Primitive() : null;
+    public static ASN1Set getLastNameEntry(X509Name name) {
+        ASN1Sequence seq = (ASN1Sequence) name.getDERObject();
+        int size = seq.size();
+        return (size > 0) ? (ASN1Set) seq.getObjectAt(size - 1) : null;
     }
 
     /**
      * Returns Globus format representation of the name. It handles names with
      * multiple AVAs.
@@ -157,11 +140,11 @@ public class X509NameHelper {
      */
     public static String toString(X509Name name) {
         if (name == null) {
             return null;
         }
-        return toString((ASN1Sequence)name.toASN1Primitive());
+        return toString((ASN1Sequence)name.getDERObject());
     }
 
     private static String toString(ASN1Sequence seq) {
         if (seq == null) {
             return null;
@@ -174,18 +157,18 @@ public class X509NameHelper {
             Enumeration ee = set.getObjects();
             buf.append('/');
             while (ee.hasMoreElements()) {
                 ASN1Sequence s = (ASN1Sequence)ee.nextElement();
                 DERObjectIdentifier oid = (DERObjectIdentifier)s.getObjectAt(0);
-                String sym = (String)X509Name.DefaultSymbols.get(oid);
+                String sym = (String)X509Name.OIDLookUp.get(oid);
                 if (sym == null) {
                     buf.append(oid.getId());
                 } else {
                     buf.append(sym);
                 }
                 buf.append('=');
-                buf.append(((ASN1String)s.getObjectAt(1)).getString());
+                buf.append(((DERString)s.getObjectAt(1)).getString());
                 if (ee.hasMoreElements()) {
                     buf.append('+');
                 }
             }
         }
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyCertInfo.java b/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyCertInfo.java
index 9ee849e..772cb85 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyCertInfo.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyCertInfo.java
@@ -18,25 +18,25 @@ import org.globus.gsi.util.CertificateUtil;
 
 import org.bouncycastle.asn1.DERObjectIdentifier;
 
 import java.io.IOException;
 
-import org.bouncycastle.asn1.ASN1Encodable;
 import org.bouncycastle.asn1.ASN1EncodableVector;
-import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1Sequence;
+import org.bouncycastle.asn1.DEREncodable;
 import org.bouncycastle.asn1.DERInteger;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.DERSequence;
 
 /**
  * Represents ProxyCertInfo extension. <BR>
  * <p/>
  * <PRE>
  * ProxyCertInfo ::= SEQUENCE { pCPathLenConstraint      INTEGER (0..MAX) OPTIONAL, proxyPolicy ProxyPolicy }
  * </PRE>
  */
-public class ProxyCertInfo implements ASN1Encodable {
+public class ProxyCertInfo implements DEREncodable {
 
     /** ProxyCertInfo extension OID */
     public static final DERObjectIdentifier OID
     = new DERObjectIdentifier("1.3.6.1.5.5.7.1.14");
     public static final DERObjectIdentifier OLD_OID
@@ -109,13 +109,13 @@ public class ProxyCertInfo implements ASN1Encodable {
         if (obj instanceof ProxyCertInfo) {
             return (ProxyCertInfo) obj;
         } else if (obj instanceof ASN1Sequence) {
             return new ProxyCertInfo((ASN1Sequence) obj);
         } else if (obj instanceof byte[]) {
-            ASN1Primitive derObj;
+            DERObject derObj;
             try {
-                derObj = CertificateUtil.toASN1Primitive((byte[]) obj);
+                derObj = CertificateUtil.toDERObject((byte[]) obj);
             } catch (IOException e) {
                 throw new IllegalArgumentException(e.getMessage(), e);
             }
             if (derObj instanceof ASN1Sequence) {
                 return new ProxyCertInfo((ASN1Sequence) derObj);
@@ -127,18 +127,18 @@ public class ProxyCertInfo implements ASN1Encodable {
     /**
      * Returns the DER-encoded ASN.1 representation of the extension.
      *
      * @return <code>DERObject</code> the encoded representation of the extension.
      */
-    public ASN1Primitive toASN1Primitive() {
+    public DERObject getDERObject() {
         ASN1EncodableVector vec = new ASN1EncodableVector();
 
         if (this.pathLenConstraint != null) {
             vec.add(this.pathLenConstraint);
         }
 
-        vec.add(this.proxyPolicy.toASN1Primitive());
+        vec.add(this.proxyPolicy.getDERObject());
 
         return new DERSequence(vec);
     }
 
     /**
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyPolicy.java b/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyPolicy.java
index 24a298f..e340c25 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyPolicy.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/proxy/ext/ProxyPolicy.java
@@ -12,24 +12,24 @@
  *
  * See the License for the specific language governing permissions and limitations under the License.
  */
 package org.globus.gsi.proxy.ext;
 
-import org.bouncycastle.asn1.ASN1Encodable;
 import org.bouncycastle.asn1.ASN1EncodableVector;
-import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1Sequence;
+import org.bouncycastle.asn1.DEREncodable;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.DERObjectIdentifier;
 import org.bouncycastle.asn1.DEROctetString;
 import org.bouncycastle.asn1.DERSequence;
 import org.bouncycastle.asn1.DERTaggedObject;
 
 /**
  * Represents the policy part of the ProxyCertInfo extension. <BR> <PRE>
  * ProxyPolicy ::= SEQUENCE { policyLanguage    OBJECT IDENTIFIER, policy OCTET STRING OPTIONAL } </PRE>
  */
-public class ProxyPolicy implements ASN1Encodable {
+public class ProxyPolicy implements DEREncodable {
 
     /**
      * Impersonation proxy OID
      */
     public static final DERObjectIdentifier IMPERSONATION = new DERObjectIdentifier("1.3.6.1.5.5.7.21.1");
@@ -56,11 +56,11 @@ public class ProxyPolicy implements ASN1Encodable {
         if (seq.size() < 1) {
             throw new IllegalArgumentException();
         }
         this.policyLanguage = (DERObjectIdentifier) seq.getObjectAt(0);
         if (seq.size() > 1) {
-            ASN1Encodable obj = seq.getObjectAt(1);
+            DEREncodable obj = seq.getObjectAt(1);
             if (obj instanceof DERTaggedObject) {
                 obj = ((DERTaggedObject) obj).getObject();
             }
             this.policy = (DEROctetString) obj;
         }
@@ -131,11 +131,11 @@ public class ProxyPolicy implements ASN1Encodable {
      * Returns the DER-encoded ASN.1 representation of proxy policy.
      *
      * @return <code>DERObject</code> the encoded representation of the proxy
      *         policy.
      */
-    public ASN1Primitive toASN1Primitive() {
+    public DERObject getDERObject() {
 
         ASN1EncodableVector vec = new ASN1EncodableVector();
 
         vec.add(this.policyLanguage);
 
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java
index 8f24102..7ed5a08 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/trustmanager/X509ProxyCertPathValidator.java
@@ -498,24 +498,24 @@ public class X509ProxyCertPathValidator extends CertPathValidatorSpi {
         if (extensions != null) {
             Enumeration e = extensions.oids();
             while (e.hasMoreElements()) {
                 oid = (DERObjectIdentifier) e.nextElement();
                 proxyExtension = extensions.getExtension(oid);
-                if (oid.equals(X509Extension.subjectAlternativeName)
-                        || oid.equals(X509Extension.issuerAlternativeName)) {
+                if (oid.equals(X509Extensions.SubjectAlternativeName)
+                        || oid.equals(X509Extensions.IssuerAlternativeName)) {
                     // No Alt name extensions - 3.2 & 3.5
                     throw new CertPathValidatorException(
                             "Proxy violation: no Subject or Issuer Alternative Name");
-                } else if (oid.equals(X509Extension.basicConstraints)) {
+                } else if (oid.equals(X509Extensions.BasicConstraints)) {
                     // Basic Constraint must not be true - 3.8
                     BasicConstraints basicExt =
                             CertificateUtil.getBasicConstraints(proxyExtension);
                     if (basicExt.isCA()) {
                         throw new CertPathValidatorException(
                                 "Proxy violation: Basic Constraint CA is set to true");
                     }
-                } else if (oid.equals(X509Extension.keyUsage)) {
+                } else if (oid.equals(X509Extensions.KeyUsage)) {
                     proxyKeyUsage = proxyExtension;
 
                     checkKeyUsage(issuer, proxyExtension);
                 }
             }
@@ -541,11 +541,11 @@ public class X509ProxyCertPathValidator extends CertPathValidatorSpi {
             throw new CertPathValidatorException("Proxy violation: Key usage is asserted.");
         }
     }
 
     private void checkExtension(DERObjectIdentifier oid, X509Extension proxyExtension, X509Extension proxyKeyUsage) throws CertPathValidatorException {
-        if (oid.equals(X509Extension.keyUsage)) {
+        if (oid.equals(X509Extensions.KeyUsage)) {
             // If issuer has it then proxy must have it also
             if (proxyKeyUsage == null) {
                 throw new CertPathValidatorException(
                         "Proxy violation: Issuer has key usage, but proxy does not");
             }
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateIOUtil.java b/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateIOUtil.java
index c3d4ca7..00ca7d6 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateIOUtil.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateIOUtil.java
@@ -105,11 +105,11 @@ public final class CertificateIOUtil {
     }
 
     public static byte[] encodePrincipal(X509Name subject) throws IOException {
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         DEROutputStream der = new DEROutputStream(bout);
-        der.writeObject(subject.toASN1Primitive());
+        der.writeObject(subject.getDERObject());
         return bout.toByteArray();
     }
 
     private synchronized static String hash(byte[] data) {
         init();
diff --git a/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateUtil.java b/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateUtil.java
index dda3a17..8cbfd9b 100644
--- a/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateUtil.java
+++ b/ssl-proxies/src/main/java/org/globus/gsi/util/CertificateUtil.java
@@ -16,18 +16,16 @@ package org.globus.gsi.util;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.bouncycastle.asn1.ASN1InputStream;
 import org.bouncycastle.asn1.ASN1Object;
-import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1Sequence;
 import org.bouncycastle.asn1.ASN1Set;
-import org.bouncycastle.asn1.ASN1String;
 import org.bouncycastle.asn1.DERBitString;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.DERObjectIdentifier;
-import org.bouncycastle.asn1.x500.X500Name;
-import org.bouncycastle.asn1.x500.style.BCStyle;
+import org.bouncycastle.asn1.DERString;
 import org.bouncycastle.asn1.x509.BasicConstraints;
 import org.bouncycastle.asn1.x509.TBSCertificateStructure;
 import org.bouncycastle.asn1.x509.X509Extension;
 import org.bouncycastle.asn1.x509.X509Extensions;
 import org.bouncycastle.asn1.x509.X509Name;
@@ -188,11 +186,11 @@ public final class CertificateUtil {
         X509Extensions extensions = crt.getExtensions();
         if (extensions == null) {
             return -1;
         }
         X509Extension proxyExtension =
-                extensions.getExtension(X509Extension.basicConstraints);
+                extensions.getExtension(X509Extensions.BasicConstraints);
         if (proxyExtension != null) {
             BasicConstraints basicExt =
                     getBasicConstraints(proxyExtension);
             if (basicExt.isCA()) {
                 BigInteger pathLen = basicExt.getPathLenConstraint();
@@ -282,11 +280,11 @@ public final class CertificateUtil {
 
         X509Extensions extensions = crt.getExtensions();
         X509Extension ext = null;
 
         if (extensions != null) {
-            ext = extensions.getExtension(X509Extension.basicConstraints);
+            ext = extensions.getExtension(X509Extensions.BasicConstraints);
             if (ext != null) {
                 BasicConstraints basicExt = getBasicConstraints(ext);
                 if (basicExt.isCA()) {
                     return GSIConstants.CertificateType.CA;
                 }
@@ -294,25 +292,25 @@ public final class CertificateUtil {
         }
 
         GSIConstants.CertificateType type = GSIConstants.CertificateType.EEC;
 
         // does not handle multiple AVAs
-        X500Name subject = crt.getSubject();
+        X509Name subject = crt.getSubject();
 
         ASN1Set entry = X509NameHelper.getLastNameEntry(subject);
         ASN1Sequence ava = (ASN1Sequence) entry.getObjectAt(0);
-        if (BCStyle.CN.equals(ava.getObjectAt(0))) {
+        if (X509Name.CN.equals(ava.getObjectAt(0))) {
             type = processCN(extensions, type, ava);
         }
 
         return type;
     }
 
     private static GSIConstants.CertificateType processCN(
             X509Extensions extensions, GSIConstants.CertificateType type, ASN1Sequence ava) throws CertificateException {
         X509Extension ext;
-        String value = ((ASN1String) ava.getObjectAt(1)).getString();
+        String value = ((DERString) ava.getObjectAt(1)).getString();
         GSIConstants.CertificateType certType = type;
         if (value.equalsIgnoreCase("proxy")) {
             certType = GSIConstants.CertificateType.GSI_2_PROXY;
         } else if (value.equalsIgnoreCase("limited proxy")) {
             certType = GSIConstants.CertificateType.GSI_2_LIMITED_PROXY;
@@ -403,11 +401,11 @@ public final class CertificateUtil {
      *
      * @param data the DER-encoded byte array to convert.
      * @return the DERObject.
      * @throws IOException if conversion fails
      */
-    public static ASN1Primitive toASN1Primitive(byte[] data)
+    public static DERObject toDERObject(byte[] data)
             throws IOException {
         ByteArrayInputStream inStream = new ByteArrayInputStream(data);
         ASN1InputStream derInputStream = new ASN1InputStream(inStream);
         return derInputStream.readObject();
     }
@@ -422,11 +420,11 @@ public final class CertificateUtil {
      * @throws CertificateEncodingException if extraction fails.
      */
     public static TBSCertificateStructure getTBSCertificateStructure(
             X509Certificate cert)
             throws CertificateEncodingException, IOException {
-        ASN1Primitive obj = toASN1Primitive(cert.getTBSCertificate());
+        DERObject obj = toDERObject(cert.getTBSCertificate());
         return TBSCertificateStructure.getInstance(obj);
     }
 
     public static EnumSet<KeyUsage> getKeyUsage(TBSCertificateStructure crt)
             throws IOException {
@@ -461,13 +459,13 @@ public final class CertificateUtil {
      * Extracts the value of a certificate extension.
      *
      * @param ext the certificate extension to extract the value from.
      * @throws IOException if extraction fails.
      */
-    public static ASN1Primitive getExtensionObject(X509Extension ext)
+    public static DERObject getExtensionObject(X509Extension ext)
             throws IOException {
-        return toASN1Primitive(ext.getValue().getOctets());
+        return toDERObject(ext.getValue().getOctets());
     }
 
     /**
      * Converts DN of the form "CN=A, OU=B, O=C" into Globus
      * format "/CN=A/OU=B/O=C".<BR>
diff --git a/ssl-proxies/src/test/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactoryTest.java b/ssl-proxies/src/test/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactoryTest.java
index f3d49b7..98e53c1 100644
--- a/ssl-proxies/src/test/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactoryTest.java
+++ b/ssl-proxies/src/test/java/org/globus/gsi/bc/BouncyCastleCertProcessingFactoryTest.java
@@ -24,15 +24,10 @@ import org.globus.gsi.bc.BouncyCastleCertProcessingFactory;
 import org.globus.gsi.bc.BouncyCastleX509Extension;
 import org.globus.gsi.proxy.ext.ProxyPolicy;
 import org.globus.gsi.proxy.ext.ProxyCertInfo;
 import org.globus.gsi.proxy.ext.ProxyCertInfoExtension;
 
-import org.bouncycastle.asn1.ASN1Boolean;
-import org.bouncycastle.asn1.ASN1Encodable;
-import org.bouncycastle.asn1.ASN1Integer;
-import org.bouncycastle.asn1.DERBoolean;
-import org.bouncycastle.asn1.DERSequence;
 import org.bouncycastle.asn1.x509.BasicConstraints;
 import org.bouncycastle.asn1.x509.X509Extensions;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -92,13 +87,12 @@ public class BouncyCastleCertProcessingFactoryTest extends TestCase {
 
     X509ExtensionSet extSet = new X509ExtensionSet();
     ext = new X509Extension(oid, critical, expectedValue.getBytes());
     extSet.add(ext);
 
-    DERSequence seq = new DERSequence(new ASN1Encodable[] { DERBoolean.FALSE, new ASN1Integer(15) });
-    BasicConstraints constraints = BasicConstraints.getInstance(seq);
-    ext = new BouncyCastleX509Extension(org.bouncycastle.asn1.x509.X509Extension.basicConstraints.getId(),
+    BasicConstraints constraints = new BasicConstraints(false, 15);
+    ext = new BouncyCastleX509Extension(X509Extensions.BasicConstraints.getId(),
                         false, constraints);
     extSet.add(ext);
 
     ProxyPolicy policy = new ProxyPolicy(policyOid, policyValue.getBytes());
     ext = new ProxyCertInfoExtension(new ProxyCertInfo(policy));
diff --git a/ssl-proxies/src/test/java/org/globus/gsi/proxy/ext/ProxyCertInfoTest.java b/ssl-proxies/src/test/java/org/globus/gsi/proxy/ext/ProxyCertInfoTest.java
index 55e22bc..ff98f15 100644
--- a/ssl-proxies/src/test/java/org/globus/gsi/proxy/ext/ProxyCertInfoTest.java
+++ b/ssl-proxies/src/test/java/org/globus/gsi/proxy/ext/ProxyCertInfoTest.java
@@ -22,11 +22,11 @@ import java.io.ByteArrayInputStream;
 import org.globus.gsi.proxy.ext.ProxyPolicy;
 import org.globus.gsi.proxy.ext.ProxyCertInfo;
 
 import org.bouncycastle.asn1.DERObjectIdentifier;
 import org.bouncycastle.asn1.DEROutputStream;
-import org.bouncycastle.asn1.ASN1Primitive;
+import org.bouncycastle.asn1.DERObject;
 import org.bouncycastle.asn1.ASN1Sequence;
 
 import junit.framework.TestCase;
 
 public class ProxyCertInfoTest extends TestCase {
@@ -61,11 +61,11 @@ public class ProxyCertInfoTest extends TestCase {
 	dOut.writeObject(info);
 
 	ByteArrayInputStream bIn =
 	    new ByteArrayInputStream(bOut.toByteArray());
 	ASN1InputStream dIn = new ASN1InputStream(bIn);
-	ASN1Primitive obj = dIn.readObject();
+	DERObject obj = dIn.readObject();
 
 	assertTrue(obj instanceof ASN1Sequence);
 
 	ProxyCertInfo testInfo = new ProxyCertInfo((ASN1Sequence)obj);
 
@@ -110,11 +110,11 @@ public class ProxyCertInfoTest extends TestCase {
 	dOut.writeObject(info);
 
 	ByteArrayInputStream bIn =
 	    new ByteArrayInputStream(bOut.toByteArray());
 	ASN1InputStream dIn = new ASN1InputStream(bIn);
-	ASN1Primitive obj = dIn.readObject();
+	DERObject obj = dIn.readObject();
 
 	ProxyCertInfo testInfo = new ProxyCertInfo((ASN1Sequence)obj);
 
 
 	assertEquals(Integer.MAX_VALUE, testInfo.getPathLenConstraint());
-- 
2.4.6

