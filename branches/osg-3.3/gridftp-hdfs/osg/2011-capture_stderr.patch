From 6e18d38b369db2885cb685aa3084ba55c190969a Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Tue, 25 Aug 2015 16:11:39 -0500
Subject: [PATCH] Forward HDFS logging to GridFTP logging.

---
 src/gridftp_hdfs.c | 87 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 87 insertions(+)

Index: gridftp-hdfs-0.5.4/src/gridftp_hdfs.c
===================================================================
--- gridftp-hdfs-0.5.4.orig/src/gridftp_hdfs.c
+++ gridftp-hdfs-0.5.4/src/gridftp_hdfs.c
@@ -28,6 +28,10 @@ char err_msg[MSG_SIZE];
 int local_io_block_size = 0;
 int local_io_count = 0;
 
+static globus_mutex_t g_hdfs_mutex;
+static pthread_t g_thread_id;
+static int g_thread_pipe_fd;
+
 static void hdfs_trev(globus_gfs_event_info_t *, void *);
 inline void set_done(hdfs_handle_t *, globus_result_t);
 static int  hdfs_activate(void);
@@ -138,12 +142,125 @@ gridftp_check_core()
 }
 
 /*
+ * Simple thread target - continuously drain
+ */
+static void *
+hdfs_forward_log(void *user_arg)
+{
+    int *pipe_r = (int *)user_arg;
+    FILE *fpipe = fdopen(*pipe_r, "r");
+    if (!fpipe)
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Unable to reopen forwarding log descriptor at fd %d: (errno=%d, %s)\n", *pipe_r, errno, strerror(errno));
+        return NULL;
+    }
+   globus_gfs_log_message(GLOBUS_GFS_LOG_DUMP, "Starting HDFS log forwarder; messages from HDFS are prefixed with 'HDFS: '\n");
+    char line_buffer[1024];
+    unsigned log_count = 0;
+    while (fgets(line_buffer, 1024, fpipe))
+    {
+        if (!strncmp(line_buffer, "\tat ", 4)) {continue;}
+        else if ((line_buffer[0] == '\0') || (line_buffer[0] == '\n')) {continue;}
+        globus_gfs_log_message(GLOBUS_GFS_LOG_INFO, "HDFS: %s", line_buffer);
+        log_count++;
+    }
+    fclose(fpipe);
+    free(user_arg);
+    if (log_count)
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Stopping HDFS log forwarder; %lu messages forwarded.\n", log_count);
+    }
+    globus_mutex_unlock(&g_hdfs_mutex);
+    return NULL;
+}
+
+/*
+ * Open stderr as a pipe which is continuously drained
+ * via a separate thread (forwarding to the globus logging system).
+ */
+static void
+setup_hdfs_logging()
+{
+    if (globus_mutex_trylock(&g_hdfs_mutex))
+    {
+        // The logging thread has already been initialized.
+        return;
+    }
+
+    char fd2_path[PATH_MAX];
+    ssize_t bytes_in_path;
+    if ((-1 == (bytes_in_path = readlink("/dev/fd/2", fd2_path, PATH_MAX-1))) && (errno != ENOENT) && (errno != EACCES))
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Unable to check /dev/fd/2 as eUID %d (UID %d) to see if it is /dev/null. (errno=%d, %s)\n", geteuid(), getuid(), errno, strerror(errno));
+        globus_mutex_unlock(&g_hdfs_mutex);
+        return;
+    }
+    if (bytes_in_path >= 0) {fd2_path[bytes_in_path] = '\0';}
+    if ((bytes_in_path != -1) && strcmp("/dev/null", fd2_path))
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_DUMP, "stderr does not point to /dev/null; not redirecting HDFS output.\n");
+        globus_mutex_unlock(&g_hdfs_mutex);
+        return;
+    }
+
+    int err;
+    pthread_attr_t attr;
+    if ((err = pthread_attr_init(&attr)))
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Unable to initialize pthread attribute: (errno=%d, %s).\n", err, strerror(err));
+        globus_mutex_unlock(&g_hdfs_mutex);
+        return;
+    }
+
+    int pipe_fds[2];
+    if (-1 == pipe2(pipe_fds, O_CLOEXEC))
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Failed to open pipes for HDFS logging: (errno=%d, %s).\n", errno, strerror(errno));
+        globus_mutex_unlock(&g_hdfs_mutex);
+        return;
+    }
+    if (-1 == dup3(pipe_fds[1], 2, O_CLOEXEC))
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Failed to reopen stderr for HDFS logging: (errno=%d, %s).\n", errno, strerror(errno));
+        globus_mutex_unlock(&g_hdfs_mutex);
+        return;
+    }
+    close(pipe_fds[1]);
+    g_thread_pipe_fd = 2;
+
+    int *pipe_ptr = malloc(sizeof(int));
+    if (pipe_ptr == NULL)
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Failed to allocate pointer for pipe.\n");
+        globus_mutex_unlock(&g_hdfs_mutex);
+        return;
+    }
+    *pipe_ptr = pipe_fds[0];
+    if ((err = pthread_create(&g_thread_id, &attr, hdfs_forward_log, pipe_ptr)))
+    {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Failed to launch thread for monitoring HDFS logging: (errno=%d, %s).\n", errno, strerror(errno));
+        globus_mutex_unlock(&g_hdfs_mutex);
+        free(pipe_ptr);
+        return;
+    }
+
+    
+}
+
+/*
  *  Called when the HDFS module is activated.
- *  Completely boilerplate.
+ *  Initializes the global mutex.
  */
 int
 hdfs_activate(void)
 {
+    if (globus_mutex_init(&g_hdfs_mutex, GLOBUS_NULL)) {
+        globus_gfs_log_message(GLOBUS_GFS_LOG_ERR, "Unable to initialize global mutex");
+        return 1;
+    }
+    g_thread_id = 0;
+    g_thread_pipe_fd = -1;
+
     globus_extension_registry_add(
         GLOBUS_GFS_DSI_REGISTRY,
         "hdfs",
@@ -160,6 +277,23 @@ hdfs_activate(void)
 int
 hdfs_deactivate(void)
 {
+    if (g_thread_id > 0)
+    {
+        if (g_thread_pipe_fd >= 0)
+        {
+            fflush(stderr);
+            close(g_thread_pipe_fd);
+        }
+        void *retval;
+        pthread_join(g_thread_id, &retval);
+        g_thread_id = 0;
+        g_thread_pipe_fd = -1;
+    }
+
+    globus_mutex_destroy(&g_hdfs_mutex);
+    g_thread_id = 0;
+    g_thread_pipe_fd = -1;
+
     globus_extension_registry_remove(
         GLOBUS_GFS_DSI_REGISTRY, "hdfs");
 
@@ -259,7 +393,7 @@ hdfs_command(
     case GLOBUS_GFS_CMD_DELE:
 {
         errno = 0;
-        if (hdfsDelete(hdfs_handle->fs, PathName,0) == -1) {
+        if (hdfsDelete(hdfs_handle->fs, PathName, 0) == -1) {
             if (errno) {
                 result = GlobusGFSErrorSystemError("unlink", errno);
             } else {
@@ -315,6 +449,18 @@ hdfs_command(
         break;
     case GLOBUS_GFS_CMD_DCSC:
         break;
+    case GLOBUS_GFS_CMD_HTTP_PUT:
+    case GLOBUS_GFS_CMD_HTTP_GET:
+    case GLOBUS_GFS_CMD_HTTP_CONFIG:
+    case GLOBUS_GFS_CMD_TRNC:
+    case GLOBUS_GFS_CMD_SITE_TASKID:
+    case GLOBUS_GFS_CMD_SITE_RESTRICT:
+    case GLOBUS_GFS_CMD_SITE_CHROOT:
+    case GLOBUS_GFS_CMD_SITE_SHARING:
+    case GLOBUS_GFS_CMD_UPAS:
+    case GLOBUS_GFS_CMD_UPRT:
+    case GLOBUS_GFS_MIN_CUSTOM_CMD:
+        break;
     }
 
     globus_gridftp_server_finished_command(op, result, return_value);
@@ -437,6 +583,9 @@ hdfs_start(
             snprintf(hdfs_handle->syslog_msg, 255, "%s %s %%s %%i %%i", hdfs_handle->local_host, hdfs_handle->remote_host);
     }
 
+    // Forward the contents of stderr to the globus logging system.
+    setup_hdfs_logging();
+
     // Determine the maximum number of buffers; default to 200.
     char * max_buffer_char = getenv("GRIDFTP_BUFFER_COUNT");
     if (max_buffer_char != NULL) {
@@ -645,5 +794,17 @@ set_close_done(
     if ((hdfs_handle->done_status == GLOBUS_SUCCESS) && (rc != GLOBUS_SUCCESS)) {
         hdfs_handle->done_status = rc;
     }
+    if (g_thread_id > 0)
+    {
+        if (g_thread_pipe_fd >= 0)
+        {
+            fflush(stderr);
+            close(g_thread_pipe_fd);
+        }
+        void *retval;
+        pthread_join(g_thread_id, &retval);
+        g_thread_id = 0;
+        g_thread_pipe_fd = -1;
+    }
 }
 
Index: gridftp-hdfs-0.5.4/src/gridftp_hdfs.h
===================================================================
--- gridftp-hdfs-0.5.4.orig/src/gridftp_hdfs.h
+++ gridftp-hdfs-0.5.4/src/gridftp_hdfs.h
@@ -20,6 +20,10 @@
 #define _GNU_SOURCE
 #endif
 
+#ifndef O_CLOEXEC
+#define O_CLOEXEC 0
+#endif
+
 // Note that we hide all symbols from the global scope except the module itself.
 #pragma GCC visibility push(hidden)
 
