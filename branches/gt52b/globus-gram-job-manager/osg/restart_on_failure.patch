--- globus_gram_job_manager-10.70/globus_gram_job_manager_state.c	2011-08-15 22:04:07.000000000 -0500
+++ globus_gram_job_manager_state.c	2011-08-15 22:12:27.000000000 -0500
@@ -1714,21 +1714,11 @@
       case GLOBUS_GRAM_JOB_MANAGER_STATE_STAGE_OUT:
       case GLOBUS_GRAM_JOB_MANAGER_STATE_TWO_PHASE_END:
       case GLOBUS_GRAM_JOB_MANAGER_STATE_TWO_PHASE_END_COMMITTED:
-        globus_gram_job_manager_request_set_status(request, GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE);
-        request->unsent_status_change = GLOBUS_TRUE;
-        request->jobmanager_state = GLOBUS_GRAM_JOB_MANAGER_STATE_POLL1;
-        changed = GLOBUS_TRUE;
-        break;
       case GLOBUS_GRAM_JOB_MANAGER_STATE_FAILED:
-        globus_gram_job_manager_request_set_status(request, GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED);
-        request->unsent_status_change = GLOBUS_TRUE;
-        request->jobmanager_state = GLOBUS_GRAM_JOB_MANAGER_STATE_POLL1;
-        changed = GLOBUS_TRUE;
-        break;
       case GLOBUS_GRAM_JOB_MANAGER_STATE_FAILED_TWO_PHASE:
-        request->jobmanager_state =
-                GLOBUS_GRAM_JOB_MANAGER_STATE_FAILED_CLOSE_OUTPUT;
+        globus_gram_job_manager_request_set_status(request, GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE);
         request->unsent_status_change = GLOBUS_TRUE;
+        request->jobmanager_state = GLOBUS_GRAM_JOB_MANAGER_STATE_POLL1;
         changed = GLOBUS_TRUE;
         break;
     }
--- _build_results/BUILD/globus_gram_job_manager-10.70/globus_gram_job_manager_request.c	2011-08-17 18:41:21.000000000 -0500
+++ globus_gram_job_manager_request.c	2011-08-17 18:41:07.000000000 -0500
@@ -1042,6 +1042,7 @@
     if (request == NULL)
     {
         /* Reply to a bad request */
+        rc = GLOBUS_GRAM_PROTOCOL_ERROR_INVALID_REQUEST;
         goto bad_request;
     }
     rc = globus_gram_job_manager_add_request(
@@ -2147,6 +2148,7 @@
                 request->job_contact_path,
                 "restart",
                 old_job_request);
+
         if (rc != GLOBUS_SUCCESS)
         {
             /* OK. It's alive, but not our job. Let it be */
@@ -2163,6 +2165,7 @@
         }
         else
         {
+            /* Likely, we return GLOBUS_SUCCESS in this case, the wrong error value */
             rc = globus_gram_job_manager_remove_reference(
                     request->manager,
                     request->job_contact_path,
@@ -2206,16 +2209,6 @@
         globus_rsl_free_recursive(restartcontacts);
     }
 
-    if (restart_contacts == GLOBUS_FALSE)
-    {
-        /* Remove the two-phase commit from the original RSL; if the
-         * new client wants it, they can put it in their RSL
-         */
-        globus_gram_job_manager_rsl_remove_attribute(
-                    original_rsl,
-                    GLOBUS_GRAM_PROTOCOL_TWO_PHASE_COMMIT_PARAM);
-    }
-
     /*
      * Remove stdout_position and stderr_position. We don't do streaming
      * any more, so we will reject any restart where the positions
@@ -2274,6 +2267,18 @@
     globus_rsl_t *                      tmp_rsl;
     globus_rsl_t *                      stdout_position;
     globus_rsl_t *                      stderr_position;
+    globus_rsl_t *                      original_rsl;
+
+    /* TODO: We should almost certainly validate RSL here
+    rc = globus_gram_job_manager_validate_rsl(
+            request,
+            tmp_rsl,
+            GLOBUS_GRAM_VALIDATE_STDIO_UPDATE);
+    if(rc != GLOBUS_SUCCESS)
+    {
+        goto parse_original_rsl_failed;
+    }
+    */
 
     /*
      * Remove stdout_position and stderr_position. We don't do streaming
@@ -2296,8 +2301,16 @@
         globus_rsl_free_recursive(stderr_position);
     }
 
+    original_rsl = globus_rsl_parse(request->rsl_spec);
+    if (!original_rsl)
+    {           
+        rc = GLOBUS_GRAM_PROTOCOL_ERROR_BAD_RSL;
+        goto parse_original_rsl_failed;
+    }           
+
+    /* TODO: it appears tmp_rsl leaks if a failure occurs */
     tmp_rsl = globus_gram_job_manager_rsl_merge(
-        request->rsl,
+        original_rsl,
         update_rsl);
 
     if (tmp_rsl == GLOBUS_NULL)
@@ -2305,7 +2318,49 @@
         rc = GLOBUS_GRAM_PROTOCOL_ERROR_BAD_RSL;
         goto failed_rsl_merge;
     }
+
+    /* The update_rsl, for job restarts, contains a "restartcontacts"
+     * attribute.  This must be removed from the merged RSL prior to
+     * saving it to disk; otherwise, it will cause submits to choke.
+     * TODO: There should be a smarter way to do this with RSL validation.
+     */
+    if (globus_gram_job_manager_rsl_remove_attribute(tmp_rsl, "restartcontacts"))
+    {
+        rc = GLOBUS_GRAM_PROTOCOL_ERROR_BAD_RSL;
+        goto failed_rsl_merge;
+    }
+
+    char * tmp_rsl_spec;
+    if (!(tmp_rsl_spec = globus_rsl_unparse(tmp_rsl))) {
+        rc = GLOBUS_GRAM_PROTOCOL_ERROR_BAD_RSL;
+        goto failed_rsl_merge;
+    }
+
+    rc = globus_rsl_eval(tmp_rsl, &request->symbol_table);
+    if(rc != GLOBUS_SUCCESS)
+    {   
+        rc = GLOBUS_GRAM_PROTOCOL_ERROR_RSL_EVALUATION_FAILED;
+        goto failed_rsl_merge;
+    }
+    rc = globus_gram_job_manager_validate_rsl(
+            request,
+            tmp_rsl,
+            GLOBUS_GRAM_VALIDATE_JOB_SUBMIT);
+    if(rc != GLOBUS_SUCCESS)
+    {
+        goto failed_rsl_merge;
+    }
+    rc = globus_rsl_eval(tmp_rsl, &request->symbol_table);
+    if(rc != GLOBUS_SUCCESS)
+    {
+        rc = GLOBUS_GRAM_PROTOCOL_ERROR_RSL_EVALUATION_FAILED;
+        goto failed_rsl_merge;
+    }
+
+    globus_rsl_free_recursive(request->rsl);
     request->rsl = tmp_rsl;
+    free(request->rsl_spec);
+    request->rsl_spec = tmp_rsl_spec;
 
     rc = globus_gram_job_manager_streaming_list_replace(request);
     if (rc != GLOBUS_SUCCESS)
@@ -2350,12 +2405,53 @@
         rc = globus_i_gram_remote_io_url_update(request);
     }
 
+    /*
+    globus_gram_job_manager_request_log(
+            request,
+            GLOBUS_GRAM_JOB_MANAGER_LOG_TRACE,
+            "event=gram.stdio_update.info "
+                "level=TRACE "
+                "gramid=%s "
+                "orig_rsl_spec=%s "
+                "rsl_spec=%s\n",
+                request->job_contact_path,
+                globus_rsl_unparse(original_rsl),
+                globus_rsl_unparse(request->rsl));
+    */
+
+    /* Now that we've recreated the stdio, redo the staging list. */
+    request->stage_in_todo = NULL;
+    request->stage_in_shared_todo = NULL;
+    request->stage_out_todo = NULL;
+    request->stage_stream_todo = NULL;
+    rc = globus_gram_job_manager_staging_create_list(request);
+    if (rc != GLOBUS_SUCCESS) {
+        globus_gram_job_manager_request_log(
+                        request,
+                        GLOBUS_GRAM_JOB_MANAGER_LOG_ERROR,
+                        "event=gram.restart.info "
+                        "level=ERROR "
+                        "gramid=%s "
+                        "status=%d "
+                        "msg=\"%s\" "
+                        "reason=\"%s\" "
+                        "\n",
+                        request->job_contact_path,
+                        -rc,
+                        "Unable to recreate staging list",
+                        globus_gram_protocol_error_string(rc));
+        goto staging_list_replace_failed;
+    }
 
     globus_gram_job_manager_state_file_write(request);
 
-staging_list_replace_failed:
 get_remote_io_url_failed:
+staging_list_replace_failed:
 failed_rsl_merge:
+    if (original_rsl) {
+        globus_rsl_free_recursive(original_rsl);
+    }
+parse_original_rsl_failed:
     return rc;
 }
 /* globus_i_gram_request_stdio_update() */
