From 037a8ad43dda99b1a9db7d75c961472d4f3a7b78 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Sat, 29 Mar 2025 09:23:55 -0500
Subject: [PATCH 5/7] Since the `XrdPss` did not implement the auto-stat
 protocol (i.e., implemented the `StatRet` virtual function in `XrdOssDF`),
 the xrootd protocol handler does a directory listing followed by a `stat` for
 each entry.  This would cause failures for `XrdPfc` since stat'ing a
 subdirectory entry fails with:

```
Unable to locate <subdir name>; is a directory
```

but only if a file is cached in that subdirectory.  This results in
a strange user experience where

```
curl http://cache.example.com/dir
```

succeeds at first but, if you download an object in the subdirectory,

```
curl http://cache.example.com/dir/subdir/foo.txt
```

then the directory listing of `/dir` fails.

Luckily, since XrdCl returns sufficient information to always do the
auto-stat, this is not only an optimization in the proxy but also
serves as a bugfix.
---
 src/XrdPosix/XrdPosixDir.cc    | 19 +++++++++++++++++-
 src/XrdPosix/XrdPosixDir.hh    |  9 ++++++++-
 src/XrdPosix/XrdPosixMap.cc    | 35 ++++++++++++++++++++++++++++++++++
 src/XrdPosix/XrdPosixMap.hh    |  5 +++++
 src/XrdPosix/XrdPosixXrootd.cc | 16 ++++++++++++++++
 src/XrdPosix/XrdPosixXrootd.hh | 13 +++++++++++++
 src/XrdPss/XrdPss.cc           | 12 ++++++++++++
 src/XrdPss/XrdPss.hh           |  7 +++++++
 8 files changed, 114 insertions(+), 2 deletions(-)

diff --git a/src/XrdPosix/XrdPosixDir.cc b/src/XrdPosix/XrdPosixDir.cc
index 886d0d95b..3dde153b8 100644
--- a/src/XrdPosix/XrdPosixDir.cc
+++ b/src/XrdPosix/XrdPosixDir.cc
@@ -83,10 +83,27 @@ dirent64 *XrdPosixDir::nextEntry(dirent64 *dp)
    dp->d_reclen = d_nlen + dirhdrln;
    strncpy(dp->d_name, d_name, d_nlen);
    dp->d_name[d_nlen] = '\0';
+
+   // Note we fail if the stat info is needed but not available
+   int rc;
+   if (myBuf && (rc = XrdPosixMap::Entry2Buf(*dirEnt, *myBuf)))
+      {eNum = rc;
+       ecMsg.SetErrno(eNum);
+       dp = nullptr;
+      }
    nxtEnt++;
    return dp;
 }
-  
+
+/******************************************************************************/
+/*                               S t a t R e t                                */
+/******************************************************************************/
+int XrdPosixDir::StatRet(struct stat *buf)
+{
+   myBuf = buf;
+   return 0;
+}
+
 /******************************************************************************/
 /*                                  O p e n                                   */
 /******************************************************************************/
diff --git a/src/XrdPosix/XrdPosixDir.hh b/src/XrdPosix/XrdPosixDir.hh
index be1daee55..bd7012f81 100644
--- a/src/XrdPosix/XrdPosixDir.hh
+++ b/src/XrdPosix/XrdPosixDir.hh
@@ -40,17 +40,18 @@
 #endif
 
 #include <unistd.h>
+#include <sys/stat.h>
 #include <sys/types.h>
 
 #include "XrdPosix/XrdPosixAdmin.hh"
 #include "XrdPosix/XrdPosixObject.hh"
 
 class XrdPosixDir : public XrdPosixObject
 {
 public:
                    XrdPosixDir(const char *path)
                               : DAdmin(path,ecMsg), myDirVec(0), myDirEnt(0),
-                                nxtEnt(0), numEnt(0), eNum(0)
+                                myBuf(nullptr), nxtEnt(0), numEnt(0), eNum(0)
                               {}
 
                   ~XrdPosixDir() {delete myDirVec;
@@ -69,6 +70,11 @@ static int         dirNo(DIR *dirP)  {return *(int *)dirP;}
 
        DIR        *Open();
 
+       // Return the stat info corresponding to the current directory entry
+       // On error, returns -errno; otherwise, returns 0 and stores a reference
+       // to buf internally
+       int         StatRet(struct stat *buf);
+
        void        rewind() {objMutex.WriteLock();
                              nxtEnt = 0; delete myDirVec; myDirVec = 0;
                              objMutex.UnLock();
@@ -87,6 +93,7 @@ static const size_t maxDlen = 256;
   XrdPosixAdmin         DAdmin;
   XrdCl::DirectoryList *myDirVec;
   dirent64             *myDirEnt;
+  struct stat          *myBuf;
   uint32_t              nxtEnt;
   uint32_t              numEnt;
   int                   eNum;
diff --git a/src/XrdPosix/XrdPosixMap.cc b/src/XrdPosix/XrdPosixMap.cc
index ec8caed29..ad065ce1d 100644
--- a/src/XrdPosix/XrdPosixMap.cc
+++ b/src/XrdPosix/XrdPosixMap.cc
@@ -80,6 +80,41 @@ mode_t XrdPosixMap::Flags2Mode(dev_t *rdv, uint32_t flags)
 
    return newflags;
 }
+
+/******************************************************************************/
+/*                             S t a t F i l l                                */
+/******************************************************************************/
+
+int XrdPosixMap::Entry2Buf(const XrdCl::DirectoryList::ListEntry &dirEnt, struct stat &buf)
+{
+   auto statInfo = dirEnt.GetStatInfo();
+   if (!statInfo) return EIO;
+
+   memset(&buf, '\0', sizeof(buf));
+   buf.st_mode   = XrdPosixMap::Flags2Mode(nullptr, statInfo->GetFlags());
+   // Since the UID/GID isn't known by the client, when these are translated by
+   // XrdXrootdProtocol::StatGen back to xrootd protocol flags, they will get zero'd
+   // out if only the user access mode is set (e.g., S_IRUSR).  Therefor, upgrade the
+   // access mode in the mapping to "other" as well (e.g., S_ROTH).  This way, the
+   // computed mode is the same for both the origin and the cache
+   if (buf.st_mode & S_IRUSR) buf.st_mode |= S_IROTH;
+   if (buf.st_mode & S_IWUSR) buf.st_mode |= S_IWOTH;
+   if (buf.st_mode & S_IXUSR) buf.st_mode |= S_IXOTH;
+   buf.st_mtime  = static_cast<time_t>(statInfo->GetModTime());
+   buf.st_ctime  = buf.st_mtime;
+   buf.st_size   = static_cast<size_t>(statInfo->GetSize());
+   buf.st_ino    = static_cast<ino_t>(strtoll(statInfo->GetId().c_str(), 0, 10));
+   buf.st_blocks = buf.st_size/512 + buf.st_size%512;
+   // If the device is zero'd out, then the listing later is translated to being offline
+   buf.st_dev    = 1;
+
+   if (statInfo->ExtendedFormat())
+      {buf.st_ctime = static_cast<time_t>(statInfo->GetChangeTime());
+       buf.st_atime = static_cast<time_t>(statInfo->GetAccessTime());
+      }
+
+   return 0;
+}
   
 /******************************************************************************/
 /* Private:                      m a p C o d e                                */
diff --git a/src/XrdPosix/XrdPosixMap.hh b/src/XrdPosix/XrdPosixMap.hh
index 2884e45ed..c6df7ce54 100644
--- a/src/XrdPosix/XrdPosixMap.hh
+++ b/src/XrdPosix/XrdPosixMap.hh
@@ -35,16 +35,21 @@
 #include "XrdCl/XrdClXRootDResponses.hh"
 
 #include <cstdint>
+#include <sys/stat.h>
 #include <sys/types.h>
 
 class XrdOucECMsg;
 
 class XrdPosixMap
 {
 public:
 
 static mode_t              Flags2Mode(dev_t *rdv, uint32_t flags);
 
+// Convert a directory entry from the XrdCl to the OS's stat.
+// Will return non-zero (EIO) if the directory entry does not include any StatInfo.
+static int                 Entry2Buf(const XrdCl::DirectoryList::ListEntry &dirEnt, struct stat &buf);
+
 static XrdCl::Access::Mode Mode2Access(mode_t mode);
 
 static int                 Result(const XrdCl::XRootDStatus &Status,
diff --git a/src/XrdPosix/XrdPosixXrootd.cc b/src/XrdPosix/XrdPosixXrootd.cc
index aeef3b760..eb6ee936d 100644
--- a/src/XrdPosix/XrdPosixXrootd.cc
+++ b/src/XrdPosix/XrdPosixXrootd.cc
@@ -1060,6 +1060,22 @@ int XrdPosixXrootd::Readdir64_r(DIR *dirp, struct dirent64  *entry,
    return rc;
 }
 
+int XrdPosixXrootd::StatRet(DIR *dirp, struct stat *buf)
+{
+
+// Find the object
+//
+   auto fildes = XrdPosixDir::dirNo(dirp);
+   auto dP = XrdPosixObject::Dir(fildes);
+   if (!dP) return EBADF;
+
+// Get the stat info
+   auto rc = dP->StatRet(buf);
+
+   dP->UnLock();
+   return rc;
+}
+
 /******************************************************************************/
 /*                                R e n a m e                                 */
 /******************************************************************************/
diff --git a/src/XrdPosix/XrdPosixXrootd.hh b/src/XrdPosix/XrdPosixXrootd.hh
index bcf9e0123..47f07510e 100644
--- a/src/XrdPosix/XrdPosixXrootd.hh
+++ b/src/XrdPosix/XrdPosixXrootd.hh
@@ -374,6 +374,19 @@ static bool    isXrootdDir(DIR *dirp);
 
 static bool    myFD(int fd);
 
+// The XRootD client will fetch the information needed for a full `stat` call
+// as part of the directory listing.  By calling this function from XrdPss
+// layer, we enable the use of the `autoStat` functionality, which avoids
+// having to call `stat` for each entry in the directory listing.
+//
+// On error, returns errno; on success, returns 0 and stores the buffer
+// internally; on subsequent Readdir calls, the `buf` contents are filled in
+// as if one called `fstatat` on it.
+//
+// Note that this matches other XrdPosixXrootd methods in returning errno on
+// failure; this differs from the similar XrdOss method which returns -errno.
+static int     StatRet(DIR *dirp, struct stat *buf);
+
 /* There must be one instance of this object per executable image. Typically,
    this object is declared in main() or at file level. This is necessary to
    properly do one-time initialization of the static members. When declaring
diff --git a/src/XrdPss/XrdPss.cc b/src/XrdPss/XrdPss.cc
index bd5d84a7a..b39df7d2c 100644
--- a/src/XrdPss/XrdPss.cc
+++ b/src/XrdPss/XrdPss.cc
@@ -722,6 +722,18 @@ int XrdPssDir::Readdir(char *buff, int blen)
    return -XRDOSS_E8002;
 }
 
+/******************************************************************************/
+/*                               S t a t R e t                                */
+/******************************************************************************/
+int XrdPssDir::StatRet(struct stat *buff)
+{
+   if (!myDir) return -XRDOSS_E8002;
+
+   auto rc = XrdPosixXrootd::StatRet(myDir, buff);
+   if (rc) return -rc;
+   return XrdOssOK;
+}
+
 /******************************************************************************/
 /*                                 C l o s e                                  */
 /******************************************************************************/
diff --git a/src/XrdPss/XrdPss.hh b/src/XrdPss/XrdPss.hh
index c57eca0fc..2ad5f3650 100644
--- a/src/XrdPss/XrdPss.hh
+++ b/src/XrdPss/XrdPss.hh
@@ -53,6 +53,13 @@ int     Close(long long *retsz=0);
 int     Opendir(const char *, XrdOucEnv &);
 int     Readdir(char *buff, int blen);
 
+// Store the `buf` pointer in the directory object.  Future calls to `Readdir`
+// will, as a side-effect, fill in the corresponding `stat` information in
+// the memory referred to from the pointer.
+//
+// Returns -errno on failure; otherwise, returns 0 and stashes away the pointer.
+int     StatRet(struct stat *buf);
+
         // Constructor and destructor
         XrdPssDir(const char *tid)
                  : XrdOssDF(tid, XrdOssDF::DF_isDir|XrdOssDF::DF_isProxy),
-- 
2.43.5

