From 10f5ec39162d8a2b58673bbc369182c73b135ac7 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Thu, 15 May 2025 08:27:43 -0500
Subject: [PATCH 10/10] Correct concurrency and state tracking around
 `Redrive`.

---
 src/XrdXrootd/XrdXrootdTransit.cc | 59 ++++++++++---------------------
 src/XrdXrootd/XrdXrootdTransit.hh |  8 ++++-
 2 files changed, 25 insertions(+), 42 deletions(-)

diff --git a/src/XrdXrootd/XrdXrootdTransit.cc b/src/XrdXrootd/XrdXrootdTransit.cc
index 3ecec22aa..ba1a308b0 100644
--- a/src/XrdXrootd/XrdXrootdTransit.cc
+++ b/src/XrdXrootd/XrdXrootdTransit.cc
@@ -141,11 +141,7 @@ int XrdXrootdTransit::AttnCont(XrdXrootdTransPend *tP,  int rcode,
 // Handle end based on current state
 //
    if (rc >= 0 && !runWait)
-      {if (runDone)
-          {AtomicBeg(runMutex);
-           AtomicZAP(runStatus);
-           AtomicEnd(runMutex);
-          }
+      {if (runDone) runStatus.store(0, std::memory_order_release);
        if (reInvoke) Sched->Schedule((XrdJob *)&respJob);
            else Link->Enable();
       }
@@ -162,14 +158,10 @@ int XrdXrootdTransit::AttnCont(XrdXrootdTransPend *tP,  int rcode,
 bool XrdXrootdTransit::Disc()
 {
    char buff[128];
-   int rc;
 
 // We do not allow disconnection while we are active
 //
-   AtomicBeg(runMutex);
-   rc = AtomicInc(runStatus);
-   AtomicEnd(runMutex);
-   if (rc) return false;
+   if (runStatus.fetch_add(1, std::memory_order_acq_rel)) return false;
 
 // Reconnect original protocol to the link
 //
@@ -238,7 +230,7 @@ void XrdXrootdTransit::Init(XrdXrootd::Bridge::Result *respP, // Private
    runALen   = 0;
    runABsz   = 0;
    runError  = 0;
-   runStatus = 0;
+   runStatus.store(0, std::memory_order_release);
    runWait   = 0;
    runWTot   = 0;
    runWMax   = 3600;
@@ -368,29 +360,23 @@ int XrdXrootdTransit::Process(XrdLink *lp)
 // called we need to dispatch that request. This may be iterative.
 //
 do{rc = realProt->Process((reInvoke ? 0 : lp));
-   if (rc >= 0 && runStatus)
+   if (rc >= 0 && runStatus.load(std::memory_order_acquire))
       {reInvoke = (rc == 0);
        if (runError) rc = Fatal(rc);
           else {runDone = false;
                 rc = (Resume ? XrdXrootdProtocol::Process(lp) : Process2());
                 if (rc >= 0)
                    {if (runWait) rc = -EINPROGRESS;
                     if (!runDone) return rc;
-                    AtomicBeg(runMutex);
-                    AtomicZAP(runStatus);
-                    AtomicEnd(runMutex);
+                    runStatus.store(0, std::memory_order_release);
                    }
                }
       } else reInvoke = false;
    } while(rc >= 0 && reInvoke);
 
 // Make sure that we indicate that we are no longer active
 //
-   if (runStatus)
-      {AtomicBeg(runMutex);
-       AtomicZAP(runStatus);
-       AtomicEnd(runMutex);
-      }
+   runStatus.store(0, std::memory_order_release);
 
 // All done
 //
@@ -406,15 +392,16 @@ void XrdXrootdTransit::Recycle(XrdLink *lp, int consec, const char *reason)
 
 // Set ourselves as active so we can't get more requests
 //
-   AtomicBeg(runMutex);
-   AtomicInc(runStatus);
-   AtomicEnd(runMutex);
+   runStatus.fetch_add(1, std::memory_order_acq_rel);
 
 // If we were active then we will need to quiesce before dismantling ourselves.
 // Note that Recycle() can only be called if the link is enabled. So, this bit
 // of code is improbable but we check it anyway.
 //
-   if (runWait > 0) Sched->Cancel(&waitJob);
+   if (runWait > 0) {
+       TRACEP(EMSG, "WARNING: Recycle is canceling wait job; the wait job might already be running during recycle.");
+       Sched->Cancel(&waitJob);
+   }
 
 // First we need to recycle the real protocol
 //
@@ -451,7 +438,8 @@ void XrdXrootdTransit::Redrive()
 
 // Do some tracing
 //
-   TRACEP(REQ, "Bridge redrive runStatus="<<runStatus<<" runError="<<runError
+   TRACEP(REQ, "Bridge redrive runStatus="<<runStatus.load(std::memory_order_acquire)
+               <<" runError="<<runError
                <<" runWait="<<runWait<<" runWTot="<<runWTot);
 
 // Update wait statistics
@@ -475,29 +463,20 @@ void XrdXrootdTransit::Redrive()
         if (rc == 0 && !runWait && !runError) {
           rc = realProt->Process(NULL);
           TRACEP(REQ, "Bridge redrive callback rc="<<rc
-                      <<" runStatus="<<runStatus);
+                      <<" runStatus="<<runStatus.load(std::memory_order_acquire));
         }
-        if (runStatus)
-           {AtomicBeg(runMutex);
-            AtomicZAP(runStatus);
-            AtomicEnd(runMutex);
-           }
       } while((rc == 0) && !runError && !runWait);
    }
       else rc = Send(kXR_error, ioV, 2, 0);
 
 // Defer the request if need be
 //
    if (rc >= 0 && runWait) return;
    runWTot = 0;
 
 // Indicate we are no longer active
 //
-   if (runStatus)
-      {AtomicBeg(runMutex);
-       AtomicZAP(runStatus);
-       AtomicEnd(runMutex);
-      }
+   runStatus.store(0, std::memory_order_release);
 
 // If the link needs to be terminated, terminate the link. Otherwise, we can
 // enable the link for new requests at this point.
@@ -578,15 +557,13 @@ bool XrdXrootdTransit::ReqWrite(char *xdataP, int xdataL)
   
 bool XrdXrootdTransit::Run(const char *xreqP, char *xdataP, int xdataL)
 {
-   int movLen, rc;
+   int movLen;
 
 // We do not allow re-entry if we are curently processing a request.
 // It will be reset, as need, when a response is effected.
 //
-   AtomicBeg(runMutex);
-   rc = AtomicInc(runStatus);
-   AtomicEnd(runMutex);
-   if (rc)
+
+   if (runStatus.fetch_add(1, std::memory_order_acq_rel))
       {TRACEP(REQ, "Bridge request failed due to re-entry");
        return false;
       }
diff --git a/src/XrdXrootd/XrdXrootdTransit.hh b/src/XrdXrootd/XrdXrootdTransit.hh
index 33bb4bc66..bc449f4e2 100644
--- a/src/XrdXrootd/XrdXrootdTransit.hh
+++ b/src/XrdXrootd/XrdXrootdTransit.hh
@@ -38,6 +38,8 @@
 
 #include "Xrd/XrdObject.hh"
 
+#include <atomic>
+
 //-----------------------------------------------------------------------------
 //! Transit
 //!
@@ -206,7 +208,11 @@ char                        *runArgs;
 int                          runALen;
 int                          runABsz;
 int                          runError;
-int                          runStatus;
+
+ // Set to 1 if there is a xroot request to the bridge; 0 otherwise.  Used to prevent multiple
+ // active requests from going on at once for a given link - or for disconnecting while a
+ // request is ongoing.
+std::atomic<int>             runStatus;
 int                          runWait;
 int                          runWTot;
 int                          runWMax;
-- 
2.43.5

