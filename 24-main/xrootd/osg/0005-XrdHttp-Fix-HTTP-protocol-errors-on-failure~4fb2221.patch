From bc7f43a1014ea3d53ed0cb46e0f092edec341548 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Sat, 29 Mar 2025 09:29:24 -0500
Subject: [PATCH 05/10] [XrdHttp] Fix HTTP protocol errors on failure

---
 src/XrdHttp/XrdHttpReq.cc         | 98 +++++++++++++++++++++----------
 src/XrdHttp/XrdHttpReq.hh         | 11 +++-
 tests/CMakeLists.txt              |  1 +
 tests/XRootD/common.cfg           |  1 +
 tests/XRootD/http.sh              | 17 ++++++
 tests/XRootD/test.sh              |  6 ++
 tests/XrdOssTests/CMakeLists.txt  | 12 ++++
 tests/XrdOssTests/xrdoss_tests.cc | 71 ++++++++++++++++++++++
 8 files changed, 183 insertions(+), 34 deletions(-)
 create mode 100644 tests/XrdOssTests/CMakeLists.txt
 create mode 100644 tests/XrdOssTests/xrdoss_tests.cc

diff --git a/src/XrdHttp/XrdHttpReq.cc b/src/XrdHttp/XrdHttpReq.cc
index 6e94eb72d..0b7811b38 100644
--- a/src/XrdHttp/XrdHttpReq.cc
+++ b/src/XrdHttp/XrdHttpReq.cc
@@ -524,15 +524,18 @@ bool XrdHttpReq::Error(XrdXrootd::Bridge::Context &info, //!< the result context
     free(s);
   }
 
-  if (PostProcessHTTPReq()) reset();
+  auto rc = PostProcessHTTPReq();
+  if (rc) {
+    reset();
+  }
 
   // If we are servicing a GET on a directory, it'll generate an error for the default
   // OSS (we don't assume this is always true).  Catch and suppress the error so we can instead
   // generate a directory listing (if configured).
   if ((request == rtGET) && (xrdreq.header.requestid == ntohs(kXR_open)) && (xrderrcode == kXR_isDirectory))
     return true;
   
-  return false;
+  return rc == 0 ? true : false;
 };
 
 bool XrdHttpReq::Redir(XrdXrootd::Bridge::Context &info, //!< the result context
@@ -1188,8 +1191,7 @@ int XrdHttpReq::ProcessHTTPReq() {
 
             if (!prot->Bridge->Run((char *) &xrdreq, 0, 0)) {
               mapXrdErrorToHttpStatus();
-              sendFooterError("Could not run close request on the bridge");
-              return -1;
+              return sendFooterError("Could not run close request on the bridge");
             }
             return 0;
           } else {
@@ -1230,8 +1232,7 @@ int XrdHttpReq::ProcessHTTPReq() {
             if (!prot->Bridge->Run((char *) &xrdreq, (char *) res.c_str(), l)) {
               mapXrdErrorToHttpStatus();
               prot->SendSimpleResp(httpStatusCode, NULL, NULL, httpStatusText.c_str(), httpStatusText.length(), false);
-              sendFooterError("Could not run listing request on the bridge");
-              return -1;
+              return sendFooterError("Could not run listing request on the bridge");
             }
 
             // We don't want to be invoked again after this request is finished
@@ -1256,7 +1257,7 @@ int XrdHttpReq::ProcessHTTPReq() {
           // Close() if we have finished, otherwise read the next chunk
 
           // --------- CLOSE
-          if ( readChunkList.empty() )
+          if ( closeAfterError || readChunkList.empty() )
           {
 
             memset(&xrdreq, 0, sizeof (ClientRequest));
@@ -1326,24 +1327,21 @@ int XrdHttpReq::ProcessHTTPReq() {
               httpStatusText = "Range Not Satisfiable";
               std::stringstream ss;
               ss << "Requested range " << l << "@" << offs << " is past the end of file (" << filesize << ")";
-              sendFooterError(ss.str());
-              return -1;
+              return sendFooterError(ss.str());
             }
             
             if (!prot->Bridge->Run((char *) &xrdreq, 0, 0)) {
               mapXrdErrorToHttpStatus();
-              sendFooterError("Could not run read request on the bridge");
-              return -1;
+              return sendFooterError("Could not run read request on the bridge");
             }
           } else {
             // --------- READV
 
             length = ReqReadV(readChunkList);
 
             if (!prot->Bridge->Run((char *) &xrdreq, (char *) &ralist[0], length)) {
               mapXrdErrorToHttpStatus();
-              sendFooterError("Could not run ReadV request on the bridge");
-              return -1;
+              return sendFooterError("Could not run ReadV request on the bridge");
             }
 
           }
@@ -1480,8 +1478,7 @@ int XrdHttpReq::ProcessHTTPReq() {
             TRACEI(REQ, "XrdHTTP PUT: Writing chunk of size " << bytes_to_write << " starting with '" << *(prot->myBuffStart) << "'" << " with " << chunk_bytes_remaining << " bytes remaining in the chunk");
             if (!prot->Bridge->Run((char *) &xrdreq, prot->myBuffStart, bytes_to_write)) {
               mapXrdErrorToHttpStatus();
-              sendFooterError("Could not run write request on the bridge");
-              return -1;
+              return sendFooterError("Could not run write request on the bridge");
             }
             // If there are more bytes in the buffer, then immediately call us after the
             // write is finished; otherwise, wait for data.
@@ -1504,8 +1501,7 @@ int XrdHttpReq::ProcessHTTPReq() {
           TRACEI(REQ, "Writing " << bytes_to_read);
           if (!prot->Bridge->Run((char *) &xrdreq, prot->myBuffStart, bytes_to_read)) {
             mapXrdErrorToHttpStatus();
-            sendFooterError("Could not run write request on the bridge");
-            return -1;
+            return sendFooterError("Could not run write request on the bridge");
           }
 
           if (writtenbytes + prot->BuffUsed() >= length)
@@ -1528,8 +1524,7 @@ int XrdHttpReq::ProcessHTTPReq() {
 
           if (!prot->Bridge->Run((char *) &xrdreq, 0, 0)) {
             mapXrdErrorToHttpStatus();
-            sendFooterError("Could not run close request on the bridge");
-            return -1;
+            return sendFooterError("Could not run close request on the bridge");
           }
 
           // We have finished
@@ -2051,6 +2046,7 @@ XrdHttpReq::ReturnGetHeaders() {
     // Full file.
     TRACEI(REQ, "Sending full file: " << filesize);
     if (m_transfer_encoding_chunked && m_trailer_headers) {
+      setTransferStatusHeader(responseHeader);
       prot->StartChunkedResp(200, NULL, responseHeader.empty() ? NULL : responseHeader.c_str(), -1, keepalive);
     } else {
       prot->SendSimpleResp(200, NULL, responseHeader.empty() ? NULL : responseHeader.c_str(), NULL, filesize, keepalive);
@@ -2068,18 +2064,19 @@ XrdHttpReq::ReturnGetHeaders() {
     char buf[64];
     const off_t cnt = uranges[0].end - uranges[0].start + 1;
 
-    XrdOucString s = "Content-Range: bytes ";
+    std::string header = "Content-Range: bytes ";
     sprintf(buf, "%lld-%lld/%lld", (long long int)uranges[0].start, (long long int)uranges[0].end, filesize);
-    s += buf;
+    header += buf;
     if (!responseHeader.empty()) {
-      s += "\r\n";
-      s += responseHeader.c_str();
+      header += "\r\n";
+      header += responseHeader.c_str();
     }
 
     if (m_transfer_encoding_chunked && m_trailer_headers) {
-      prot->StartChunkedResp(206, NULL, (char *)s.c_str(), -1, keepalive);
+      setTransferStatusHeader(header);
+      prot->StartChunkedResp(206, NULL, header.empty() ? nullptr : header.c_str(), -1, keepalive);
     } else {
-      prot->SendSimpleResp(206, NULL, (char *)s.c_str(), NULL, cnt, keepalive);
+      prot->SendSimpleResp(206, NULL, header.empty() ? nullptr : header.c_str(), NULL, cnt, keepalive);
     }
     return 0;
   }
@@ -2109,13 +2106,24 @@ XrdHttpReq::ReturnGetHeaders() {
   }
 
   if (m_transfer_encoding_chunked && m_trailer_headers) {
+    setTransferStatusHeader(header);
     prot->StartChunkedResp(206, NULL, header.c_str(), -1, keepalive);
   } else {
     prot->SendSimpleResp(206, NULL, header.c_str(), NULL, cnt, keepalive);
   }
   return 0;
 }
 
+void XrdHttpReq::setTransferStatusHeader(std::string &header) {
+  if (m_status_trailer) {
+    if (header.empty()) {
+      header += "Trailer: X-Transfer-Status";
+    } else {
+      header += "\r\nTrailer: X-Transfer-Status";
+    }
+  }
+}
+
 // This is invoked by the callbacks, after something has happened in the bridge
 
 int XrdHttpReq::PostProcessHTTPReq(bool final_) {
@@ -2284,6 +2292,13 @@ int XrdHttpReq::PostProcessHTTPReq(bool final_) {
           // If we are postprocessing a close, potentially send out informational trailers
           if ((ntohs(xrdreq.header.requestid) == kXR_close) || readClosing)
           {
+            // If we already sent out an error, then we cannot send any further
+            // messages
+            if (closeAfterError) {
+              TRACEI(REQ, "Close was completed after an error: " << xrdresp);
+              return xrdresp != kXR_ok ? -1 : 1;
+            }
+
             const XrdHttpReadRangeHandler::Error &rrerror = readRangeHandler.getError();
             if (rrerror) {
               httpStatusCode = rrerror.httpRetCode;
@@ -2313,7 +2328,11 @@ int XrdHttpReq::PostProcessHTTPReq(bool final_) {
           // On error, we can only send out a message if trailers are enabled and the
           // status response in trailer behavior is requested.
           if (xrdresp == kXR_error) {
-            sendFooterError("");
+            auto rc = sendFooterError("");
+            if (rc == 1) {
+              closeAfterError = true;
+              return 0;
+            }
             return -1;
           }
 
@@ -2744,33 +2763,47 @@ int XrdHttpReq::PostProcessHTTPReq(bool final_) {
   return 0;
 }
 
-void
+int
 XrdHttpReq::sendFooterError(const std::string &extra_text) {
   if (m_transfer_encoding_chunked && m_trailer_headers && m_status_trailer) {
     // A trailer header is appropriate in this case; this is signified by
     // a chunk with size zero, then the trailer, then a crlf.
     //
     // We only send the status trailer when explicitly requested; otherwise a
     // "normal" HTTP client might simply see a short response and think it's a
     // success
 
     if (prot->ChunkRespHeader(0))
-      return;
+      return -1;
 
     std::stringstream ss;
-    ss << httpStatusCode << ": " << httpStatusText;
+    ss << httpStatusCode;
+    if (!httpStatusText.empty()) {
+      std::string_view statusView(httpStatusText);
+      // Remove trailing newline; this is not valid in a trailer value
+      // and causes incorrect framing of the response, confusing clients.
+      if (statusView[statusView.size() - 1] == '\n') {
+        ss << ": " << statusView.substr(0, statusView.size() - 1);
+      } else {
+        ss << ": " << httpStatusText;
+      }
+    }
     if (!extra_text.empty())
       ss << ": " << extra_text;
     TRACEI(REQ, ss.str());
     ss << "\r\n";
 
     const auto header = "X-Transfer-Status: " + ss.str();
     if (prot->SendData(header.c_str(), header.size()))
-      return;
+      return -1;
 
-    prot->ChunkRespFooter();
+    if (prot->ChunkRespFooter())
+      return -1;
+
+    return keepalive ? 1 : -1;
   } else {
-    TRACEI(REQ, httpStatusCode << ": " << httpStatusText << (extra_text.empty() ? "" : (": " + extra_text)));
+    TRACEI(REQ, "Failure during response: " << httpStatusCode << ": " << httpStatusText << (extra_text.empty() ? "" : (": " + extra_text)));
+    return -1;
   }
 }
 
@@ -2786,6 +2819,7 @@ void XrdHttpReq::reset() {
   //if (xmlbody) xmlFreeDoc(xmlbody);
   readRangeHandler.reset();
   readClosing = false;
+  closeAfterError = false;
   writtenbytes = 0;
   etext.clear();
   redirdest = "";
diff --git a/src/XrdHttp/XrdHttpReq.hh b/src/XrdHttp/XrdHttpReq.hh
index 99fa05516..72dd805fe 100644
--- a/src/XrdHttp/XrdHttpReq.hh
+++ b/src/XrdHttp/XrdHttpReq.hh
@@ -145,7 +145,7 @@ class XrdHttpReq : public XrdXrootd::Bridge::Result {
 
   // If requested by the client, sends any I/O errors that occur during the transfer
   // into a footer.
-  void sendFooterError(const std::string &);
+  int sendFooterError(const std::string &);
 
   // Set the age header from the file modification time
   void addAgeHeader(std::string & headers);
@@ -166,7 +166,7 @@ class XrdHttpReq : public XrdXrootd::Bridge::Result {
 
 public:
   XrdHttpReq(XrdHttpProtocol *protinstance, const XrdHttpReadRangeHandler::Configuration &rcfg) :
-      readRangeHandler(rcfg), keepalive(true) {
+      readRangeHandler(rcfg), closeAfterError(false), keepalive(true) {
 
     prot = protinstance;
     length = 0;
@@ -208,6 +208,9 @@ class XrdHttpReq : public XrdXrootd::Bridge::Result {
 
   void addCgi(const std::string & key, const std::string & value);
 
+  // Set the transfer status header, if requested by the client
+  void setTransferStatusHeader(std::string &header);
+
   // Return the current user agent; if none has been specified, returns an empty string
   const std::string &userAgent() const {return m_user_agent;}
 
@@ -257,6 +260,10 @@ class XrdHttpReq : public XrdXrootd::Bridge::Result {
   XrdHttpReadRangeHandler   readRangeHandler;
   bool                      readClosing;
 
+  // Indication that there was a read error and the next
+  // request processing state should cleanly close the file.
+  bool                      closeAfterError;
+
   bool keepalive;
   long long length;  // Total size from client for PUT; total length of response TO client for GET.
   int depth;
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index ee25d26de..0efeca6e6 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -28,6 +28,7 @@ if(NOT ENABLE_SERVER_TESTS)
   return()
 endif()
 
+add_subdirectory( XrdOssTests )
 add_subdirectory( XRootD )
 add_subdirectory( cluster )
 add_subdirectory( stress )
diff --git a/tests/XRootD/common.cfg b/tests/XRootD/common.cfg
index 80ae82ce1..08a0f2d6b 100644
--- a/tests/XRootD/common.cfg
+++ b/tests/XRootD/common.cfg
@@ -9,6 +9,7 @@ oss.localroot $basedir/$name/xrootd
 
 ofs.chkpnt enable
 ofs.ckslib zcrc32 libXrdCksCalczcrc32.so
+ofs.osslib ++ $basedir/../XrdOssTests/libXrdOssTests.so
 xrootd.chksum adler32 crc32c zcrc32 chkcgi
 
 xrd.maxfd strict 1k
diff --git a/tests/XRootD/http.sh b/tests/XRootD/http.sh
index 370d628c0..289d8e0ef 100755
--- a/tests/XRootD/http.sh
+++ b/tests/XRootD/http.sh
@@ -38,6 +38,8 @@ function test_http() {
 	for i in $FILES; do
 		assert davix-put "${TMPDIR}/${i}.ref" "${HOST}/${TMPDIR}/${i}.ref"
 	done
+	printf "%1048576s" " " | sed 's/ /blah/g' > "${TMPDIR}/fail_read.txt"
+	assert davix-put "${TMPDIR}/fail_read.txt" "${HOST}/${TMPDIR}/fail_read.txt"
 	assert davix-put "${TMPDIR}/${i}.ref" "${HOST}/${TMPDIR}/testlistings/01.ref"
 
 	# list uploaded files, then download them to check for corruption
@@ -189,4 +191,19 @@ function test_http() {
   receivedHeader=$(grep -i 'Test:' "$outputFilePath")
   assert_eq "1" "$(echo "$receivedHeader" | wc -l | sed 's/^ *//')" "Incorrect number of 'Test' header values"
   assert_eq "$expectedHeader" "$receivedHeader" "HEAD is missing statically-defined Test header"
+
+  ## Download fails on a read failure
+  # Default HTTP request: TCP socket abruptly closes
+  assert_failure curl -v --raw "${HOST}/${TMPDIR}/fail_read.txt" --output /dev/null --write-out '%{http_code} %{size_download}' > "$outputFilePath"
+  # Note: 'tail -n 1' done here as the assert_failure adds lines to the output
+  HTTP_CODE=$(tail -n 1 "$outputFilePath" | awk '{print $1;}')
+  DOWNLOAD_SIZE=$(tail -n 1 "$outputFilePath" | awk '{print $2;}')
+  assert_eq "200" "$HTTP_CODE"
+  assert_ne "4194304" "$DOWNLOAD_SIZE"
+
+  # With transfer status summary enabled, connection is kept and error returned
+  curl -v --raw -H 'TE: trailers' -H 'Connection: Keep-Alive' -H 'X-Transfer-Status: true' "${HOST}/${TMPDIR}/fail_read.txt?try=1" -v "${HOST}/${TMPDIR}/fail_read.txt?try=2" > "$outputFilePath" 2> "${TMPDIR}/stderr.txt"
+  assert_eq "2" "$(grep -B 1 "X-Transfer-Status: 500: Unable to read" "$outputFilePath" | grep -c -E "^0")" "$(sed -e 's/blah//g' < "$outputFilePath")"
+  assert_eq "0" "$(grep -c "Leftovers after chunking" "${TMPDIR}/stderr.txt")" "Incorrect framing in response: $(sed -e 's/blah//g' < "${TMPDIR}/stderr.txt")"
+  assert_eq "0" "$(grep -c "Connection died" "${TMPDIR}/stderr.txt")" "Connection reuse did not work.  Server log: $(cat "${XROOTD_SERVER_LOGFILE}") Client log: $(sed -e 's/blah//g' < "${TMPDIR}/stderr.txt") Issue:"
 }
diff --git a/tests/XRootD/test.sh b/tests/XRootD/test.sh
index 67de3dd19..8520e82d5 100755
--- a/tests/XRootD/test.sh
+++ b/tests/XRootD/test.sh
@@ -15,6 +15,12 @@ function assert_eq() {
   [[ "$1" == "$2" ]] || error "$3: expected $1 but received $2"
 }
 
+# Ensure two returned values are not equal to each other
+# $1 is expected_value $2 is received value $3 is the error message
+function assert_ne() {
+  [[ "$1" != "$2" ]] || error "$3: expected $1 to not be equal to $2"
+}
+
 function assert_failure() {
 	echo "$@"; "$@" && error "command \"$*\" did not fail";
 }
diff --git a/tests/XrdOssTests/CMakeLists.txt b/tests/XrdOssTests/CMakeLists.txt
new file mode 100644
index 000000000..b1f82da09
--- /dev/null
+++ b/tests/XrdOssTests/CMakeLists.txt
@@ -0,0 +1,12 @@
+
+#
+# The XrdOssTests is a wrapper OSS that injects specific behaviors
+# (typically, errors) into the filesystem for the purpose of allowing
+# the testing of failures
+#
+
+add_library( XrdOssTests MODULE xrdoss_tests.cc )
+target_link_libraries( XrdOssTests XrdServer )
+
+set_target_properties( XrdOssTests PROPERTIES OUTPUT_NAME "XrdOssTests-${PLUGIN_VERSION}" SUFFIX ".so" )
+
diff --git a/tests/XrdOssTests/xrdoss_tests.cc b/tests/XrdOssTests/xrdoss_tests.cc
new file mode 100644
index 000000000..5bd3c83f1
--- /dev/null
+++ b/tests/XrdOssTests/xrdoss_tests.cc
@@ -0,0 +1,71 @@
+
+//
+// An OSS meant for unit tests.
+//
+
+#include "XrdOss/XrdOssWrapper.hh"
+#include "XrdVersion.hh"
+
+#include <memory>
+#include <string>
+#include <unistd.h>
+
+namespace {
+
+class File final : public XrdOssWrapDF {
+  public:
+    File(std::unique_ptr<XrdOssDF> wrapDF)
+        : XrdOssWrapDF(*wrapDF), m_wrapped(std::move(wrapDF)) {}
+
+    virtual ~File() {}
+
+    int Open(const char *path, int Oflag, mode_t Mode, XrdOucEnv &env) override {
+        std::string path_str(path);
+        auto const pos = path_str.find_last_of('/');
+        const auto leaf = path_str.substr(pos + 1);
+        m_fail = leaf == "fail_read.txt";
+        return wrapDF.Open(path, Oflag, Mode, env);
+    }
+
+    ssize_t Read(void *buffer, off_t offset, size_t size) override {
+        if (m_fail && offset > 0) return -EIO;
+        return wrapDF.Read(buffer, offset, size);
+    }
+
+    int getFD() override {return -1;}
+
+  private:
+    bool m_fail{false};
+    std::unique_ptr<XrdOssDF> m_wrapped;
+};
+
+class FileSystem final : public XrdOssWrapper {
+  public:
+    FileSystem(XrdOss *oss, XrdSysLogger *log, XrdOucEnv *envP)
+        : XrdOssWrapper(*oss), m_oss(oss) {}
+
+    virtual ~FileSystem() {}
+
+    XrdOssDF *newFile(const char *user = 0) override {
+        std::unique_ptr<XrdOssDF> wrapped(wrapPI.newFile(user));
+        return new File(std::move(wrapped));
+    }
+
+  private:
+    std::unique_ptr<XrdOss> m_oss;
+};
+
+} // namespace
+
+extern "C" {
+
+XrdOss *XrdOssAddStorageSystem2(XrdOss *curr_oss, XrdSysLogger *logger,
+                                const char *config_fn, const char *parms,
+                                XrdOucEnv *envP) {
+    return new FileSystem(curr_oss, logger, envP);
+}
+
+XrdVERSIONINFO(XrdOssAddStorageSystem2, slowfs);
+
+} // extern "C"
+
-- 
2.43.5

