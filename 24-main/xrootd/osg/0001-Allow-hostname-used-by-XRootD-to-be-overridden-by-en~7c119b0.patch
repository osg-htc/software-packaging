From 688a249aaf116aa7abaaea4b9d23f972c413f2c8 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Wed, 15 Jan 2025 08:01:58 -0600
Subject: [PATCH 01/10] Allow hostname used by XRootD to be overridden by env
 var.

This affects how the host advertises itself to other servers in a cluster
and prevents the use of reverse DNS lookups (which are often meaningless,
especially in Kubernetes-based environments).
---
 src/Xrd/XrdConfig.cc          | 27 +++++++++-----
 src/Xrd/XrdConfig.hh          |  3 +-
 src/Xrd/XrdLinkXeq.cc         |  4 ---
 src/XrdCms/XrdCmsClientMan.cc |  9 +++--
 src/XrdCms/XrdCmsCluster.cc   | 11 +++---
 src/XrdCms/XrdCmsConfig.cc    |  5 +++
 src/XrdCms/XrdCmsNode.cc      |  2 ++
 src/XrdCms/XrdCmsProtocol.cc  | 67 +++++++----------------------------
 src/XrdNet/XrdNetIF.cc        | 18 +++++++++-
 src/XrdNet/XrdNetIF.hh        | 49 +++++++++++++++++++++++++
 10 files changed, 117 insertions(+), 78 deletions(-)

diff --git a/src/Xrd/XrdConfig.cc b/src/Xrd/XrdConfig.cc
index 68cb35a10..b8cabb225 100644
--- a/src/Xrd/XrdConfig.cc
+++ b/src/Xrd/XrdConfig.cc
@@ -587,24 +587,33 @@ int XrdConfig::Configure(int argc, char **argv)
 // run in v4 mode and that doesn't get set until after the options are scanned.
 //
    static XrdNetAddr *myIPAddr = new XrdNetAddr((int)0);
-   if (!(myName = myIPAddr->Name(0, &temp))) myName = "";
+   auto envName = getenv("XRDHOST");
+   const char *ipAddrName;
+   if (envName) {
+      myName = envName;
+      XrdOucEnv::Export("OVERRIDEXRDHOST", myName.c_str());
+   } else if ((ipAddrName = myIPAddr->Name(0, &temp))) {
+      myName = ipAddrName;
+   } else {
+      myName = "";
+   }
 
 // Get our IP address and FQN
 //
-   ProtInfo.myName = myName;
+   ProtInfo.myName = myName.c_str();
    ProtInfo.myAddr = myIPAddr->SockAddr();
    ProtInfo.myInst = XrdOucUtils::InstName(myInsName);
    ProtInfo.myProg = myProg;
 
 // Set the Environmental variable to hold the instance name
 // XRDINSTANCE=<pgm> <instance name>@<host name>
 //                 XrdOucEnv::Export("XRDINSTANCE")
 //
-   sprintf(buff,"%s%s %s@%s", xrdInst, myProg, ProtInfo.myInst, myName);
+   sprintf(buff,"%s%s %s@%s", xrdInst, myProg, ProtInfo.myInst, myName.c_str());
    myInstance = strdup(buff);
    putenv(myInstance);   // XrdOucEnv::Export("XRDINSTANCE",...)
    myInstance += strlen(xrdInst);
-   XrdOucEnv::Export("XRDHOST", myName);
+   XrdOucEnv::Export("XRDHOST", myName.c_str());
    XrdOucEnv::Export("XRDNAME", ProtInfo.myInst);
    XrdOucEnv::Export("XRDPROG", myProg);
 
@@ -623,7 +632,7 @@ int XrdConfig::Configure(int argc, char **argv)
 // We can't really continue without some kind of name at this point. Note that
 // vriable temp should still be valid from the previous NetAddr call.
 //
-   if (!(*myName))
+   if (myName.empty())
       {Log.Emsg("Config", "Unable to determine host name; ",
                            (temp ? temp : "reason unknown"),
                            "; execution terminated.");
@@ -648,13 +657,13 @@ int XrdConfig::Configure(int argc, char **argv)
 // Otherwise, determine our domain name.
 //
    if (!myIPAddr->isRegistered())
-      {Log.Emsg("Config",myName,"does not appear to be registered in the DNS.");
+      {Log.Emsg("Config",myName.c_str(),"does not appear to be registered in the DNS.");
        Log.Emsg("Config","Verify that the '/etc/hosts' file is correct and "
                          "this machine is registered in DNS.");
        Log.Emsg("Config", "Execution continues but connection failures may occur.");
        myDomain = 0;
-      } else if (!(myDomain = index(myName, '.')))
-                Log.Say("Config warning: this hostname, ", myName,
+      } else if (!(myDomain = index(myName.c_str(), '.')))
+                Log.Say("Config warning: this hostname, ", myName.c_str(),
                             ", is registered without a domain qualification.");
 
 // Setup the initial required protocol.
@@ -1962,7 +1971,7 @@ int XrdConfig::xport(XrdSysError *eDest, XrdOucStream &Config)
     strncpy(cport, val, sizeof(cport)-1); cport[sizeof(cport)-1] = '\0';
 
     if ((val = Config.GetWord()) && !strcmp("if", val))
-       if ((rc = XrdOucUtils::doIf(eDest,Config, "port directive", myName,
+       if ((rc = XrdOucUtils::doIf(eDest,Config, "port directive", myName.c_str(),
                               ProtInfo.myInst, myProg)) <= 0)
           {if (!rc) Config.noEcho(); return (rc < 0);}
 
diff --git a/src/Xrd/XrdConfig.hh b/src/Xrd/XrdConfig.hh
index 504f61b6e..8e4a98978 100644
--- a/src/Xrd/XrdConfig.hh
+++ b/src/Xrd/XrdConfig.hh
@@ -30,6 +30,7 @@
 /******************************************************************************/
 
 #include <vector>
+#include <string>
 
 #include "Xrd/XrdProtLoad.hh"
 #include "Xrd/XrdProtocol.hh"
@@ -99,7 +100,7 @@ XrdNetSecurity     *Police;
 XrdTcpMonInfo      *tmoInfo;
 XrdMonitor         *theMon;
 const char         *myProg;
-const char         *myName;
+std::string         myName;
 const char         *myDomain;
 const char         *mySitName;
 const char         *myInsName;
diff --git a/src/Xrd/XrdLinkXeq.cc b/src/Xrd/XrdLinkXeq.cc
index ee51e9f1a..247c436e7 100644
--- a/src/Xrd/XrdLinkXeq.cc
+++ b/src/Xrd/XrdLinkXeq.cc
@@ -573,10 +573,6 @@ int XrdLinkXeq::RecvIOV(const struct iovec *iov, int iocnt)
 bool XrdLinkXeq::Register(const char *hName)
 {
 
-// First see if we can register this name with the address object
-//
-   if (!Addr.Register(hName)) return false;
-
 // Make appropriate changes here
 //
    if (HostName) free(HostName);
diff --git a/src/XrdCms/XrdCmsClientMan.cc b/src/XrdCms/XrdCmsClientMan.cc
index 9f5294195..677b64da3 100644
--- a/src/XrdCms/XrdCmsClientMan.cc
+++ b/src/XrdCms/XrdCmsClientMan.cc
@@ -323,20 +323,25 @@ int XrdCmsClientMan::Hookup()
    EPNAME("Hookup");
    CmsLoginData Data;
    XrdLink *lp;
-   char buff[256], hnBuff[264];
+   char buff[256], hnBuff[264*2+1];
    kXR_char *envData = 0;
    int rc, oldWait, tries = 12, opts = 0;
 
 // Turn off our debugging and version flags
 //
    manMutex.Lock();
    doDebug    &= ~manMask;
    manMutex.UnLock();
 
 // Report our hostname (there are better ways of doing this)
 //
    const char *hn = getenv("XRDHOST");
-   if (hn)
+   const char *override_hn = getenv("OVERRIDEXRDHOST");
+   if (hn && override_hn)
+      {snprintf(hnBuff, sizeof(hnBuff), "myHN=%s&ovHN=%s", hn, override_hn);
+       envData = (kXR_char *)hnBuff;
+      }
+   else if (hn)
       {snprintf(hnBuff, sizeof(hnBuff), "myHN=%s", hn);
        envData = (kXR_char *)hnBuff;
       }
diff --git a/src/XrdCms/XrdCmsCluster.cc b/src/XrdCms/XrdCmsCluster.cc
index 1daf93967..d799b5b36 100644
--- a/src/XrdCms/XrdCmsCluster.cc
+++ b/src/XrdCms/XrdCmsCluster.cc
@@ -557,8 +557,7 @@ XrdCmsSelected *XrdCmsCluster::List(SMask_t mask, CmsLSOpts opts, bool &oksel)
                      }
                }
             sip = new XrdCmsSelected(sipp);
-                 if (retDest) destLen = nP->netIF.GetDest(sip->Ident, iSize,
-                                                          ifGet, retName);
+                 if (retDest) destLen = nP->netIF.GetPublicDest(sip->Ident, iSize);
             else if (nP->myNlen >= XrdCmsSelected::IdentSize) destLen = 0;
             else {strcpy(sip->Ident, nP->myName); destLen = nP->myNlen;}
             if (!destLen) {delete sip; continue;}
@@ -1121,7 +1120,7 @@ int XrdCmsCluster::Select(SMask_t pmask, int &port, char *hbuff, int &hlen,
                              : Config.sched_LoadR == 0 ? SelbyLoad(pmask,selR)
                                                        : SelbyLoadR(pmask, selR));
 
-       if (nP) hlen = nP->netIF.GetName(hbuff, port, nType) + 1;
+       if (nP) hlen = nP->netIF.GetPublicName(hbuff, port) + 1;
           else hlen = 0;
        STMutex.UnLock();
        return hlen != 1;
@@ -1152,7 +1151,7 @@ int XrdCmsCluster::Select(SMask_t pmask, int &port, char *hbuff, int &hlen,
 // At this point either we have a node or we do not
 //
    if (nP)
-      {hlen = nP->netIF.GetName(hbuff, port, nType) + 1;
+      {hlen = nP->netIF.GetPublicName(hbuff, port) + 1;
        nP->RefR++;
        STMutex.UnLock();
        return hlen != 1;
@@ -1633,7 +1632,7 @@ int XrdCmsCluster::SelNode(XrdCmsSelect &Sel, SMask_t pmask, SMask_t amask)
 //
    if (nP)
       {nP->g2nLock(STMutex);
-       Sel.Resp.DLen = nP->netIF.GetName(Sel.Resp.Data, Sel.Resp.Port, nType);
+       Sel.Resp.DLen = nP->netIF.GetPublicName(Sel.Resp.Data, Sel.Resp.Port);
        if (!Sel.Resp.DLen) {nP->UnLock(); return Unreachable(Sel, false);}
        Sel.Resp.DLen++; Sel.smask = nP->NodeMask;
 
@@ -1690,7 +1689,7 @@ int XrdCmsCluster::SelNode(XrdCmsSelect &Sel, SMask_t pmask, SMask_t amask)
        if ((mask = (pmask | amask) & peerHost)) nP = SelbyCost(mask, selR);
        if (nP)
           {nP->g2nLock(STMutex);
-           Sel.Resp.DLen = nP->netIF.GetName(Sel.Resp.Data,Sel.Resp.Port,nType);
+           Sel.Resp.DLen = nP->netIF.GetPublicName(Sel.Resp.Data,Sel.Resp.Port);
            if (!Sel.Resp.DLen) {nP->UnLock(); return Unreachable(Sel, false);}
            Sel.Resp.DLen++; Sel.smask = nP->NodeMask;
            if (Sel.iovN && Sel.iovP) nP->Send(Sel.iovP, Sel.iovN);
diff --git a/src/XrdCms/XrdCmsConfig.cc b/src/XrdCms/XrdCmsConfig.cc
index 3a2a69af3..2bb168961 100644
--- a/src/XrdCms/XrdCmsConfig.cc
+++ b/src/XrdCms/XrdCmsConfig.cc
@@ -415,6 +415,11 @@ int XrdCmsConfig::Configure2()
 //
    envData += "myHN=";
    envData += myName;
+   const char *override_hn = getenv("OVERRIDEXRDHOST");
+   if (override_hn)
+      {envData += "&ovHN=";
+       envData += override_hn;
+      }
 
 // Print herald
 //
diff --git a/src/XrdCms/XrdCmsNode.cc b/src/XrdCms/XrdCmsNode.cc
index 062b37f7d..c952b4e13 100644
--- a/src/XrdCms/XrdCmsNode.cc
+++ b/src/XrdCms/XrdCmsNode.cc
@@ -166,6 +166,8 @@ void XrdCmsNode::setName(XrdLink *lnkp, const char *theIF, int port)
    netIF.SetIF(&netID, theIF, port);
    hasNet = netIF.Mask();
 
+   netIF.SetPublicName(hname);
+
 // Construct our identification
 //
    myName = strdup(hname);
diff --git a/src/XrdCms/XrdCmsProtocol.cc b/src/XrdCms/XrdCmsProtocol.cc
index c4abde0ac..6580a5c5d 100644
--- a/src/XrdCms/XrdCmsProtocol.cc
+++ b/src/XrdCms/XrdCmsProtocol.cc
@@ -564,30 +564,6 @@ int XrdCmsProtocol::Stats(char *buff, int blen, int do_sync)
 /******************************************************************************/
 /*                                 A d m i t                                  */
 /******************************************************************************/
-
-namespace
-{
-char *getAltName(char *sid, char *buff, int blen)
-{
-   char *atsign, *spacec, *retval = 0;
-   int  n;
-   if (sid)
-   if ((atsign = index(sid, '@')))
-      {atsign++;
-       if ((spacec = index(atsign, ' ')))
-          {*spacec = 0;
-           n = strlen(atsign);
-           if (n > 3 && n < blen)
-              {strcpy(buff, atsign);
-               retval = buff;
-              }
-           *spacec = ' ';
-          }
-      }
-   return retval;
-}
-}
-
 XrdCmsRouting *XrdCmsProtocol::Admit()
 {
    EPNAME("Admit");
@@ -623,37 +599,18 @@ XrdCmsRouting *XrdCmsProtocol::Admit()
 // Construct environment for incoming node
 //
    XrdOucEnv cgiEnv((const char *)Data.envCGI);
-
-// We have this problem hat many times the IPv6 address is missing the ptr
-// record in DNS. If this node is IPv6 unregistered and the incoming node
-// supplied it's host name then we can attempt to register it locally.
-//
-   if (!(Link->AddrInfo()->isRegistered())
-   &&    Link->AddrInfo()->isIPType(XrdNetAddrInfo::IPv6))
-      {const char *altName = cgiEnv.Get("myHN");
-       const char *altType = "stated mapping";
-       char hBF[256], *oldName = strdup(Link->Host());
-       if (!altName) {altName = getAltName((char *)Data.SID, hBF, sizeof(hBF));
-                      altType = "inferred mapping";
-                     }
-       Say.Emsg("Protocol", "DNS lookup for", oldName, "failed; "
-                            "IPv6 ptr record missing!");
-       if (!altName)
-          {Say.Emsg("Protocol", oldName, "did not supply a fallback "
-                                         "mapping; using IPv6 address.");
-          } else {
-           char buff[512];
-           snprintf(buff, sizeof(buff), "%s -> %s", oldName, altName);
-           Say.Emsg("Protocol", "Attempting to use", altType, buff);
-           if (!(Link->Register(altName)))
-              {Say.Emsg("Protocol", buff, altType,"failed; address mismatch.");
-              } else {
-               Say.Emsg("Protocol", oldName,
-                        "is now locally registered as", altName);
-              }
-          }
-       free(oldName);
-      }
+   const char *altName = cgiEnv.Get("ovHN");
+   if (altName) {
+     std::string oldName(Link->Host());
+     char buff[512];
+     snprintf(buff, sizeof(buff), "%s -> %s", oldName.c_str(), altName);
+     Say.Emsg("Protocol", "Attempting to use stated mapping", buff);
+     if (!(Link->Register(altName))) {
+       Say.Emsg("Protocol", buff, "stated mapping failed; address mismatch.");
+     } else {
+       Say.Emsg("Protocol", oldName.c_str(), "is now locally registered as", altName);
+     }
+   }
 
 // Handle Redirectors here (minimal stuff to do)
 //
diff --git a/src/XrdNet/XrdNetIF.cc b/src/XrdNet/XrdNetIF.cc
index 6d774c781..3a3ba7325 100644
--- a/src/XrdNet/XrdNetIF.cc
+++ b/src/XrdNet/XrdNetIF.cc
@@ -403,7 +403,23 @@ int XrdNetIF::GetDest(char *dest, int dlen, ifType ifT, bool prefn)
    strcpy(dest +ifP->iLen, portSfx.val);
    return n;
 }
-  
+
+
+/******************************************************************************/
+/*                               G e t P u b l i c D e s t                    */
+/******************************************************************************/
+
+int XrdNetIF::GetPublicDest(char *dest, size_t dlen)
+{
+    auto n = m_PublicName.size() + portSfx.len;
+    if (m_PublicName.empty() || n >= dlen) return 0;
+
+    strcpy(dest, m_PublicName.c_str());
+    strcpy(dest + m_PublicName.size(), portSfx.val);
+
+    return n;
+}
+
 /******************************************************************************/
 /*                                 G e t I F                                  */
 /******************************************************************************/
diff --git a/src/XrdNet/XrdNetIF.hh b/src/XrdNet/XrdNetIF.hh
index b36956622..849b67e1d 100644
--- a/src/XrdNet/XrdNetIF.hh
+++ b/src/XrdNet/XrdNetIF.hh
@@ -32,6 +32,7 @@
 
 #include <cstdlib>
 #include <cstring>
+#include <string>
 
 //------------------------------------------------------------------------------
 //! The XrdNetIF class handles host interfaces. It is used to obtain the
@@ -89,6 +90,18 @@ class XrdNetIF
 
        int  GetDest(char *dest, int dlen, ifType ifT=PublicV6, bool prefn=false);
 
+//------------------------------------------------------------------------------
+//! Get the public interface name with a port number.
+//!
+//! @param  dest  Pointer to the buffer where dest will be placed.
+//! @param  dlen  The length of the buffer.
+//!
+//! @return The length of the name whose pointer is placed in name.
+//!         A value of zero indicates that the buffer was too small.
+//------------------------------------------------------------------------------
+
+       int  GetPublicDest(char *dest, size_t dlen);
+
 //------------------------------------------------------------------------------
 //! Get the interface name without a port number.
 //!
@@ -123,6 +136,39 @@ inline int  GetName(char *nbuff, int &nport, ifType ifT=PublicV6)
                     return ifName[ifT]->iLen;
                    }
 
+//------------------------------------------------------------------------------
+//! Get the interface public hostname, not relying on reverse DNS of the IP
+//! addresses.
+//!
+//! @param  nbuff Reference to buffer where the name will be placed. It must
+//!               be at least 256 bytes in length.
+//! @param  nport Place where the port number will be placed.
+//!
+//! @return The length of the name copied into the buffer.
+//!         A value of zero indicates that no such interface exists.
+//------------------------------------------------------------------------------
+int GetPublicName(char *nbuff, int &nport)
+{
+    strcpy(nbuff, m_PublicName.c_str());
+    nport = ifPort;
+    return m_PublicName.size();
+}
+
+//------------------------------------------------------------------------------
+//! Sets the 'public name' to use associated with this interface.
+//!
+//! @param  name New public name to utilize.
+//!
+//! @return True if the name is a valid hostname; false otherwise.
+//------------------------------------------------------------------------------
+bool SetPublicName(const std::string &name)
+{
+    // TODO: Actually validate this is an acceptable DNS name.
+    if (name.size() > 255) return false;
+    m_PublicName = name;
+    return true;
+}
+
 //------------------------------------------------------------------------------
 //! Obtain an easily digestable list of IP routable interfaces to this machine.
 //!
@@ -433,6 +479,9 @@ short          ifRoute;
 char           ifMask;
 char           ifAvail;
 
+// The public hostname of the interface.
+std::string    m_PublicName;
+
 static
 XrdSysError   *eDest;
 static
-- 
2.43.5

