--- a/src/server.c
+++ b/src/server.c
@@ -84,8 +84,10 @@
 #include <fcntl.h>
 #include <signal.h>
 
+#if 0
 #include "globus_gsi_credential.h"
 #include "globus_gsi_proxy.h"
+#endif
 
 #include "blahpd.h"
 #include "config.h"
@@ -2164,11 +2166,13 @@ cmd_send_proxy_to_worker_node(void *args)
 		else
 			proxyFileNameNew = strdup(argv[CMD_SEND_PROXY_TO_WORKER_NODE_ARGS + MEXEC_PARAM_SRCPROXY + 1]);
 
+#if 0
 		/* Add the globus library path */
 		ld_path = make_message("LD_LIBRARY_PATH=%s/lib",
 		                           getenv("GLOBUS_LOCATION") ? getenv("GLOBUS_LOCATION") : "/opt/globus");
 		push_env(&exe_command.environment, ld_path);
 		free(ld_path);
+#endif
 
 		delegate_switch = "";
 		if (config_test_boolean(config_get("blah_delegate_renewed_proxies",blah_config_handle)))
@@ -2631,7 +2635,7 @@ set_cmd_list_option(char **command, classad_context cad, const char *attribute,
 	if (to_append) free (to_append);
 	return(result);
 }
- 
+
 const char *grid_proxy_errmsg = NULL;
 
 int activate_globus()
@@ -2641,7 +2645,7 @@ int activate_globus()
 	if (active) {
 		return 0;
 	}
-
+#if 0
 	if ( globus_thread_set_model( "pthread" ) ) {
 		grid_proxy_errmsg = "failed to activate Globus";
 		return -1;
@@ -2656,7 +2660,7 @@ int activate_globus()
 		grid_proxy_errmsg = "failed to activate Globus";
 		return -1;
 	}
-
+#endif
 	active = 1;
 	return 0;
 }
@@ -2667,13 +2671,15 @@ int activate_globus()
  */
 int grid_proxy_info(const char *proxy_filename)
 {
+#if 0
 	globus_gsi_cred_handle_t handle = NULL;
+#endif
 	time_t time_left = -1;
 
 	if ( activate_globus() < 0 ) {
 		return -1;
 	}
-
+#if 0
 	if (globus_gsi_cred_handle_init(&handle, NULL)) {
 		grid_proxy_errmsg = "failed to initialize Globus data structures";
 		goto cleanup;
@@ -2689,16 +2695,16 @@ int grid_proxy_info(const char *proxy_filename)
 		grid_proxy_errmsg = "unable to extract expiration time";
 		goto cleanup;
 	}
-
+#endif
 	if ( time_left < 0 ) {
 		time_left = 0;
 	}
-
+#if 0
  cleanup:
 	if (handle) {
 		globus_gsi_cred_handle_destroy(handle);
 	}
-
+#endif
 	return time_left;
 }
 
@@ -2708,19 +2714,24 @@ int grid_proxy_info(const char *proxy_filename)
  * Returns 0 on success and -1 on error.
  */
 int grid_proxy_init(const char *src_filename, char *dst_filename,
-					int lifetime)
+
+                    int lifetime)
 {
+#if 0
 	globus_gsi_cred_handle_t src_handle = NULL;
 	globus_gsi_cred_handle_t dst_handle = NULL;
 	globus_gsi_proxy_handle_t dst_proxy_handle = NULL;
+#endif
 	int rc = -1;
 	time_t src_time_left = -1;
+#if 0
 	globus_gsi_cert_utils_cert_type_t cert_type = GLOBUS_GSI_CERT_UTILS_TYPE_LIMITED_PROXY;
+#endif
 
 	if ( activate_globus() < 0 ) {
 		return -1;
 	}
-
+#if 0
 	if (globus_gsi_cred_handle_init(&src_handle, NULL)) {
 		grid_proxy_errmsg = "failed to initialize Globus data structures";
 		goto cleanup;
@@ -2769,9 +2780,9 @@ int grid_proxy_init(const char *src_filename, char *dst_filename,
 		grid_proxy_errmsg = "unable to write proxy file";
 		goto cleanup;
 	}
-
+#endif
 	rc = 0;
-
+#if 0
  cleanup:
 	if (src_handle) {
 		globus_gsi_cred_handle_destroy(src_handle);
@@ -2782,7 +2793,7 @@ int grid_proxy_init(const char *src_filename, char *dst_filename,
 	if ( dst_handle ) {
 		globus_gsi_proxy_handle_destroy( dst_proxy_handle );
 	}
-
+#endif
 	return rc;
 }
 
@@ -2957,7 +2968,6 @@ limit_proxy(char* proxy_name, char *limited_proxy_name, char **error_message)
 	return(limited_proxy_name);
 }
 
-
 int
 logAccInfo(char* jobId, char* server_lrms, classad_context cad, char* fqan, char* userDN, char** environment)
 {
