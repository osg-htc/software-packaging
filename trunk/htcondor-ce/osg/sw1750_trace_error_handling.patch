diff --git a/src/condor_ce_trace b/src/condor_ce_trace
index c62354c..8969b97 100755
--- a/src/condor_ce_trace
+++ b/src/condor_ce_trace
@@ -6,7 +6,9 @@ import sys
 import time
 import socket
 import optparse
+import textwrap
 import tempfile
+import traceback
 from subprocess import Popen, PIPE, STDOUT
 
 os.environ.setdefault("CONDOR_CONFIG", "/etc/condor-ce/condor_config")
@@ -32,21 +34,28 @@ condorJobStatus = { \
   6: "Transferring Output",
 }
 
+def print_formatted_error(error_msg):
+    print "*"*80
+    for line in textwrap.wrap(error_msg, 80):
+        print line
+    print "*"*80
+
 def verify_matching_condor_versions():
     lib_ver = htcondor.version()
     try:
         args = ('condor_version',)
         p = Popen(args, stdout=PIPE, stderr=STDOUT)
-        (stdout, stderr) = p.communicate()
-    except RuntimeError, e:
+        (stdout, _) = p.communicate()
+    except RuntimeError:
         raise CondorRunException('Could not find version information using condor_version')
     tool_ver = stdout.split('\n')[0]
     if lib_ver != tool_ver:
-        raise RuntimeError('Found multiple, mismatched versions of HTCondor installed. Please ensure that you only have one version of HTCondor installed.')
+        raise RuntimeError('Found multiple, mismatched versions of HTCondor installed. ' \
+                           'Please ensure that you only have one version of HTCondor installed.')
 
 def configureAuth():
     try:
-        auth_methods = re.split(",?\s*", htcondor.param['SEC_CLIENT_AUTHENTICATION_METHODS'])
+        auth_methods = re.split(r",?\s*", htcondor.param['SEC_CLIENT_AUTHENTICATION_METHODS'])
     except KeyError:
         auth_methods = []
     if 'GSI' not in auth_methods:
@@ -67,7 +76,7 @@ def runPing(address, daemon='SCHEDD'):
 
     try:
         p = Popen(args, stdout=PIPE, stderr=STDOUT)
-        (stdout, stderr) = p.communicate()
+        (stdout, _) = p.communicate()
     except RuntimeError, e:
         raise CondorRunException('Failed to ping %s due to the following error:\n%s' % (address, e))
 
@@ -84,10 +93,12 @@ def runPing(address, daemon='SCHEDD'):
             raise CondorRunException("Failed to ping %s: Please contact the site's system adminstrator to ensure " \
                                      "that the CE you're trying to contact is functional." % address)
         else:
-            raise CondorRunException("Failed to ping %s; authorization check exited with code %d. Re-run the command" \
-                                     "with '-d' for more verbose output."% (address, p.returncode));
+            message = "Failed to ping %s; authorization check exited with code %d." % (address, p.returncode)
+            if not g_debug:
+                message = message + " Re-run the command with '-d' for more verbose output." 
+            raise CondorRunException(message)
 
-    unauthorized_user = re.search('Remote Mapping:\s*(.*)\nAuthorized:\s*FALSE', stdout, re.MULTILINE)
+    unauthorized_user = re.search(r'Remote Mapping:\s*(.*)\nAuthorized:\s*FALSE', stdout, re.MULTILINE)
     if unauthorized_user:
         raise CondorUserException("User %s does not have permissions for %s. Please contact the CE's system " \
                                   "administrator to ensure that your user is mapped properly in the site's " \
@@ -105,7 +116,7 @@ def parseOpts():
     parser.add_option("-a", "--attribute", help="Add attribute to job ad.",
                       dest="attribute", default=[], action='append')
     parser.add_option("-n", "--no-clean", help="Do not clean temporary "
-        "files.", dest="clean", default=False, action="store_true")
+        "files.", dest="clean", default=True, action="store_false")
 
     opts, args = parser.parse_args()
     global g_debug
@@ -133,9 +144,15 @@ def checkAuthz(job_info):
 
     if not hadSuccess:
         raise CondorRunException("No collector check was successful! Please contact the site's system adminstrator to " \
-                           "ensure that the CE you're trying to contact is functional.") 
+                           "ensure that the CE you're trying to contact is functional.")
     coll = htcondor.Collector(job_info['collector_name'])
-    ad = coll.locate(htcondor.DaemonTypes.Schedd, job_info['schedd_name'])
+
+    try:
+        ad = coll.locate(htcondor.DaemonTypes.Schedd, job_info['schedd_name'])
+    except ValueError:
+        raise CondorRunException("Could not find CE's schedd. Please contact the site's system administrator to " \
+                                 "ensure that CE you're trying to contact is functional.")
+
     job_info['schedd_ad'] = ad
     addr = ad['MyAddress']
     print "Testing HTCondor-CE schedd connectivity."
@@ -220,9 +237,9 @@ def setClassadValueType(value):
         return True
     elif value.lower() == 'false':
         return False
-    elif re.match('\d+\.\d+$', value):
+    elif re.match(r'\d+\.\d+$', value):
         return float(value)
-    elif re.match('\d+$', value):
+    elif re.match(r'\d+$', value):
         return int(value)
 
     return value
@@ -248,13 +265,15 @@ def checkJobSubmit(job_info):
     try:
         schedd = htcondor.Schedd(job_info['schedd_ad'])
     except RuntimeError, e:
-        raise CondorRunException("Failed to contact schedd at %s due to the following error:\n%s" % (job_info['schedd_ad']['Machine'], e))
+        raise CondorRunException("Failed to contact schedd at %s due to the following error:\n%s" \
+                                 % (job_info['schedd_ad']['Machine'], e))
     print "Submitting job to schedd %s" % job_info['schedd_ad']['MyAddress']
     ad_results = []
     try:
         cluster = schedd.submit(job_ad, 1, True, ad_results)
     except RuntimeError, e:
-        raise CondorRunException("- Failed to submit job to %s due to the following error:\n%s" % (job_info['schedd_ad']['Machine'], e))
+        raise CondorRunException("- Failed to submit job to %s due to the following error:\n%s" \
+                                 % (job_info['schedd_ad']['Machine'], e))
 
     print "- Successful submission; cluster ID %d" % cluster
 
@@ -264,7 +283,8 @@ def checkJobSubmit(job_info):
     try:
         schedd.spool(ad_results)
     except RuntimeError, e:
-        raise CondorRunException("- Failed to spool files to %s due to the following error:\n%s" % (job_info['schedd_ad']['Machine'], e))
+        raise CondorRunException("- Failed to spool files to %s due to the following error:\n%s" \
+                                 % (job_info['schedd_ad']['Machine'], e))
 
     print "- Successful spooling"
 
@@ -285,9 +305,10 @@ def checkJobSubmit(job_info):
             if last_status == -1:
                 print "Job status:", condorJobStatus.get(status, status)
             else:
-                print "Job transitioned from", condorJobStatus.get(last_status, last_status), "to", condorJobStatus.get(status, status)
+                print "Job transitioned from", condorJobStatus.get(last_status, last_status), \
+                    "to", condorJobStatus.get(status, status)
             last_status = status
-        if status in [3,4]: break
+        if status in [3, 4]: break
         time.sleep(1)
 
     if status == 5: # TODO - provide better diagnostics
@@ -296,11 +317,13 @@ def checkJobSubmit(job_info):
         try:
             schedd.retrieve("ClusterID == %d" % cluster)
         except RuntimeError, e:
-            raise CondorRunException("Failed to retrieve output from %s due to the following error:\n%s" % (job_info['schedd_ad']['Machine'], e))
+            raise CondorRunException("Failed to retrieve output from %s due to the following error:\n%s" \
+                                     % (job_info['schedd_ad']['Machine'], e))
         try:
             schedd.act(htcondor.JobAction.Remove, "ClusterID == %d" % cluster)
         except RuntimeError, e:
-            raise CondorRunException("Failed to cleanup job on %s due to the following error:\n%s" % (job_info['schedd_ad']['Machine'], e))
+            raise CondorRunException("Failed to cleanup job on %s due to the following error:\n%s" \
+                                     % (job_info['schedd_ad']['Machine'], e))
         output = open(job_info['stdout_file'], "r").read()
         if not output:
             raise CondorRunException("Job produced empty stdout")
@@ -311,6 +334,12 @@ def checkJobSubmit(job_info):
         else:
             print "- Job was successful"
 
+def cleanup(job_info):
+    files = ['stdout_file', 'stderr_file', 'log_file', 'submit_file']
+
+    for filename in files:
+        os.remove(job_info[filename])
+
 def main():
     opts, args = parseOpts()
 
@@ -321,14 +350,7 @@ def main():
     try:
         verify_matching_condor_versions()
     except RuntimeError, e:
-        print "*"*80
-        print e
-        print "*"*80
-        sys.exit(1)
-    except Exception, e:
-        print "*"*80
-        print 'Uncaught exception, please contact goc@opensciencegrid.org.\n%s: %s' % (e.__class__.__name__,e)
-        print "*"*80
+        print_formatted_error(e)
         sys.exit(1)
 
     job_info = {}
@@ -352,14 +374,7 @@ def main():
     try:
         checkAuthz(job_info)
     except (CondorRunException, CondorUserException), e:
-        print "*"*80
-        print "%s %s" % (time.strftime('%F %T'), e)
-        print "*"*80
-        sys.exit(1)
-    except Exception, e:
-        print "*"*80
-        print 'Uncaught exception, please contact goc@opensciencegrid.org.\n%s: %s' % (e.__class__.__name__,e)
-        print "*"*80
+        print_formatted_error("%s %s" % (time.strftime('%F %T'), e))
         sys.exit(1)
 
     try:
@@ -367,19 +382,23 @@ def main():
             generate_run_script(job_info)
             checkJobSubmit(job_info)
         except (CondorRunException, CondorUserException), e:
-            print "*"*80
-            print "%s %s" % (time.strftime('%F %T'), e)
-            print "*"*80
-            sys.exit(1)
-        except Exception, e:
-            print "*"*80
-            print 'Uncaught exception, please contact goc@opensciencegrid.org.\n%s: %s' % (e.__class__.__name__,e)
-            print "*"*80
+            print_formatted_error("%s %s" % (time.strftime('%F %T'), e))
             sys.exit(1)
     finally:
         if opts.clean:
             cleanup(job_info)
 
 if __name__ == '__main__':
-    main()
-
+    try:
+        main()
+    except Exception, e:
+        pid = os.getpid()
+        fd, stack_file = tempfile.mkstemp(dir=".", prefix=".stack_%d_" % pid)
+        f = open(stack_file, 'w')
+        f.write('%s\n' % time.strftime('%Y-%m-%d %H:%M:%S'))
+        traceback.print_exc(file=f)
+        os.close(fd)
+        print_formatted_error('Uncaught exception, please send %s to ' \
+                              'goc@opensciencegrid.org with a description of the issue.'
+                              % stack_file)
+        sys.exit(1)
