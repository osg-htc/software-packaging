diff --git a/.gitignore b/.gitignore
index 9790efe..393d5d6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,15 +2,11 @@ Makefile
 *.tar.gz
 src/.*
 release_dir
-rsl_tester
-libeval_rsl.so
 install_manifest.txt
 cmake_install.cmake
 CMakeFiles
 CMakeCache.txt
 config/01-ce-router.conf
 config/01-ce-router-defaults.conf
-libclassad_ce.so
-classad_ce_tester
 src/htcondorce/*.pyc
 tmp
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8d45ad6..ffc6897 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,10 +7,7 @@ set( HTCONDORCE_VERSION "1.21" CACHE INTERNAL "Version of the HTCondor-CE" )
 
 set( CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake )
 
-find_package( Classad REQUIRED )
-
 find_package(PkgConfig)
-pkg_check_modules( GLOBUS_RSL REQUIRED globus-rsl )
 
 if( CMAKE_COMPILER_IS_GNUCXX )
   set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror" )
@@ -22,23 +19,6 @@ if(COMPILER_SUPPORTS_CXX11)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
 endif()
 
-string(REPLACE ";" " " _GLOBUS_RSL_CFLAGS_OTHER "${GLOBUS_RSL_CFLAGS_OTHER}" )
-
-link_directories ( ${GLOBUS_RSL_LIBRARY_DIRS} )
-include_directories ( ${GLOBUS_RSL_INCLUDE_DIRS} ${CLASSAD_INCLUDE_DIRS} )
-
-add_library ( eval_rsl MODULE src/rslConverter.cpp )
-target_link_libraries ( eval_rsl ${GLOBUS_RSL_LIBRARIES} ${CLASSAD_LIBRARIES} )
-set_property ( TARGET eval_rsl APPEND PROPERTY COMPILE_FLAGS "${_GLOBUS_RSL_CFLAGS_OTHER}" )
-
-add_library ( classad_ce MODULE src/classad_ce.cpp )
-target_link_libraries ( classad_ce ${CLASSAD_LIBRARIES} )
-
-add_executable ( rsl_tester src/rslTester.cpp )
-add_executable ( classad_ce_tester src/classad_ce_tester.cpp )
-target_link_libraries ( classad_ce_tester ${CLASSAD_LIBRARIES} )
-target_link_libraries ( rsl_tester ${CLASSAD_LIBRARIES} )
-
 set(SHARE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/share" CACHE PATH "Base directory for files which go to share/")
 set(SYSCONF_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/etc" CACHE PATH "Base directory for files which go to etc/")
 set(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "Base directory for files which go to lib/")
@@ -57,9 +37,6 @@ configure_file (
   "${CMAKE_CURRENT_BINARY_DIR}/config/01-ce-router-defaults.conf"
 )
 
-install(TARGETS eval_rsl LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/condor")
-install(TARGETS classad_ce LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/condor")
-
 install(PROGRAMS src/condor-ce src/condor-ce-collector DESTINATION ${SYSCONF_INSTALL_DIR}/rc.d/init.d)
 install(PROGRAMS src/condor_ce_startup src/condor_ce_startup_internal src/condor_ce_env_bootstrap src/condor_ce_client_env_bootstrap src/condor_ce_router_defaults src/osg-wrapper src/condor_ce_jobmetrics src/condor_ce_metric src/condor_ce_view src/bdii/condor_ce_bdii_generate_glue1.py src/bdii/condor_ce_bdii_generate_glue2.py DESTINATION ${SHARE_INSTALL_PREFIX}/condor-ce)
 install(PROGRAMS src/condor_ce_config_generator src/condor_ce_config_val src/condor_ce_history src/condor_ce_hold src/condor_ce_info_status src/condor_ce_q src/condor_ce_qedit src/condor_ce_release src/condor_ce_rm src/condor_ce_submit src/condor_ce_version src/condor_ce_reconfig src/condor_ce_router_q src/condor_ce_status src/condor_ce_reschedule src/condor_ce_run src/condor_ce_trace src/condor_ce_ping src/condor_ce_off src/condor_ce_on src/condor_ce_restart src/condor_ce_job_router_info src/condor_ce_host_network_check DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
diff --git a/config/01-ce-router-defaults.conf.in b/config/01-ce-router-defaults.conf.in
index 8b92883..4bb8087 100644
--- a/config/01-ce-router-defaults.conf.in
+++ b/config/01-ce-router-defaults.conf.in
@@ -32,11 +32,6 @@ LOCAL_CONFIG_FILE = /usr/share/condor-ce/condor_ce_router_defaults|
 CONDORCE_MAX_JOBS = 10000
 GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE = $(CONDORCE_MAX_JOBS)
 
-# Only route jobs for an up-to-date client
-# NOTE: disabled because HTCondor-G appears to not set this properly
-#JOB_ROUTER_SOURCE_JOB_CONSTRAINT = ((target.LastClientContact =?= UNDEFINED) || (target.LastClientContact - time() < 30*60)) && (target.CondorCE is True)
-CLASSAD_USER_LIBS = @CMAKE_INSTALL_LIBDIR@/condor/libclassad_ce.so, @CMAKE_INSTALL_LIBDIR@/condor/libeval_rsl.so, $(CLASSAD_USER_LIBS)
-
 # Only route jobs with a valid, non-expired proxy for either the vanilla or standard universe.
 JOB_ROUTER_SOURCE_JOB_CONSTRAINT = (target.x509userproxysubject =!= UNDEFINED) && (target.x509UserProxyExpiration =!= UNDEFINED) && (time() < target.x509UserProxyExpiration) && (target.JobUniverse =?= 5 || target.JobUniverse =?= 1)
 
diff --git a/config/01-ce-router.conf.in b/config/01-ce-router.conf.in
index 2f9f8af..41818f0 100644
--- a/config/01-ce-router.conf.in
+++ b/config/01-ce-router.conf.in
@@ -28,11 +28,6 @@ LOCAL_CONFIG_FILE = /usr/share/condor-ce/condor_ce_router_defaults|
 # sites) and JOB_ROUTER_DEFAULTS
 CONDORCE_MAX_JOBS = 10000
 
-# Only route jobs for an up-to-date client
-# NOTE: disabled because HTCondor-G appears to not set this properly
-#JOB_ROUTER_SOURCE_JOB_CONSTRAINT = ((target.LastClientContact =?= UNDEFINED) || (target.LastClientContact - time() < 30*60)) && (target.CondorCE is True)
-CLASSAD_USER_LIBS = @CMAKE_INSTALL_LIBDIR@/condor/libclassad_ce.so, @CMAKE_INSTALL_LIBDIR@/condor/libeval_rsl.so, $(CLASSAD_USER_LIBS)
-
 # Only route jobs with a valid, non-expired proxy for either the vanilla or standard universe.
 JOB_ROUTER_SOURCE_JOB_CONSTRAINT = (target.x509userproxysubject =!= UNDEFINED) && (target.x509UserProxyExpiration =!= UNDEFINED) && (time() < target.x509UserProxyExpiration) && (target.JobUniverse =?= 5 || target.JobUniverse =?= 1)
 
diff --git a/src/classad_ce.cpp b/src/classad_ce.cpp
deleted file mode 100644
index d0b4483..0000000
--- a/src/classad_ce.cpp
+++ /dev/null
@@ -1,114 +0,0 @@
-
-#include <sstream>
-
-#include "classad/classad.h"
-#include "classad/literals.h"
-#include "classad/fnCall.h"
-#include "classad/sink.h"
-
-#include <sys/types.h>
-#include <pwd.h>
-
-static bool
-user_home (const char *                 name,
-          const classad::ArgumentList &arguments,
-          classad::EvalState          &state,
-          classad::Value              &result);
-
-static classad::ClassAdFunctionMapping functions[] = 
-{
-    { "userHome",  (void *) user_home, 0 },
-    { "user_home", (void *) user_home, 0 },
-    { "",          NULL,               0 }
-};
-
-extern "C" 
-{
-    classad::ClassAdFunctionMapping *Init(void)
-    {
-        return functions;
-    }
-
-}
-
-
-static bool
-return_result(const std::string &default_home,
-              const std::string &error_msg,
-              classad::Value    &result)
-{
-    if (default_home.size())
-    {
-        result.SetStringValue(default_home);
-        return true;
-    }
-    else
-    {
-        result.SetErrorValue();
-        classad::CondorErrMsg = error_msg;
-        return false;
-    }
-}
-
-static bool
-user_home (const char *                 name,
-           const classad::ArgumentList &arguments,
-           classad::EvalState          &state,
-           classad::Value              &result)
-{
-
-    if ((arguments.size() != 1) && (arguments.size() != 2))
-    {
-        std::stringstream ss;
-        result.SetErrorValue();
-        ss << "Invalid number of arguments passed to " << name << "; " << arguments.size() << "given, 1 required and 1 optional.";
-        classad::CondorErrMsg = ss.str();
-        return false;
-    }
-
-
-    std::string default_home;
-    classad::Value default_home_value;
-    if (arguments.size() != 2 || !arguments[1]->Evaluate(state, default_home_value) || !default_home_value.IsStringValue(default_home))
-    {
-        default_home = "";
-    }
-
-
-    std::string owner_string;
-    classad::Value owner_value;
-    if (!arguments[0]->Evaluate(state, owner_value) || (!owner_value.IsStringValue(owner_string)))
-    {
-        std::string unp_string;
-        std::stringstream ss;
-        classad::ClassAdUnParser unp; unp.Unparse(unp_string, arguments[0]);
-        ss << "Could not evaluate the first argument of " << name << " to string.  Expression: " << unp_string << ".";
-        return return_result(default_home, ss.str(), result);
-    }
-
-    errno = 0;
-    struct passwd *info = getpwnam(owner_string.c_str());
-    if (!info)
-    {
-        std::stringstream ss;
-        ss << "Unable to find home directory for user " << owner_string;
-        if (errno) {
-            ss << ": " << strerror(errno) << "(errno=" << errno << ")";
-        } else {
-            ss << ": No such user.";
-        }
-        return return_result(default_home, ss.str(), result);
-    }
-
-    if (!info->pw_dir)
-    {
-        std::stringstream ss;
-        ss << "User " << owner_string << " has no home directory.";
-        return return_result(default_home, ss.str(), result);
-    }
-    std::string home_string = info->pw_dir;
-    result.SetStringValue(home_string);
-
-    return true;
-}
-
diff --git a/src/classad_ce_tester.cpp b/src/classad_ce_tester.cpp
deleted file mode 100644
index a842470..0000000
--- a/src/classad_ce_tester.cpp
+++ /dev/null
@@ -1,49 +0,0 @@
-
-#include <iostream>
-
-#include "classad/exprTree.h"
-#include "classad/fnCall.h"
-#include "classad/sink.h"
-
-int main ( int argc, const char *argv[] )
-{
-    if ((argc != 3) && (argc != 4))
-    {
-        std::cerr << "Usage: " << argv[0] << " <module file> <user string> [default]" << std::endl;
-        return 1;
-    }
-
-    if (!classad::FunctionCall::RegisterSharedLibraryFunctions(argv[1]))
-    {
-        std::cout << "Failed to load ClassAd user lib (" << argv[1] << "): " << classad::CondorErrMsg << std::endl;
-        return 2;
-    }
-
-    classad::Value val; val.SetStringValue(argv[2]);
-    classad::ExprTree *lit = classad::Literal::MakeLiteral(val);
-    std::vector<classad::ExprTree*> argList; argList.push_back(lit);
-    if (argc == 4)
-    {
-        classad::Value val2; val2.SetStringValue(argv[3]);
-        classad::ExprTree *lit2 = classad::Literal::MakeLiteral(val2);
-        argList.push_back(lit2);
-    }
-    classad::ExprTree *expr = classad::FunctionCall::MakeFunctionCall("userHome", argList);
-    classad::Value result;
-    classad::EvalState state;
-    if (!expr->Evaluate(state, result))
-    {
-        std::cerr << "Unable to map username to home directory; (error: " << classad::CondorErrMsg << ")." << std::endl;
-        return 3;
-    }
-    delete expr;
-
-    std::cout << "Resulting home directory: ";
-    classad::PrettyPrint pp;
-    std::string text_result;
-    pp.Unparse(text_result, result);
-    std::cout << text_result << std::endl;
-
-    return 0;
-}
-
diff --git a/src/rslConverter.cpp b/src/rslConverter.cpp
deleted file mode 100644
index 4c1a4e2..0000000
--- a/src/rslConverter.cpp
+++ /dev/null
@@ -1,253 +0,0 @@
-
-#include <iostream>
-#include <sstream>
-
-#include "globus/globus_module.h"
-#include "globus/globus_rsl.h"
-#include "globus/globus_list.h"
-
-#include "classad/classad.h"
-#include "classad/literals.h"
-#include "classad/fnCall.h"
-#include "classad/sink.h"
-
-#include <boost/algorithm/string.hpp>
-#include <boost/lexical_cast.hpp>
-
-static bool
-eval_rsl (const char *                 name,
-          const classad::ArgumentList &arguments,
-          classad::EvalState          &state,
-          classad::Value              &result);
-
-static classad::ClassAdFunctionMapping functions[] = 
-{
-    { "evalRSL",  (void *) eval_rsl, 0 },
-    { "eval_rsl", (void *) eval_rsl, 0 },
-    { "",         NULL,              0 }
-};
-
-static bool g_globus_activated = false;
-
-extern "C" 
-{
-    classad::ClassAdFunctionMapping *Init(void)
-    {
-        return functions;
-    }
-
-    int
-    eval_rsl_fini(void) __attribute__ ((destructor));
-
-    int
-    eval_rsl_fini(void)
-    {
-        if (g_globus_activated)
-        {
-            globus_module_deactivate(GLOBUS_RSL_MODULE);
-        }
-        return 0;
-    }
-}
-
-static bool
-value_to_expr(globus_rsl_value_t * value, classad::ExprTree*& expr)
-{
-    if (globus_rsl_value_is_literal(value))
-    {
-        char * literal = globus_rsl_value_literal_get_string(value);
-        if (!literal) { return false; }
-        classad::Value val;
-        try
-        {
-            val.SetIntegerValue(boost::lexical_cast<long long>(literal));
-        }
-        catch (const boost::bad_lexical_cast &)
-        {
-            try
-            {
-                val.SetRealValue(boost::lexical_cast<double>(literal));
-            }
-            catch (const boost::bad_lexical_cast &)
-            {
-                std::string lower = literal;
-                boost::algorithm::to_lower(lower);
-                if (lower == "true") { val.SetBooleanValue(true); }
-                else if (lower == "false") { val.SetBooleanValue(false); }
-                else { val.SetStringValue(literal); }
-            }
-        }
-        expr = classad::Literal::MakeLiteral(val);
-        if (!expr) { return false; }
-        return true;
-    }
-    else if (globus_rsl_value_is_sequence(value))
-    {
-        globus_list_t * value_list = globus_rsl_value_sequence_get_value_list(value);
-        if (!value_list) { return false; }
-
-        classad::ExprList expr_list;
-        while (!globus_list_empty(value_list))
-        {
-            globus_rsl_value_t *list_item = static_cast<globus_rsl_value_t*>(globus_list_first(value_list));
-            value_list = globus_list_rest(value_list);
-            if (!list_item) { continue; }
-
-            classad::ExprTree *expr_item = NULL;
-            if (!value_to_expr(list_item, expr_item) || !expr_item) { continue; }
-
-            expr_list.push_back(expr_item);
-        }
-        expr = expr_list.Copy();
-        return expr ? true : false;
-    }
-    else if (globus_rsl_value_is_concatenation(value))
-    {
-        globus_rsl_value_t *left_value = globus_rsl_value_concatenation_get_left(value);
-        globus_rsl_value_t *right_value = globus_rsl_value_concatenation_get_right(value);
-        if (!left_value || !right_value) { return false; }
-
-        classad::ExprTree *left_expr = NULL, *right_expr = NULL;
-        if (!value_to_expr(left_value, left_expr) || !left_expr || !value_to_expr(right_value, right_expr) || !right_expr) { return false; }
-        std::vector<classad::ExprTree*> argList; argList.push_back(left_expr); argList.push_back(right_expr);
-
-        expr = classad::FunctionCall::MakeFunctionCall("strcat", argList);
-        return expr ? true : false;
-    }
-    else if (globus_rsl_value_is_variable(value))
-    {
-        char * char_variable_name = globus_rsl_value_variable_get_name(value);
-        char * default_value = globus_rsl_value_variable_get_default(value);
-        if (!char_variable_name) { return false; }
-
-        // Canonical forms of Globus RSL strip out all underscores and makes the string
-        // lowercase.  As ClassAds are case-preserving (and underscores are significant),
-        // we just do the former transform.
-        std::string variable_name(char_variable_name);
-        boost::algorithm::replace_all(variable_name, "_", "");
-
-        if (default_value)
-        {
-            // ifThenElse(isUndefined(variable_name), default_value, variable_name)
-            std::vector<classad::ExprTree*> ifArgList;
-
-            classad::ExprTree *attr1 = classad::AttributeReference::MakeAttributeReference(NULL, variable_name);
-            if (!attr1) { return false; }
-            std::vector<classad::ExprTree*> argList; argList.push_back(attr1);
-            classad::ExprTree *isUndefined = classad::FunctionCall::MakeFunctionCall("isUndefined", argList);
-            ifArgList.push_back(isUndefined);
-
-            classad::Value val; val.SetStringValue(default_value);
-            classad::ExprTree *lit = classad::Literal::MakeLiteral(val);
-            if (!lit) { return false; }
-            ifArgList.push_back(lit);
-
-            classad::ExprTree *attr2 = classad::AttributeReference::MakeAttributeReference(NULL, variable_name);
-            if (!attr2) { return false; }
-            ifArgList.push_back(attr2);
-
-            expr = classad::FunctionCall::MakeFunctionCall("ifThenElse", ifArgList);
-        }
-        else
-        {
-            expr = classad::AttributeReference::MakeAttributeReference(NULL, variable_name);
-        }
-        return expr ? true : false;
-    }
-    return false;
-}
-
-static bool
-rsl_to_classad(globus_rsl_t * rsl, classad::ClassAd &ad)
-{
-    if (!g_globus_activated)
-    {
-        globus_module_activate(GLOBUS_RSL_MODULE);
-        g_globus_activated = true;
-    }
-    if (!rsl) { return true; }
-    if (!globus_rsl_is_boolean(rsl)) { return false; }
-
-    globus_list_t * ops = globus_rsl_boolean_get_operand_list(rsl);
-    while (!globus_list_empty(ops))
-    {
-        globus_rsl_t *op_rsl = static_cast<globus_rsl_t*>(globus_list_first(ops));
-        ops = globus_list_rest(ops);
-        if (!op_rsl) { continue; }
-
-        if (globus_rsl_is_relation(op_rsl))
-        {
-            char * attr = globus_rsl_relation_get_attribute(op_rsl);
-            globus_rsl_value_t * value = globus_rsl_relation_get_value_sequence(op_rsl);
-            if (!attr || !value) { continue; }
-            globus_rsl_value_t * single_value = globus_rsl_relation_get_single_value(op_rsl);
-            if (single_value) { value = single_value; }
-
-            classad::ExprTree *expr = NULL;
-
-            if (!value_to_expr(value, expr) || !expr) { continue; }
-
-            ad.Insert(attr, expr);
-        }
-    }
-    return true;
-}
-
-
-static bool
-eval_rsl (const char *                 name,
-          const classad::ArgumentList &arguments,
-          classad::EvalState          &state,
-          classad::Value              &result)
-{
-
-    if (arguments.size() != 1)
-    {
-        std::stringstream ss;
-        result.SetErrorValue();
-        ss << "Invalid number of arguments passed to " << name << "; " << arguments.size() << "given, 1 required.";
-        classad::CondorErrMsg = ss.str();
-        return false;
-    }
-
-    std::string rsl_string;
-    classad::Value rsl_value;
-    if (!arguments[0]->Evaluate(state, rsl_value) || (!rsl_value.IsStringValue(rsl_string))) {
-        result.SetErrorValue();
-        std::string unp_string;
-        std::stringstream ss;
-        classad::ClassAdUnParser unp; unp.Unparse(unp_string, arguments[0]);
-        ss << "Could not evaluate the first argument of " << name << " to string.  Expression: " << unp_string << ".";
-        classad::CondorErrMsg = ss.str();
-        return false;
-    }
-    if (rsl_string[0] == '(')
-    {
-        rsl_string = "&" + rsl_string;
-    }
-
-    globus_rsl_t *rsl = globus_rsl_parse(const_cast<char*>(rsl_string.c_str()));
-    if (!rsl)
-    {
-        std::stringstream ss;
-        result.SetErrorValue();
-        ss << "Unable to parse string to RSL: " << rsl_string;
-        classad::CondorErrMsg = ss.str();
-        return false;
-    }
-
-    classad::ClassAd *ad = new classad::ClassAd();
-    if (!rsl_to_classad(rsl, *ad))
-    {
-        result.SetErrorValue();
-        std::stringstream ss;
-        ss << "Unable to convert RSL to ClassAd: " << rsl_string;
-        globus_rsl_free_recursive(rsl);
-        return false;
-    }
-    result.SetClassAdValue(ad);
-    globus_rsl_free_recursive(rsl);
-
-    return true;
-}
-
diff --git a/src/rslTester.cpp b/src/rslTester.cpp
deleted file mode 100644
index 6e63fd3..0000000
--- a/src/rslTester.cpp
+++ /dev/null
@@ -1,49 +0,0 @@
-
-#include <iostream>
-
-#include "classad/exprTree.h"
-#include "classad/fnCall.h"
-#include "classad/sink.h"
-
-int main ( int argc, const char *argv[] )
-{
-    if (argc != 3)
-    {
-        std::cerr << "Usage: " << argv[0] << " <module file> <rsl string>" << std::endl;
-        return 1;
-    }
-
-    if (!classad::FunctionCall::RegisterSharedLibraryFunctions(argv[1]))
-    {
-        std::cout << "Failed to load ClassAd user lib (" << argv[1] << "): " << classad::CondorErrMsg << std::endl;
-        return 2;
-    }
-
-    classad::Value val; val.SetStringValue(argv[2]);
-    classad::ExprTree *lit = classad::Literal::MakeLiteral(val);
-    std::vector<classad::ExprTree*> argList; argList.push_back(lit);
-    classad::ExprTree *expr = classad::FunctionCall::MakeFunctionCall("evalRSL", argList);
-    classad::Value result;
-    classad::EvalState state;
-    if (!expr->Evaluate(state, result))
-    {
-        std::cerr << "Unable to convert RSL to ClassAd (error: " << classad::CondorErrMsg << ")." << std::endl;
-        return 3;
-    }
-    delete expr;
-
-    std::cout << "Resulting ClassAd" << std::endl;
-    classad::PrettyPrint pp;
-    std::string text_result;
-    pp.Unparse(text_result, result);
-    std::cout << text_result << std::endl;
-
-    classad::ClassAd *ad;
-    if (result.IsClassAdValue(ad))
-    {
-        delete ad;
-        result.SetErrorValue();
-    }
-    return 0;
-}
-
