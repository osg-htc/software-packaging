From 91ec5a299827e30399a3bd7b05bc8b2f32b1b8cf Mon Sep 17 00:00:00 2001
From: Matyas Selmeci <matyas@siren.cs.wisc.edu>
Date: Wed, 14 Feb 2018 14:22:58 -0600
Subject: [PATCH 102/105] voms-proxy-direct: drop -newsubject and -newissuer

---
 doc/voms-proxy-direct.xml | 12 ------------
 src/utils/vomsdirect.cc   | 16 +---------------
 2 files changed, 1 insertion(+), 27 deletions(-)

diff --git a/doc/voms-proxy-direct.xml b/doc/voms-proxy-direct.xml
index 3f22127..8df6e16 100644
--- a/doc/voms-proxy-direct.xml
+++ b/doc/voms-proxy-direct.xml
@@ -129,22 +129,10 @@ The string that will be included in the AC as the granted FQAN.</para>
 
 <para><option>-newformat</option></para>
 <para>This forces the server to generate ACs in the new (correct) format.  This is meant
 as a compatibility feature to ease migration while the servers upgrade to the new version.</para>
 
-<para><option>-newsubject</option> <replaceable>newdn</replaceable></para>
-<para>The created proxy will have <emphasis remap='I'>newdn</emphasis> as
-subject rather  than what is would normally have depending on the
-specific version of proxy created. Non-printable characters may be specified
-via the '\XX' encoding, where XX are two hexadecimal characters.</para>
-
-<para><option>-newissuer</option> <replaceable>newdn</replaceable></para>
-<para>The created proxy will have <emphasis remap='I'>newdn</emphasis> as
-issuer rather  than what is would normally have depending on the
-specific version of proxy created. Non-printable characters may be specified
-via the '\XX' encoding, where XX are two hexadecimal characters.</para>
-
 <para><option>-newserial</option> <replaceable>newserial</replaceable></para>
 <para>The created proxy will have
   the <emphasis remap='I'>newserial</emphasis> as its serial number.
   The new serial number will have to be specified as an hex
   representation.  Any length is possible.  If this option is not
diff --git a/src/utils/vomsdirect.cc b/src/utils/vomsdirect.cc
index b89b819..64c78c6 100644
--- a/src/utils/vomsdirect.cc
+++ b/src/utils/vomsdirect.cc
@@ -183,12 +183,11 @@ Fake::Fake(int argc, char ** argv) :   confile(conf_file_name),
                                        class_add_buf_len(0),
 #endif
                                        ucert(NULL), upkey(NULL), cert_chain(NULL),
                                        aclist(NULL), voID(""),
                                        hostcert(""), hostkey(""),
-                                       newformat(false), newsubject(""),
-                                       newissuer(""),
+                                       newformat(false),
                                        rfc(false), pastac("0"), pastproxy("0"),
                                        keyusage(""), netscape(""), exkusage(""),
                                        newserial(""), selfsigned(false)
 {
 
@@ -241,12 +240,10 @@ Fake::Fake(int argc, char ** argv) :   confile(conf_file_name),
     "    -separate <file>               Saves the information returned by the server into file <file>.\n" \
     "    -hostcert <file>               Host certificate used for signing the attributes.\n" \
     "    -hostkey <file>                Host private key used for signing the attributes.\n" \
     "    -fqan <string>                 String to include in the AC as the granted FQAN.\n" \
     "    -newformat                     Creates ACs according to the new format.\n" \
-    "    -newsubject <string>           Subject of the new certificate.\n" \
-    "    -newissuer <string>            Issuer of the new certificate.\n"\
     "    -pastac <seconds>\n"
     "    -pastac <hour:minutes>         Start the validity of the AC in the past,\n"\
     "    -pastproxy <seconds>\n"
     "    -pastproxy <hour:minutes>      Start the validity of the proxy in the past,\n"\
     "    -keyusage <bit<,bit<..>>>      Specifies the bits to put in the keyusage field.\n"\
@@ -308,12 +305,10 @@ Fake::Fake(int argc, char ** argv) :   confile(conf_file_name),
     {"uri",             1, (int *)&uri,         OPT_STRING},
     {"hostcert",        1, (int *)&hostcert,    OPT_STRING},
     {"hostkey",         1, (int *)&hostkey,     OPT_STRING},
     {"fqan",            1, (int *)&fqans,       OPT_MULTI},
     {"newformat",       1, (int *)&newformat,   OPT_BOOL},
-    {"newsubject",      1, (int *)&newsubject,  OPT_STRING},
-    {"newissuer",       1, (int *)&newissuer,   OPT_STRING},
     {"voinfo",          1, (int *)&voinfo,      OPT_STRING},
     {"pastac",          1, (int *)&pastac,      OPT_STRING},
     {"pastproxy",       1, (int *)&pastproxy,   OPT_STRING},
     {"keyusage",        1, (int *)&keyusage,    OPT_STRING},
     {"nscert",          1, (int *)&netscape,    OPT_STRING},
@@ -595,17 +590,10 @@ bool Fake::CreateProxy(std::string data, AC ** aclist, int version)
     args->proxyversion  = version;
     if (!data.empty()) {
       args->data          = (char*)data.data();
       args->datalen       = data.length();
     }
-    if (!newsubject.empty()) {
-      args->newsubject       = strdup(newsubject.c_str());
-      args->newsubjectlen    = strlen(args->newsubject);
-    }
-    if (!newissuer.empty()) {
-      args->newissuer        = strdup(newissuer.c_str());
-    }
     args->cert          = ucert;
     args->chain         = cert_chain;
     args->key           = upkey;
     args->bits          = bits;
     if (!policyfile.empty())
@@ -654,12 +642,10 @@ bool Fake::CreateProxy(std::string data, AC ** aclist, int version)
     PrintProxyCreationError(warn, additional);
 
     free(args->voID);
     free(args->proxyfilename);
     free(args->filename);
-    free(args->newsubject);
-    free(args->newissuer);
     free(args->newserial);
     free(args->policyfile);
     free(args->policylang);
     free(args->keyusage);
     free(args->netscape);
-- 
2.6.3

