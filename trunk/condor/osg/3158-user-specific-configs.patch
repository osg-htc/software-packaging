diff --git a/src/condor_utils/condor_config.cpp b/src/condor_utils/condor_config.cpp
index 4a6f6ea..d9ed268 100644
--- a/src/condor_utils/condor_config.cpp
+++ b/src/condor_utils/condor_config.cpp
@@ -86,6 +86,7 @@
 #include "param_info.h"
 #include "param_info_tables.h"
 #include "Regex.h"
+#include "filename_tools.h"
 #include <algorithm> // for std::sort
 
 // define this to keep param who's values match defaults from going into to runtime param table.
@@ -114,6 +115,7 @@ void process_locals( const char*, const char*);
 void process_directory( const char* dirlist, const char* host);
 static int  process_dynamic_configs();
 void check_params();
+bool find_user_file(MyString & filename, const char * basename, bool check_access);
 
 // External variables
 extern int	ConfigLineNo;
@@ -980,6 +982,18 @@ real_config(const char* host, int wantsQuiet, int config_options)
 	if(dirlist) { free(dirlist); dirlist = NULL; }
 	if(newdirlist) { free(newdirlist); newdirlist = NULL; }
 
+		// Now, insert overrides from the user config file (if any)
+	std::string user_config_name;
+	param(user_config_name, "USER_CONFIG_FILE");
+	if (!user_config_name.empty()) {
+		MyString user_config;
+		if (find_user_file(user_config, user_config_name.c_str(), true)) {
+			dprintf(D_FULLDEBUG|D_CONFIG, "Reading condor user-specific configuration from '%s'\n", user_config.c_str());
+			process_config_source(user_config.c_str(), 1, "user_config source", host, false);
+			local_config_sources.append(user_config.c_str());
+		}
+	}
+
 		// Now, insert any macros defined in the environment.
 	char **my_environ = GetEnviron();
 	for( int i = 0; my_environ[i]; i++ ) {
@@ -1333,6 +1347,54 @@ find_global(int config_options)
 	return find_file( EnvGetName(ENV_CONFIG), file.Value(), config_options );
 }
 
+// Find user-specific location of a file
+// Returns true if found, and puts the location in the file_location argument.
+// If not found, returns false.  The contents of file_location are undefined.
+// if basename is a fully qualified path, then it is used as-is. otherwise
+// it is prefixed with ~/.condor/ to create the effective file location
+bool
+find_user_file(MyString &file_location, const char * basename, bool check_access)
+{
+	file_location.clear();
+	if ( ! basename || ! basename[0])
+		return false;
+
+	if (can_switch_ids())
+		return false;
+	if ( ! is_relative_to_cwd(basename)) {
+		file_location = basename;
+	} else {
+#ifdef UNIX
+		// $HOME/.condor/user_config
+		struct passwd *pw = getpwuid( geteuid() );
+		if ( !pw || !pw->pw_dir) {
+			return false;
+		}
+		formatstr(file_location, "%s/.%s/%s", pw->pw_dir, myDistro->Get(), basename);
+#elif defined WIN32
+		// %USERPROFILE%\.condor\user_config
+		const char * pw_dir = getenv("USERPROFILE");
+		if ( !pw_dir)
+			return false;
+		formatstr(file_location, "%s\\.%s\\%s", pw_dir, myDistro->Get(), basename);
+#else
+		const char * pw_dir = getenv("HOME");
+		if ( !pw_dir)
+			return false;
+		formatstr(file_location, "%s/.%s/%s", pw_dir, myDistro->Get(), basename);
+#endif
+	}
+	if (check_access) {
+		int fd = safe_open_wrapper_follow(file_location.c_str(), O_RDONLY);
+		if (fd < 0) {
+			return false;
+		} else {
+			close(fd);
+		}
+	}
+
+	return true;
+}
 
 // Find location of specified file
 char*
@@ -1396,11 +1458,8 @@ find_file(const char *env_name, const char *file_name, int config_options)
 		const int locations_length = 4;
 		MyString locations[locations_length];
 			// 1) $HOME/.condor/condor_config
-		struct passwd *pw = getpwuid( geteuid() );
-		if ( !can_switch_ids() && pw && pw->pw_dir ) {
-			formatstr( locations[0], "%s/.%s/%s", pw->pw_dir, myDistro->Get(),
-					 file_name );
-		}
+		// $HOME/.condor/condor_config was added for BOSCO and never used, We are removing it in 8.3.1, but may put it back if users complain.
+		//find_user_file(locations[0], file_name, false);
 			// 2) /etc/condor/condor_config
 		locations[1].formatstr( "/etc/%s/%s", myDistro->Get(), file_name );
 			// 3) /usr/local/etc/condor_config (FreeBSD)
diff --git a/src/condor_utils/param_info.in b/src/condor_utils/param_info.in
index b945d94..6861ccf 100644
--- a/src/condor_utils/param_info.in
+++ b/src/condor_utils/param_info.in
@@ -3608,6 +3608,13 @@ friendly_name=Runtime Config Admin
 review=?
 tags=c++_util,condor_config
 
+[USER_CONFIG_FILE]
+default=user_config
+type=string
+reconfig=true
+customization=seldom
+friendly_name=Name of User Config File
+tags=condor_config
 
 [ENABLE_PERSISTENT_CONFIG]
 default=false
