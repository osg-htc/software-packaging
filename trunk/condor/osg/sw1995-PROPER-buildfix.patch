commit 3a6c3bc8c2afc9e1c25a49222c5d5b398cf49442
Author: Carl Edquist <edquist@cs.wisc.edu>
Date:   Mon Aug 17 20:47:10 2015 -0500

    Revert "Reverse how CMAKE_C_FLAGS and CMAKE_CXX_FLAGS are set."
    
    This reverts commit 8969b7fc89c7bbf02e1b1f1586ac9d77a226e704.

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6160d7a..fb31f94 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -89,7 +89,6 @@ include (CondorDaemon)
 include (CondorPrecompiledHeaders)
 include (CondorStaticLib)
 include (CondorPlugin)
-include (CheckCCompilerFlag)
 include (CheckCXXCompilerFlag)
 include (CheckCXXSourceCompiles)
 include (AddSubdirectories)
diff --git a/build/cmake/CondorConfigure.cmake b/build/cmake/CondorConfigure.cmake
index 58b377b..1469b62 100644
--- a/build/cmake/CondorConfigure.cmake
+++ b/build/cmake/CondorConfigure.cmake
@@ -493,7 +493,7 @@ if (${OS_NAME} STREQUAL "SUNOS")
 	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lkstat -lelf -lnsl -lsocket")
 
 	#update for solaris builds to use pre-reqs namely binutils in this case
-	#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -B$ENV{PATH}")
+	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -B$ENV{PATH}")
 
 elseif(${OS_NAME} STREQUAL "LINUX")
 
@@ -713,7 +713,7 @@ if (LINUX
     # versions I can find actually use just '-z now':
     set(cxx_full_relro_arg "-Wl,-z,now")
     # compiling everything with -fPIC is important for PIE
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
 endif()
 
 
@@ -943,9 +943,6 @@ endif ()
 
 message(STATUS "----- Begin compiler options/flags check -----")
 
-if (CONDOR_C_FLAGS)
-	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CONDOR_C_FLAGS}")
-endif()
 if (CONDOR_CXX_FLAGS)
 	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CONDOR_CXX_FLAGS}")
 endif()
@@ -954,18 +951,18 @@ if(MSVC)
 	#disable autolink settings 
 	add_definitions(-DBOOST_ALL_NO_LIB)
 
-	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /FC")      # use full paths names in errors and warnings
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /FC")      # use full paths names in errors and warnings
 	if(MSVC_ANALYZE)
 		# turn on code analysis. 
 		# also disable 6211 (leak because of exception). we use new but not catch so this warning is just noise
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /analyze /wd6211") # turn on code analysis (level 6 warnings)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /analyze /wd6211") # turn on code analysis (level 6 warnings)
 	endif(MSVC_ANALYZE)
 
-	#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4251")  #
-	#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4275")  #
-	#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4996")  # deprecation warnings
-	#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4273")  # inconsistent dll linkage
-	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd6334") # inclusion warning from boost. 
+	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251")  #
+	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4275")  #
+	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996")  # deprecation warnings
+	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4273")  # inconsistent dll linkage
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd6334") # inclusion warning from boost. 
 
 	set(CONDOR_WIN_LIBS "crypt32.lib;mpr.lib;psapi.lib;mswsock.lib;netapi32.lib;imagehlp.lib;ws2_32.lib;powrprof.lib;iphlpapi.lib;userenv.lib;Pdh.lib")
 else(MSVC)
@@ -976,119 +973,119 @@ else(MSVC)
 		set(GLIBC${GLIBC_VERSION} ON)
 	endif(GLIBC_VERSION)
 
-	check_c_compiler_flag(-Wall c_Wall)
-	if (c_Wall)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
-	endif(c_Wall)
+	check_cxx_compiler_flag(-Wall cxx_Wall)
+	if (cxx_Wall)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
+	endif(cxx_Wall)
 
 	# Added to help make resulting libcondor_utils smaller.
-	#check_c_compiler_flag(-fno-exceptions no_exceptions)
+	#check_cxx_compiler_flag(-fno-exceptions no_exceptions)
 	#if (no_exceptions)
-	#	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-exceptions")
+	#	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")
 	#	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fno-exceptions")
 	#endif(no_exceptions)
-	#check_c_compiler_flag(-Os c_Os)
-	#if (c_Os)
-	#	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Os")
+	#check_cxx_compiler_flag(-Os cxx_Os)
+	#if (cxx_Os)
+	#	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Os")
 	#	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Os")
-	#endif(c_Os)
+	#endif(cxx_Os)
 
 	dprint("TSTCLAIR - DISABLING -flto b/c of gcc failure in koji try again later")
-	#if (CMAKE_C_COMPILER_VERSION STRGREATER "4.7.0" OR CMAKE_C_COMPILER_VERSION STREQUAL "4.7.0")
+	#if (CMAKE_CXX_COMPILER_VERSION STRGREATER "4.7.0" OR CMAKE_CXX_COMPILER_VERSION STREQUAL "4.7.0")
 	#   
-	#  check_c_compiler_flag(-flto c_lto)
-	#  if (c_lto)
-	#	  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
+	#  check_cxx_compiler_flag(-flto cxx_lto)
+	#  if (cxx_lto)
+	#	  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto")
 	#	  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -flto")
-	#  endif(c_lto)
+	#  endif(cxx_lto)
 	#else()
-	#  dprint("skipping c_lto flag check")
+	#  dprint("skipping cxx_lto flag check")
 	#endif()
 
-	check_c_compiler_flag(-W c_W)
-	if (c_W)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W")
-	endif(c_W)
+	check_cxx_compiler_flag(-W cxx_W)
+	if (cxx_W)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W")
+	endif(cxx_W)
 
-	check_c_compiler_flag(-Wextra c_Wextra)
-	if (c_Wextra)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wextra")
-	endif(c_Wextra)
+	check_cxx_compiler_flag(-Wextra cxx_Wextra)
+	if (cxx_Wextra)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")
+	endif(cxx_Wextra)
 
-	check_c_compiler_flag(-Wfloat-equal c_Wfloat_equal)
-	if (c_Wfloat_equal)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wfloat-equal")
-	endif(c_Wfloat_equal)
+	check_cxx_compiler_flag(-Wfloat-equal cxx_Wfloat_equal)
+	if (cxx_Wfloat_equal)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfloat-equal")
+	endif(cxx_Wfloat_equal)
 
-	#check_c_compiler_flag(-Wshadow c_Wshadow)
-	#if (c_Wshadow)
-	#	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wshadow")
-	#endif(c_Wshadow)
+	#check_cxx_compiler_flag(-Wshadow cxx_Wshadow)
+	#if (cxx_Wshadow)
+	#	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wshadow")
+	#endif(cxx_Wshadow)
 
 	# someone else can enable this, as it overshadows all other warnings and can be wrong.
-	# check_c_compiler_flag(-Wunreachable-code c_Wunreachable_code)
-	# if (c_Wunreachable_code)
-	#	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wunreachable-code")
-	# endif(c_Wunreachable_code)
-
-	check_c_compiler_flag(-Wendif-labels c_Wendif_labels)
-	if (c_Wendif_labels)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wendif-labels")
-	endif(c_Wendif_labels)
-
-	check_c_compiler_flag(-Wpointer-arith c_Wpointer_arith)
-	if (c_Wpointer_arith)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wpointer-arith")
-	endif(c_Wpointer_arith)
-
-	check_c_compiler_flag(-Wcast-qual c_Wcast_qual)
-	if (c_Wcast_qual)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wcast-qual")
-	endif(c_Wcast_qual)
-
-	check_c_compiler_flag(-Wcast-align c_Wcast_align)
-	if (c_Wcast_align)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wcast-align")
-	endif(c_Wcast_align)
-
-	check_c_compiler_flag(-Wvolatile-register-var c_Wvolatile_register_var)
-	if (c_Wvolatile_register_var)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wvolatile-register-var")
-	endif(c_Wvolatile_register_var)
-
-	check_c_compiler_flag(-Wunused-local-typedefs c_Wunused_local_typedefs)
-	if (c_Wunused_local_typedefs AND NOT "${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" )
+	# check_cxx_compiler_flag(-Wunreachable-code cxx_Wunreachable_code)
+	# if (cxx_Wunreachable_code)
+	#	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wunreachable-code")
+	# endif(cxx_Wunreachable_code)
+
+	check_cxx_compiler_flag(-Wendif-labels cxx_Wendif_labels)
+	if (cxx_Wendif_labels)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wendif-labels")
+	endif(cxx_Wendif_labels)
+
+	check_cxx_compiler_flag(-Wpointer-arith cxx_Wpointer_arith)
+	if (cxx_Wpointer_arith)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpointer-arith")
+	endif(cxx_Wpointer_arith)
+
+	check_cxx_compiler_flag(-Wcast-qual cxx_Wcast_qual)
+	if (cxx_Wcast_qual)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-qual")
+	endif(cxx_Wcast_qual)
+
+	check_cxx_compiler_flag(-Wcast-align cxx_Wcast_align)
+	if (cxx_Wcast_align)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align")
+	endif(cxx_Wcast_align)
+
+	check_cxx_compiler_flag(-Wvolatile-register-var cxx_Wvolatile_register_var)
+	if (cxx_Wvolatile_register_var)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wvolatile-register-var")
+	endif(cxx_Wvolatile_register_var)
+
+	check_cxx_compiler_flag(-Wunused-local-typedefs cxx_Wunused_local_typedefs)
+	if (cxx_Wunused_local_typedefs AND NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
 		# we don't ever want the 'unused local typedefs' warning treated as an error.
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error=unused-local-typedefs")
-	endif(c_Wunused_local_typedefs AND NOT "${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-local-typedefs")
+	endif(cxx_Wunused_local_typedefs AND NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
 
 	# check compiler flag not working for this flag.  
-	if (NOT CMAKE_C_COMPILER_VERSION VERSION_LESS "4.8")
-	check_c_compiler_flag(-Wdeprecated-declarations c_Wdeprecated_declarations)
-	if (c_Wdeprecated_declarations)
+	if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8")
+	check_cxx_compiler_flag(-Wdeprecated-declarations cxx_Wdeprecated_declarations)
+	if (cxx_Wdeprecated_declarations)
 		# we use deprecated declarations ourselves during refactoring,
 		# so we always want them treated as warnings and not errors
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wdeprecated-declarations -Wno-error=deprecated-declarations")
-	endif(c_Wdeprecated_declarations)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wdeprecated-declarations -Wno-error=deprecated-declarations")
+	endif(cxx_Wdeprecated_declarations)
 	endif()
 
 	# gcc on our AIX machines recognizes -fstack-protector, but lacks
 	# the requisite library.
 	if (NOT AIX)
-		check_c_compiler_flag(-fstack-protector c_fstack_protector)
-		if (c_fstack_protector)
-			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector")
-		endif(c_fstack_protector)
+		check_cxx_compiler_flag(-fstack-protector cxx_fstack_protector)
+		if (cxx_fstack_protector)
+			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector")
+		endif(cxx_fstack_protector)
 	endif(NOT AIX)
 
 	# Clang on Mac OS X doesn't support -rdynamic, but the
 	# check below claims it does. This is probably because the compiler
 	# just prints a warning, rather than failing.
-	if ( NOT "${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" )
-		check_c_compiler_flag(-rdynamic c_rdynamic)
-		if (c_rdynamic)
-			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -rdynamic")
-		endif(c_rdynamic)
+	if ( NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
+		check_cxx_compiler_flag(-rdynamic cxx_rdynamic)
+		if (cxx_rdynamic)
+			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic")
+		endif(cxx_rdynamic)
 	endif()
 
 	if (LINUX)
@@ -1129,18 +1126,19 @@ else(MSVC)
 		endif()
 
 		# set for maximum binary compatibility based on current machine arch.
-		check_c_compiler_flag(-mtune=generic c_mtune)
-		if (c_mtune)
-			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mtune=generic")
-		endif(c_mtune)
+		check_cxx_compiler_flag(-mtune=generic cxx_mtune)
+		if (cxx_mtune)
+			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mtune=generic")
+		endif(cxx_mtune)
 
 	endif()
 
 	add_definitions(-D${SYS_ARCH}=${SYS_ARCH})
 
-	# Append C flags list to C++ flags list.
-	# Currently, there are no flags that are only valid for C files.
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}")
+	# copy in C only flags into CMAKE_C_FLAGS
+	string(REPLACE "-std=c++11" "" CMAKE_C_FLAGS ${CMAKE_CXX_FLAGS})
+	# Only relevant for clang / Mac OS X
+	string(REPLACE "-stdlib=libc++" "" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
 
 endif(MSVC)
 
diff --git a/nmi_tools/glue/build/remote_task b/nmi_tools/glue/build/remote_task
index 6acc3c1..26401e1 100755
--- a/nmi_tools/glue/build/remote_task
+++ b/nmi_tools/glue/build/remote_task
@@ -93,7 +93,7 @@ if ($ENV{NMI_PLATFORM} =~ /macos/i) {
 # Build with warnings == errors on Fedora
 my $werror="";
 if ($ENV{NMI_PLATFORM} =~ /_fedora(_)?[12][0-9]/i) {
-    $werror = "-DCONDOR_C_FLAGS:STRING=-Werror";
+    $werror = "-DCONDOR_CXX_FLAGS:STRING=-Werror";
 }
 
 # enable use of VisualStudio 2012 (vs11) on the Windows8 platform
