From 5f288ac20f2cb42c1b9b4ec202f601a7c9268202 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Mon, 27 Aug 2012 10:54:25 -0500
Subject: [PATCH 1/2] Do not invoke Globus callout unless it is requested.  Allow the callout itself to be selected via a Condor parameter (defaulting to the Globus default).  gt2103 gt2104.

---
 src/condor_io/authentication.cpp   |   16 +++++++---------
 src/condor_io/condor_auth_x509.cpp |   36 ++++++++++++------------------------
 2 files changed, 19 insertions(+), 33 deletions(-)

diff --git a/src/condor_io/authentication.cpp b/src/condor_io/authentication.cpp
index 4a11db0..9bd05c9 100644
--- a/src/condor_io/authentication.cpp
+++ b/src/condor_io/authentication.cpp
@@ -476,17 +476,15 @@ void Authentication::map_authentication_name_to_canonical_name(int authenticatio
 			//
 			if ((authentication_type == CAUTH_GSI) && (canonical_user == "GSS_ASSIST_GRIDMAP")) {
 #if defined(HAVE_EXT_GLOBUS)
-				// it's already been done.  we just need to return here so we don't
-				// set anything below.
 
-				// ((Condor_Auth_X509*)authenticator_)->nameGssToLocal( authentication_name );
+				// nameGssToLocal calls setRemoteFoo directly.
+				int retval = ((Condor_Auth_X509*)authenticator_)->nameGssToLocal( authentication_name );
 
-				// that function calls setRemoteUser() and setRemoteDomain().
-				//
-				// this api should actually just return the canonical user,
-				// and we should split it into user and domain in this function,
-				// and not invoke setRemoteFoo() directly in nameGssToLocal().
-				dprintf (D_SECURITY, "ZKM: GRIDMAPPED!\n");
+				if (retval) {
+					dprintf (D_SECURITY, "Globus-based mapping was successful.\n");
+				} else {
+					dprintf (D_SECURITY, "Globus-based mapping failed; will use gsi@unmapped.\n");
+				}
 #else
 				dprintf(D_ALWAYS, "ZKM: GSI not compiled, but was used?!!");
 #endif
diff --git a/src/condor_io/condor_auth_x509.cpp b/src/condor_io/condor_auth_x509.cpp
index 4b349b8..3f06b48 100644
--- a/src/condor_io/condor_auth_x509.cpp
+++ b/src/condor_io/condor_auth_x509.cpp
@@ -66,6 +66,13 @@ Condor_Auth_X509 :: Condor_Auth_X509(ReliSock * sock)
 	ParseMapFile();
 #endif
 	if ( !m_globusActivated ) {
+		std::string gsi_authz_conf;
+		if (param(gsi_authz_conf, "GSI_AUTHZ_CONF")) {
+			if (globus_libc_setenv("GSI_AUTHZ_CONF", gsi_authz_conf.c_str(), 1)) {
+				dprintf(D_ALWAYS, "Failed to set the GSI_AUTHZ_CONF environment variable.\n");
+				EXCEPT("Failed to set the GSI_AUTHZ_CONF environment variable.\n");
+			}
+		}
 		globus_module_activate( GLOBUS_GSI_GSSAPI_MODULE );
 		globus_module_activate( GLOBUS_GSI_GSS_ASSIST_MODULE );
 		m_globusActivated = true;
@@ -745,18 +752,9 @@ int Condor_Auth_X509::authenticate_client_gss(CondorError* errstack)
 		// store the raw subject name for later mapping
 		setAuthenticatedName(server);
 
-        // Try to map DN to local name (in the format of name@domain)
-        if ( !nameGssToLocal(server) ) {
-			errstack->pushf("GSI", GSI_ERR_AUTHENTICATION_FAILED,
-				"Failed to gss_assist_gridmap %s to a local user.  "
-				"Check the grid-mapfile.", server );
-			dprintf(D_SECURITY, "gss_assist_gridmap does not contain an entry for %s\n", server );
-			setRemoteUser("gsi");
-        }
-        else {
-            dprintf(D_SECURITY,"gss_assist_gridmap contains an entry for %s\n", 
-                    server);
-        }
+		// Default to user name "gsi".
+		// Later on, if configured, we will invoke the callout in nameGssToLocal.
+		setRemoteUser("gsi");
 
 		// extract and store VOMS attributes
 		if (param_boolean("USE_VOMS_ATTRIBUTES", true)) {
@@ -943,6 +941,8 @@ int Condor_Auth_X509::authenticate_server_gss(CondorError* errstack)
     else {
 		// store the raw subject name for later mapping
 		setAuthenticatedName(GSSClientname);
+		setRemoteUser("gsi");
+
 		if (param_boolean("USE_VOMS_ATTRIBUTES", true)) {
 
 			// get the voms attributes from the peer
@@ -959,18 +959,6 @@ int Condor_Auth_X509::authenticate_server_gss(CondorError* errstack)
 			}
 		}
 
-        // Try to map DN to local name (in the format of name@domain)
-        if ( (status = nameGssToLocal(GSSClientname) ) == 0) {
-			errstack->pushf("GSI", GSI_ERR_AUTHENTICATION_FAILED,
-				"Failed to gss_assist_gridmap %s to a local user.  "
-				"Check the grid-mapfile.", GSSClientname);
-			dprintf(D_SECURITY, "gss_assist_gridmap does not contain an entry for %s\n", GSSClientname);
-        }
-        else {
-            dprintf(D_SECURITY,"gss_assist_gridmap contains an entry for %s\n", 
-                    GSSClientname);
-        }
-
 		// XXX FIXME ZKM
 		// i am making failure to be mapped a non-fatal error at this point.
 		status = 1;
-- 
1.7.4.1


From 96af7de008507a2d82be0a9c34f94506bb8c4c02 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Tue, 28 Aug 2012 13:30:18 -0500
Subject: [PATCH 2/2] Take care of case where no Condor mapfile is present.  Change mappings to gsi@unmapped explicitly.

---
 src/condor_io/authentication.cpp   |   21 +++++++++++++++++++--
 src/condor_io/condor_auth_x509.cpp |    4 +++-
 2 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/src/condor_io/authentication.cpp b/src/condor_io/authentication.cpp
index 9bd05c9..d407cf3 100644
--- a/src/condor_io/authentication.cpp
+++ b/src/condor_io/authentication.cpp
@@ -362,6 +362,18 @@ int Authentication::authenticate_inner( char *hostAddr, const char* auth_methods
 		} else {
 			dprintf (D_SECURITY, "ZKM: name to map is null, not mapping.\n");
 		}
+	} else if (auth_status == CAUTH_GSI ) {
+		// Fall back to using the globus mapping mechanism.  GSI is a bit unique in that
+		// it may be horribly expensive - or cause a SEGFAULT - to do an authorization callout.
+		// Hence, we delay it until after we apply a mapfile or, here, have no map file.
+		// nameGssToLocal calls setRemoteFoo directly.
+		const char * name_to_map = authenticator_->getAuthenticatedName();
+		if (name_to_map) {
+			int retval = ((Condor_Auth_X509*)authenticator_)->nameGssToLocal(name_to_map);
+			dprintf(D_SECURITY, "nameGssToLocal returned %s\n", retval ? "success" : "failure");
+		} else {
+			dprintf (D_SECURITY, "ZKM: name to map is null, not calling GSI authorization.\n");
+		}
 	}
 	// for now, let's be a bit more verbose and print this to D_SECURITY.
 	// yeah, probably all of the log lines that start with ZKM: should be
@@ -508,8 +520,13 @@ void Authentication::map_authentication_name_to_canonical_name(int authenticatio
 		} else {
 			dprintf (D_FULLDEBUG, "ZKM: did not find user %s.\n", canonical_user.Value());
 		}
-	} else {
-		dprintf (D_FULLDEBUG, "ZKM: global_map_file not present!\n");
+	} else if (authentication_type == CAUTH_GSI) {
+        // See notes above around the nameGssToLocal call about why we invoke GSI authorization here.
+        // Theoretically, it should be impossible to hit this case - the invoking function thought
+		// we had a mapfile, but we couldnt create one.  This just covers weird corner cases.
+
+		int retval = ((Condor_Auth_X509*)authenticator_)->nameGssToLocal(authentication_name);
+		dprintf(D_SECURITY, "nameGssToLocal returned %s\n", retval ? "success" : "failure");
 	}
 
 }
diff --git a/src/condor_io/condor_auth_x509.cpp b/src/condor_io/condor_auth_x509.cpp
index 3f06b48..11117b7 100644
--- a/src/condor_io/condor_auth_x509.cpp
+++ b/src/condor_io/condor_auth_x509.cpp
@@ -752,9 +752,10 @@ int Condor_Auth_X509::authenticate_client_gss(CondorError* errstack)
 		// store the raw subject name for later mapping
 		setAuthenticatedName(server);
 
-		// Default to user name "gsi".
+		// Default to user name "gsi@unmapped".
 		// Later on, if configured, we will invoke the callout in nameGssToLocal.
 		setRemoteUser("gsi");
+		setRemoteDomain( UNMAPPED_DOMAIN );
 
 		// extract and store VOMS attributes
 		if (param_boolean("USE_VOMS_ATTRIBUTES", true)) {
@@ -942,6 +943,7 @@ int Condor_Auth_X509::authenticate_server_gss(CondorError* errstack)
 		// store the raw subject name for later mapping
 		setAuthenticatedName(GSSClientname);
 		setRemoteUser("gsi");
+		setRemoteDomain( UNMAPPED_DOMAIN );
 
 		if (param_boolean("USE_VOMS_ATTRIBUTES", true)) {
 
-- 
1.7.4.1

