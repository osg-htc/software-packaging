Index: pbs.pm
===================================================================
--- pbs.pm.orig	2011-09-22 08:20:21.000000002 -0500
+++ pbs.pm	2013-08-26 13:16:26.000000002 -0500
@@ -23,13 +23,15 @@
 
 @ISA = qw(Globus::GRAM::JobManager);
 
-my ($mpirun, $mpiexec, $qsub, $qstat, $qdel, $cluster, $cpu_per_node, $remote_shell);
+my ($mpisoftenv, $mpirun, $mpiexec, $qsub, $qstat, $qdel, $cluster, $cpu_per_node, $remote_shell, $soft_msc);
 
 BEGIN
 {
     my $config = new Globus::Core::Config(
             '${sysconfdir}/globus/globus-pbs.conf');
 
+    $mpisoftenv     = 0; # 0=false, 1=true, should be via config
+
     $mpiexec = $config->get_attribute('mpiexec') || 'no';
     if ($mpiexec ne 'no' && ! -x $mpiexec)
     {
@@ -337,7 +339,18 @@
             Globus::GRAM::Error::TEMP_SCRIPT_FILE_FAILED());
     }
 
-    if (defined $description->nodes())
+###############################################################################
+# TeraGrid -- prews node type/property and node name based selection support
+###############################################################################
+    my @hosttypes = $description->hosttypes();
+    my @hostnames = $description->hostnames();
+    my @hostxcount = $description->hostxcount();
+    my @xcount = $description->xcount();
+    if ( (scalar @hosttypes) || (scalar @hostnames) || (scalar @hostxcount) || (scalar @xcount) ) {
+        handle_prews_nodes($self, $description);
+        print JOB '#PBS -l nodes=', $description->nodes(), "\n";
+    }
+    elsif (defined $description->nodes())
     {
         #Generated by ExtensionsHandler.pm from resourceAllocationGroup elements
         $rc = print JOB '#PBS -l nodes=', $description->nodes(), "\n";
@@ -401,6 +414,23 @@
                  .  'export ' . $tuple->[0] . ";\n";
     }
 
+###############################################################################
+
+###############################################################################
+# TeraGrid -- Advanced reservation selection
+# 06/30/2005, JP Navarro <navarro@mcs.anl.gov>
+###############################################################################
+    if($description->reservation_id() ne '')
+    {
+        print JOB '#PBS -W x=FLAGS:ADVRES:' .  $description->reservation_id() . "\n";
+    }
+###############################################################################
+
+#    print JOB '#PBS -v ' . join(',', @new_env) . "\n";
+
+###############################################################################
+
+
     $rc = print JOB "$rsh_env\n"
                 .  "#Change to directory requested by user\n"
                 . 'cd ' . $description->directory() . "\n";
@@ -512,7 +542,7 @@
         local(*CMD);
         if ( open( CMD, ">$cmd_script_name" ) ) 
         {
-            $rc = print CMD "#!/bin/sh\n";
+            $rc = print CMD "#!/bin/sh -l\n";
             if (!$rc)
             {
                 return $self->respond_with_failure_extension(
@@ -562,23 +592,33 @@
 
         if ($description->jobtype() eq "mpi")
         {
-            if ($mpiexec ne 'no')
-            {
-                my $machinefilearg = "";
-                if ($cluster)
-                {
-                    $machinefilearg = ' -machinefile $PBS_NODEFILE';
-                }
-                if ($description->totalprocesses() > 0)
-                {
-                    $rc = print JOB "$mpiexec $machinefilearg -n "
-                            . $description->totalprocesses();
-                }
-                else
+            my $this_count = ($description->totalprocesses() > 0) ?
+                $description->totalprocesses() : $description->count();
+            my $machinefilearg = ($cluster) ? ' -machinefile $PBS_NODEFILE' : '';
+
+            if ($mpisoftenv)
+            {
+                $rc = print JOB 'which mpiexec >/dev/null 2>&1' . "\n"
+                              . 'if [ $? == 0 ]; then' . "\n"
+                              . "  mpiexec $machinefilearg -n " . $this_count
+                              . " $cmd_script_name < " .  $description->stdin() . "\n"
+                              . 'else' . "\n"
+                              . '  which mpirun >/dev/null 2>&1' . "\n"
+                              . '  if [ $? == 0 ]; then' . "\n"
+                              . "    mpirun -np " . $this_count . $machinefilearg
+                              . " $cmd_script_name < " .  $description->stdin() . "\n"
+                              . '  else' . "\n";
+                if (!$rc)
                 {
-                    $rc = print JOB "$mpiexec $machinefilearg -n "
-                            . $description->count();
+                    return $self->respond_with_failure_extension(
+                            "print: $pbs_job_script_name: $!",
+                            Globus::GRAM::Error::TEMP_SCRIPT_FILE_FAILED());
                 }
+            }
+            if ($mpiexec ne 'no')
+            {
+                $rc = print JOB "$mpiexec $machinefilearg -n " . $this_count
+                              . " $cmd_script_name < " .  $description->stdin() . "\n";
                 if (!$rc)
                 {
                     return $self->respond_with_failure_extension(
@@ -588,14 +628,8 @@
             }
             else
             {
-                if ($description->totalprocesses() > 0)
-                {
-                    $rc = print JOB "$mpirun -np " . $description->totalprocesses();
-                }
-                else
-                {
-                    $rc = print JOB "$mpirun -np " . $description->count();
-                }
+                $rc = print JOB "$mpirun -np " . $this_count . $machinefilearg
+                             .  " $cmd_script_name < " .  $description->stdin() . "\n";
                 if (!$rc)
                 {
                     return $self->respond_with_failure_extension(
@@ -613,14 +647,17 @@
                     }
                 }
             }
-
-            $rc = print JOB " $cmd_script_name < ".$description->stdin() . "\n";
-            if (!$rc)
+            if ($mpisoftenv)
             {
-                return $self->respond_with_failure_extension(
-                        "print: $pbs_job_script_name: $!",
-                        Globus::GRAM::Error::TEMP_SCRIPT_FILE_FAILED());
-            }
+                $rc = print JOB '  fi' . "\n"
+                              . 'fi' . "\n";
+                if (!$rc)
+                {
+                    return $self->respond_with_failure_extension(
+                            "print: $pbs_job_script_name: $!",
+                            Globus::GRAM::Error::TEMP_SCRIPT_FILE_FAILED());
+                }
+             }
         }
         else
         {
@@ -690,10 +727,17 @@
     $self->nfssync( $pbs_qsub_err_name );
     $self->nfssync( $description->stdout, 1 );
     $self->nfssync( $description->stderr, 1 );
-    $self->log("submitting job -- $qsub < $pbs_job_script_name $errfile");
-    chomp($job_id = `$qsub < $pbs_job_script_name $errfile`);
+    $self->log("submitting job -- $qsub  $pbs_job_script_name $errfile");
+    chomp($qsub_out = `$qsub  $pbs_job_script_name $errfile`);
+    if ( $qsub_out =~ /Submitted batch job (\d+)/ ) {
+        $job_id = $1;
+    } elsif ( $qsub_out =~ /(\d+.*)/ ) {
+        $job_id = $1;
+    } else {
+        $job_id = 0;
+    }
 
-    if($? == 0)
+    if($? == 0 and $job_id != 0)
     {
         $self->log("job submission successful, setting state to PENDING");
         return {JOB_ID => $job_id,
@@ -822,4 +866,92 @@
     return $rc;
 }
 
+sub handle_prews_nodes {
+###############################################################################
+# TeraGrid -- prews node type/property and node name based selection support
+# 8/2004, 11/2005, JP Navarro <navarro@mcs.anl.gov>
+#
+# Support for the following RSL parameters:
+# 1) host_types [ host_xcount (nodes of each host_types) ] [ xcount (PPN) ]
+# 2) host_names                                            [ xcount (PPN) ]
+# 3)            [ host_xcount (nodes) ]                    [ xcount (PPN) ]
+#
+# TODO: normally count is used to compute total CPU time
+###############################################################################
+    my ($self, $description) = (shift, shift);
+    my @hosttypes = $description->hosttypes();
+    my @hostnames = $description->hostnames();
+    my @hostxcount = $description->hostxcount();
+    my @xcount = $description->xcount();
+    my ($this_hostxcount, $this_xcount, $this);
+    my $pbsnodes;
+    my $real_count; # Set to value that will supersede $description->count()
+
+    if(@hosttypes)
+    {
+        $self->log("host_types = " . scalar(@hosttypes));
+        foreach my $this_hosttype (@hosttypes)
+        {
+            $self->log("host_type = " . $this_hosttype);
+            $this_hostxcount = shift @hostxcount;
+            $this_xcount = shift @xcount;
+            $this = (($this_hostxcount) ? "$this_hostxcount:" : '1:') .
+                    $this_hosttype .
+                    (($this_xcount) ? ":ppn=$this_xcount" : '');
+            $pbsnodes .= ($pbsnodes) ? '+' : '';
+            $pbsnodes .= $this;
+            $real_count += (($this_hostxcount) ? $this_hostxcount : 1) * (($this_xcount) ? $this_xcount : 1);
+        }
+        $real_count ||= 1; # initialize
+    }
+    elsif(@hostnames)
+    {
+        $self->log("host_names = " . scalar(@hostnames));
+        foreach my $this_hostname (@hostnames)
+        {
+            $self->log("host_name = " . $this_hostname);
+            $this_xcount = shift @xcount;
+            $this = $this_hostname .
+                    (($this_xcount) ? ":ppn=$this_xcount" : '');
+            $pbsnodes .= ($pbsnodes) ? '+' : '';
+            $pbsnodes .= $this;
+            $real_count += (($this_xcount) ? $this_xcount : 1);
+        }
+        $real_count ||= 1; # initialize
+    }
+    elsif(@hostxcount)
+    {
+        $self->log("host_xcount = " . scalar(@hostxcount));
+        foreach my $this_hostxcount (@hostxcount)
+        {
+            $self->log("host_xcount = " . $this_hostxcount);
+            $this_xcount = shift @xcount;
+            $this = $this_hostxcount .
+                    (($this_xcount) ? ":ppn=$this_xcount" : '');
+            $pbsnodes .= ($pbsnodes) ? '+' : '';
+            $pbsnodes .= $this;
+            $real_count += $this_hostxcount * (($this_xcount) ? $this_xcount : 1);
+        }
+    }
+    elsif(@xcount)
+    {
+        $self->log("xcount = " . scalar(@xcount));
+        foreach my $this_xcount (@xcount)
+        {
+            $self->log("xcount = " . $this_xcount);
+            $this = "1:ppn=$this_xcount";
+            $pbsnodes .= ($pbsnodes) ? '+' : '';
+            $pbsnodes .= $this;
+            $real_count += $this_xcount;
+        }
+    }
+    else
+    {
+        $real_count = 1;
+        $pbsnodes = '1';
+    }
+    $description->add('totalprocesses', $real_count);
+    $description->add('nodes', $pbsnodes);
+}
+
 1;
