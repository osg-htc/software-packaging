commit b6145a8dc4e27fcd4a88b26a18312455da52f7fd
Author: Matyas Selmeci <matyas@cs.wisc.edu>
Date:   Wed May 24 21:31:23 2017 -0500

    EL 6 compat - use C++0x instead of C++11
    
    * remove use of nullptr

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 709cd50..e1f17fc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,7 +16,7 @@ if( CMAKE_COMPILER_IS_GNUCC )
   set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -DLCMAPS_GSI_MODE=1" )
 endif()
 
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x")
 set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
 
 include (FindPkgConfig)
diff --git a/src/GlobusSupport.cc b/src/GlobusSupport.cc
index 65d4b8b..3bab26c 100644
--- a/src/GlobusSupport.cc
+++ b/src/GlobusSupport.cc
@@ -20,7 +20,7 @@
 
 std::mutex initializer_mutex;
 bool g_globus_initialized = false;
-char *g_cert_dir = nullptr;
+char *g_cert_dir = 0;
 
 
 inline uint64_t monotonic_time() {
@@ -105,7 +105,7 @@ bool globus_deactivate() {
   globus_module_deactivate(GLOBUS_GSI_CERT_UTILS_MODULE);
 
   free(g_cert_dir);
-  g_cert_dir = nullptr;
+  g_cert_dir = 0;
 
   g_globus_initialized = false;
   return true;
@@ -154,7 +154,7 @@ class VerifyCtx {
 
   void acquire(X509_STORE * cert_store) {m_cert_store = cert_store;}
 
-  void release() {m_cert_store = nullptr;}
+  void release() {m_cert_store = 0;}
 
   globus_result_t operator() (globus_gsi_cred_handle_t cred_handle)
   {
@@ -162,12 +162,12 @@ class VerifyCtx {
 
     globus_result_t result = GLOBUS_SUCCESS;
 
-    X509 *cert = nullptr;
+    X509 *cert = 0;
     if (GLOBUS_SUCCESS != (result = globus_gsi_cred_get_cert(cred_handle, &cert))) {
       return result;
     }
 
-    STACK_OF(X509) *cert_chain = nullptr;
+    STACK_OF(X509) *cert_chain = 0;
     if (GLOBUS_SUCCESS != (result = globus_gsi_cred_get_cert_chain(cred_handle, &cert_chain))) {
       return result;
     }
@@ -209,9 +209,9 @@ class VerifyCtx {
     }
 
     // Remove the reference to the cert_chain so we can safely free it.
-    X509_STORE_CTX_set_chain(m_store_context, nullptr);
+    X509_STORE_CTX_set_chain(m_store_context, 0);
     sk_X509_pop_free(cert_chain, X509_free);
-    X509_STORE_CTX_set_cert(m_store_context, nullptr);
+    X509_STORE_CTX_set_cert(m_store_context, 0);
     X509_free(cert);
 
     // _cleanup resets the state of the context but doesn't free the
@@ -238,9 +238,9 @@ public:
 
 private:
   int m_callback_data_index;
-  globus_gsi_callback_data_t  m_callback_data = nullptr;
-  X509_STORE_CTX             *m_store_context = nullptr;
-  X509_STORE                 *m_cert_store = nullptr;
+  globus_gsi_callback_data_t  m_callback_data;
+  X509_STORE_CTX             *m_store_context;
+  X509_STORE                 *m_cert_store;
 };
 
 
@@ -367,7 +367,7 @@ public:
 private:
   std::atomic<uint64_t> m_expire_time;
   std::mutex m_mutex;
-  X509_STORE *m_cert_store = nullptr;
+  X509_STORE *m_cert_store;
   static const unsigned m_store_size = 63;
   static const unsigned m_expiry_secs = 600;
   static std::array<std::unique_ptr<CertStore>, m_store_size> m_store;
@@ -402,9 +402,9 @@ Verify::operator() (globus_gsi_cred_handle_t cred_handle)
 
 struct authz_state
 {
-  globus_gsi_cred_handle_t m_cred = nullptr;
-  char *m_subject = nullptr;
-  BIO *m_bio = nullptr;
+  globus_gsi_cred_handle_t m_cred;
+  char *m_subject;
+  BIO *m_bio;
 
   ~authz_state() {
     if (m_cred) {globus_gsi_cred_handle_destroy(m_cred);}
@@ -486,8 +486,8 @@ bool globus_verify(X509* cert, STACK_OF(X509*) chain, char** dn)
 
 bool globus_get_cert_and_chain(const char * creds, size_t credslen, X509 **cert, STACK_OF(X509) **chain)
 {
-  if (cert) {*cert = nullptr;}
-  if (chain) {*chain = nullptr;}
+  if (cert) {*cert = 0;}
+  if (chain) {*chain = 0;}
 
   authz_state state;
 
diff --git a/src/XrdLcmapsKey.cc b/src/XrdLcmapsKey.cc
index d8a6c4b..ed50253 100644
--- a/src/XrdLcmapsKey.cc
+++ b/src/XrdLcmapsKey.cc
@@ -23,13 +23,13 @@ GetKey(X509 *cert, STACK_OF(X509) *chain, XrdSecEntity &ent)
     bool found_grp = false;
 
     // This plugin overrides any prior group information.
-    free(ent.vorg); ent.vorg = nullptr;
-    free(ent.role); ent.role = nullptr;
-    free(ent.grps); ent.grps = nullptr;
-    free(ent.endorsements); ent.endorsements = nullptr;
+    free(ent.vorg); ent.vorg = 0;
+    free(ent.role); ent.role = 0;
+    free(ent.grps); ent.grps = 0;
+    free(ent.endorsements); ent.endorsements = 0;
 
     // Start with the DN
-    char *dn = nullptr;
+    char *dn = 0;
     if (!globus_verify(cert, chain, &dn)) {
         std::cerr << "Globus chain verification failure.\n";
         return "";
@@ -55,13 +55,13 @@ GetKey(X509 *cert, STACK_OF(X509) *chain, XrdSecEntity &ent)
 
     bool found_fqan = false;
     std::stringstream endorsements;
-    for (int idx = 0; voms_ptr->data[idx] != nullptr; idx++)
+    for (int idx = 0; voms_ptr->data[idx] != 0; idx++)
     {
         struct voms *it = voms_ptr->data[idx];
         if (!it->voname) {continue;}
         if (!ent.vorg) {ent.vorg = strdup(it->voname);}
         key << it->voname << ":";
-        for (int idx2 = 0; it->std[idx2] != nullptr; idx2++)
+        for (int idx2 = 0; it->std[idx2] != 0; idx2++)
         {
             struct data *it2 = it->std[idx2];
             if (!it2->group) {continue;}
@@ -73,13 +73,13 @@ GetKey(X509 *cert, STACK_OF(X509) *chain, XrdSecEntity &ent)
             if ((it2->role) && strcmp(it2->role, "NULL"))
             {
                 key << "/Role=" << it2->role;
-                if (ent.role == nullptr) {
+                if (ent.role == 0) {
                     ent.role = strdup(it2->role);
                 }
             }
             key << ",";
         }
-        for (int idx2 = 0; it->fqan[idx2] != nullptr; idx2++)
+        for (int idx2 = 0; it->fqan[idx2] != 0; idx2++)
         {
             if (found_fqan) {endorsements << ",";}
             else {found_fqan = true;}
