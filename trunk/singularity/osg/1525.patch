From 18ed735ed91d02e86b35df9b8ba0936ae86213d0 Mon Sep 17 00:00:00 2001
From: Cedric Clerget <cedric.clerget@gmail.com>
Date: Sat, 28 Apr 2018 13:31:31 +0200
Subject: [PATCH 2/7] Check if user identify can't be obtain and avoid
 segmentation fault

---
 src/lib/runtime/files/passwd/passwd.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/lib/runtime/files/passwd/passwd.c b/src/lib/runtime/files/passwd/passwd.c
index ab85d8434..c49628f3d 100644
--- a/src/lib/runtime/files/passwd/passwd.c
+++ b/src/lib/runtime/files/passwd/passwd.c
@@ -72,6 +72,11 @@ int _singularity_runtime_files_passwd(void) {
         ABORT(255);
     }
 
+    if ( pwent == NULL ) {
+        singularity_message(ERROR, "Failed to obtain user identity information\n");
+        ABORT(255);
+    }
+
     singularity_message(DEBUG, "Checking configuration option: 'config passwd'\n");
     if ( singularity_config_get_bool(CONFIG_PASSWD) <= 0 ) {
         singularity_message(VERBOSE, "Skipping bind of the host's /etc/passwd\n");

From d8ac7d628b607559c64f1962e4124fde35252ebd Mon Sep 17 00:00:00 2001
From: Cedric Clerget <cedric.clerget@gmail.com>
Date: Wed, 9 May 2018 16:28:27 +0200
Subject: [PATCH 7/7] Remove open check from singularity_mount

---
 src/util/mount.c | 37 ++++++-------------------------------
 1 file changed, 6 insertions(+), 31 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 78ae309d7..5f6ecb455 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -77,40 +77,21 @@ int singularity_mount(const char *source, const char *target,
     int ret;
     int mount_errno;
     uid_t fsuid = 0;
-    char dest[PATH_MAX];
-    char *realdest, *realtarget;
-    int target_fd = -1;
+    char *realdest;
     static struct resolved_container_path container_path;
 
-    resolve_container_path(&container_path);
-
-    if ( ( mountflags & MS_REMOUNT ) == 0 ) {
-        target_fd = open(target, O_RDONLY);
-
-        if ( target_fd < 0 ) {
-            singularity_message(ERROR, "Target %s doesn't exist\n", target);
-            ABORT(255);
-        }
-
-        if ( snprintf(dest, PATH_MAX-1, "/proc/self/fd/%d", target_fd) < 0 ) {
-            singularity_message(ERROR, "Failed to determine path for target file descriptor\n");
-            ABORT(255);
-        }
-        realtarget = dest;
-    } else {
-        realtarget = (char *)target;
-    }
-
     if ( ( mountflags & MS_BIND ) ) {
         fsuid = singularity_priv_getuid();
     }
 
-    realdest = realpath(realtarget, NULL); // Flawfinder: ignore
+    realdest = realpath(target, NULL); // Flawfinder: ignore
     if ( realdest == NULL ) {
-        singularity_message(ERROR, "Failed to get real path of %s %s\n", target, dest);
+        singularity_message(ERROR, "Failed to get real path of %s\n", target);
         ABORT(255);
     }
 
+    resolve_container_path(&container_path);
+
     if ( (mountflags & MS_PRIVATE) == 0 && (mountflags & MS_SLAVE) == 0 ) {
         if ( strncmp(realdest, container_path.mountdir, strlen(container_path.mountdir)) != 0 &&
              strncmp(realdest, container_path.finaldir, strlen(container_path.finaldir)) != 0 &&
@@ -118,9 +99,6 @@ int singularity_mount(const char *source, const char *target,
              strncmp(realdest, container_path.session, strlen(container_path.session)) != 0 ) {
             singularity_message(VERBOSE, "Ignored, try to mount %s outside of container %s\n", target, realdest);
             free(realdest);
-            if ( target_fd >= 0 ) {
-                close(target_fd);
-            }
             return(0);
         }
     }
@@ -135,12 +113,9 @@ int singularity_mount(const char *source, const char *target,
         setfsuid(fsuid);
     }
 
-    ret = mount(source, realtarget, filesystemtype, mountflags, data);
+    ret = mount(source, realdest, filesystemtype, mountflags, data);
     mount_errno = errno;
 
-    if ( target_fd >= 0 ) {
-        close(target_fd);
-    }
     free(realdest);
 
     if ( singularity_priv_userns_enabled() == 0 && seteuid(singularity_priv_getuid()) < 0 ) {
