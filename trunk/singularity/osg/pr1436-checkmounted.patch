From 371897226fb0120805818e1c9188c50f6baba7ae Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 10:05:45 -0700
Subject: [PATCH 01/17] Fix check_mounted() so it checks parent directories

---
 src/util/mount.c | 32 +++++++++++++++++++++++---------
 1 file changed, 23 insertions(+), 9 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 9ab9aec16..1d7ef3a0a 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -23,6 +23,7 @@
 #include <unistd.h>
 #include <stdlib.h>
 #include <limits.h>
+#include <libgen.h>
 
 #include "config.h"
 #include "util/file.h"
@@ -79,10 +80,15 @@ int check_mounted(char *mountpoint) {
         mountpoint[mountpoint_len-1] = '\0';
     }
 
-    real_mountpoint = realpath(mountpoint, NULL); // Flawfinder: ignore
-    if ( real_mountpoint == NULL ) {
-        // mountpoint doesn't exists
-        return(retval);
+    if ( is_link(mountpoint) == 0 ) {
+        real_mountpoint = realpath(mountpoint, NULL); // Flawfinder: ignore
+        if ( real_mountpoint == NULL ) {
+            // mountpoint doesn't exists
+           singularity_message(DEBUG, "returning, real_mountpoint == NULL\n");
+            return(retval);
+        }
+    } else {
+        real_mountpoint = strdup(mountpoint);
     }
 
     singularity_message(DEBUG, "Iterating through /proc/mounts\n");
@@ -90,13 +96,20 @@ int check_mounted(char *mountpoint) {
         (void) strtok(strdup(line), " ");
         char *mount = strtok(NULL, " ");
 
-        // Check to see if mountpoint is already mounted
-        if ( strcmp(joinpath(rootfs_dir, real_mountpoint), mount) == 0 ) {
-            singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", mountpoint);
-            retval = 1;
-            break;
+	char *test_mountpoint = strdup(real_mountpoint);
+
+        while ( strcmp(test_mountpoint, "/") != 0 ) {
+            // Check to see if mountpoint is already mounted
+            if ( strcmp(joinpath(rootfs_dir, test_mountpoint), mount) == 0 ) {
+                singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", test_mountpoint);
+                retval = 1;
+                goto DONE;
+            }
+            test_mountpoint = dirname(test_mountpoint);
         }
 
+        free(test_mountpoint);
+
         // Check to see if path is in container root
         if ( strncmp(rootfs_dir, mount, strlength(rootfs_dir, 1024)) != 0 ) {
             continue;
@@ -108,6 +121,7 @@ int check_mounted(char *mountpoint) {
         }
     }
 
+    DONE:
     fclose(mounts);
     free(line);
     free(real_mountpoint);

From c68b4f9c8a91bc93ef2318c7ca1adf7a121a2aab Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 10:08:06 -0700
Subject: [PATCH 02/17] Fix leaky test_mountpoint

---
 src/util/mount.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/util/mount.c b/src/util/mount.c
index 1d7ef3a0a..623ba3d85 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -103,6 +103,7 @@ int check_mounted(char *mountpoint) {
             if ( strcmp(joinpath(rootfs_dir, test_mountpoint), mount) == 0 ) {
                 singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", test_mountpoint);
                 retval = 1;
+                free(test_mountpoint);
                 goto DONE;
             }
             test_mountpoint = dirname(test_mountpoint);

From e044cb7ed15b11406a485a98d5440ba1cc4382a4 Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 12:04:03 -0700
Subject: [PATCH 03/17] Not sure how this got missed, fixing build warnings

---
 src/util/file.h | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/util/file.h b/src/util/file.h
index d1629bbd4..badc0142f 100644
--- a/src/util/file.h
+++ b/src/util/file.h
@@ -39,6 +39,7 @@ int is_suid(char *path);
 int is_owner(char *path, uid_t uid);
 int is_blk(char *path);
 int is_chr(char *path);
+int is_sock(char *path);
 int s_mkpath(char *dir, mode_t mode);
 int s_rmdir(char *dir);
 int copy_file(char * source, char * dest);

From 4cc73d0ad98b78eeb1e9e29742b2328990f26e36 Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 12:04:27 -0700
Subject: [PATCH 04/17] Added debug message

---
 src/util/mount.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/util/mount.c b/src/util/mount.c
index 623ba3d85..a166cbea9 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -69,6 +69,8 @@ int check_mounted(char *mountpoint) {
     unsigned int mountpoint_len = strlength(mountpoint, PATH_MAX);
     char *real_mountpoint;
 
+    singularity_message(DEBUG, "Checking if currently mounted: %s\n", mountpoint);
+
     singularity_message(DEBUG, "Opening /proc/mounts\n");
     if ( ( mounts = fopen("/proc/mounts", "r") ) == NULL ) { // Flawfinder: ignore
         singularity_message(ERROR, "Could not open /proc/mounts: %s\n", strerror(errno));

From e611b7b96dd6e9ef17325cd4d17e672a5cca5467 Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 12:04:47 -0700
Subject: [PATCH 05/17] Scratch wasn't checking for mounted file systems

---
 src/lib/runtime/mounts/scratch/scratch.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/lib/runtime/mounts/scratch/scratch.c b/src/lib/runtime/mounts/scratch/scratch.c
index 212049253..ab80396f5 100644
--- a/src/lib/runtime/mounts/scratch/scratch.c
+++ b/src/lib/runtime/mounts/scratch/scratch.c
@@ -92,6 +92,12 @@ int _singularity_runtime_mount_scratch(void) {
         char *full_sourcedir_path = joinpath(sourcedir_path, basename(strdup(current)));
         char *full_destdir_path = joinpath(container_dir, current);
 
+        singularity_message(DEBUG, "Checking if bind point is already mounted: %s\n", current);
+        if ( check_mounted(current) >= 0 ) {
+            singularity_message(ERROR, "Not mounting requested scratch directory (already mounted in container): %s\n", current);
+            ABORT(255);
+        }
+
         if ( s_mkpath(full_sourcedir_path, 0750) < 0 ) {
              singularity_message(ERROR, "Could not create scratch working directory %s: %s\n", full_sourcedir_path, strerror(errno));
              ABORT(255);

From 823947aa94fd4391905bd02b87464485be9d3e77 Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 12:05:06 -0700
Subject: [PATCH 06/17] Exit/abort on error of user binds on existing binds

---
 src/lib/runtime/mounts/userbinds/userbinds.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/lib/runtime/mounts/userbinds/userbinds.c b/src/lib/runtime/mounts/userbinds/userbinds.c
index e6fea3055..bcf440262 100644
--- a/src/lib/runtime/mounts/userbinds/userbinds.c
+++ b/src/lib/runtime/mounts/userbinds/userbinds.c
@@ -96,8 +96,8 @@ int _singularity_runtime_mount_userbinds(void) {
 
             singularity_message(DEBUG, "Checking if bind point is already mounted: %s\n", dest);
             if ( check_mounted(dest) >= 0 ) {
-                singularity_message(WARNING, "Not mounting requested bind point (already mounted in container): %s\n", dest);
-                continue;
+                singularity_message(ERROR, "Not mounting requested bind point (already mounted in container): %s\n", dest);
+                ABORT(255);
             }
 
             if ( ( is_file(source) == 0 ) && ( is_file(joinpath(container_dir, dest)) < 0 ) ) {

From 4e66dd5b67571531c78bd05731ba5ab82c3fcfc3 Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 12:07:43 -0700
Subject: [PATCH 07/17] Removing trailing 's' (thanks @DrDaveD!)

---
 src/util/mount.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index a166cbea9..5eed29d61 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -85,7 +85,7 @@ int check_mounted(char *mountpoint) {
     if ( is_link(mountpoint) == 0 ) {
         real_mountpoint = realpath(mountpoint, NULL); // Flawfinder: ignore
         if ( real_mountpoint == NULL ) {
-            // mountpoint doesn't exists
+            // mountpoint doesn't exists
            singularity_message(DEBUG, "returning, real_mountpoint == NULL\n");
             return(retval);
         }

From e3673005aaea089f404b47ebd6e38373ec47988f Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 12:17:22 -0700
Subject: [PATCH 08/17] Dang tabs....

---
 src/util/mount.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 5eed29d61..6385b96d7 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -98,7 +98,7 @@ int check_mounted(char *mountpoint) {
         (void) strtok(strdup(line), " ");
         char *mount = strtok(NULL, " ");
 
-	char *test_mountpoint = strdup(real_mountpoint);
+        char *test_mountpoint = strdup(real_mountpoint);
 
         while ( strcmp(test_mountpoint, "/") != 0 ) {
             // Check to see if mountpoint is already mounted

From e9fe0167136efe19296cc39c86cf4392e2fb121e Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 13:34:48 -0700
Subject: [PATCH 09/17] More updates/fixes to check_mounted()

---
 src/util/mount.c | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 6385b96d7..b1a1de398 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -67,7 +67,7 @@ int check_mounted(char *mountpoint) {
     char *line = (char *)malloc(MAX_LINE_LEN);
     char *rootfs_dir = CONTAINER_FINALDIR;
     unsigned int mountpoint_len = strlength(mountpoint, PATH_MAX);
-    char *real_mountpoint;
+    char *real_mountpoint = strdup(mountpoint);
 
     singularity_message(DEBUG, "Checking if currently mounted: %s\n", mountpoint);
 
@@ -82,16 +82,6 @@ int check_mounted(char *mountpoint) {
         mountpoint[mountpoint_len-1] = '\0';
     }
 
-    if ( is_link(mountpoint) == 0 ) {
-        real_mountpoint = realpath(mountpoint, NULL); // Flawfinder: ignore
-        if ( real_mountpoint == NULL ) {
-            // mountpoint doesn't exists
-           singularity_message(DEBUG, "returning, real_mountpoint == NULL\n");
-            return(retval);
-        }
-    } else {
-        real_mountpoint = strdup(mountpoint);
-    }
 
     singularity_message(DEBUG, "Iterating through /proc/mounts\n");
     while ( fgets(line, MAX_LINE_LEN, mounts) != NULL ) {
@@ -101,14 +91,34 @@ int check_mounted(char *mountpoint) {
         char *test_mountpoint = strdup(real_mountpoint);
 
         while ( strcmp(test_mountpoint, "/") != 0 ) {
+            char *full_test_path = NULL;
+            char *tmp_test_path = joinpath(rootfs_dir, test_mountpoint);
+
+            if ( is_link(tmp_test_path) == 0 ) {
+                char *linktarget = realpath(tmp_test_path, NULL);
+                if ( linktarget == NULL ) {
+                    singularity_message(ERROR, "Could not identify the source of contained link: %s\n", test_mountpoint);
+                    ABORT(255);
+                }
+                full_test_path = joinpath(rootfs_dir, linktarget);
+                singularity_message(DEBUG, "parent directory is a link, resolved: %s->%s\n", joinpath(rootfs_dir, test_mountpoint), full_test_path);
+                if ( strcmp(linktarget, "/") == 0 ) {
+                    singularity_message(ERROR, "You shouldn't do that....\n");
+                    ABORT(255);
+                }
+            } else {
+                full_test_path = tmp_test_path;
+            }
+
             // Check to see if mountpoint is already mounted
-            if ( strcmp(joinpath(rootfs_dir, test_mountpoint), mount) == 0 ) {
+            if ( strcmp(full_test_path, mount) == 0 ) {
                 singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", test_mountpoint);
                 retval = 1;
                 free(test_mountpoint);
                 goto DONE;
             }
             test_mountpoint = dirname(test_mountpoint);
+
         }
 
         free(test_mountpoint);

From 9190fdf2a1a9e6b0186f78a0e52f4b63598bfaec Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 13:46:14 -0700
Subject: [PATCH 10/17] Fixed placeholder error message

---
 src/util/mount.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index b1a1de398..dacecdf52 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -103,8 +103,9 @@ int check_mounted(char *mountpoint) {
                 full_test_path = joinpath(rootfs_dir, linktarget);
                 singularity_message(DEBUG, "parent directory is a link, resolved: %s->%s\n", joinpath(rootfs_dir, test_mountpoint), full_test_path);
                 if ( strcmp(linktarget, "/") == 0 ) {
-                    singularity_message(ERROR, "You shouldn't do that....\n");
-                    ABORT(255);
+                    retval = 1;
+                    free(test_mountpoint);
+                    goto DONE;
                 }
             } else {
                 full_test_path = tmp_test_path;

From 1d529e885aa4f3b6176a10c203bcfb6ff08af3ab Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 13:56:51 -0700
Subject: [PATCH 11/17] Freedoms!

---
 src/util/mount.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index dacecdf52..69c5a7000 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -107,8 +107,9 @@ int check_mounted(char *mountpoint) {
                     free(test_mountpoint);
                     goto DONE;
                 }
+                free(linktarget);
             } else {
-                full_test_path = tmp_test_path;
+                full_test_path = strdup(tmp_test_path);
             }
 
             // Check to see if mountpoint is already mounted
@@ -119,7 +120,8 @@ int check_mounted(char *mountpoint) {
                 goto DONE;
             }
             test_mountpoint = dirname(test_mountpoint);
-
+            free(tmp_test_path);
+            free(full_test_path);
         }
 
         free(test_mountpoint);

From 77a382249ee597ba5bed67e33738c5569d2c8cc8 Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 14:02:01 -0700
Subject: [PATCH 12/17] Adding flawfinder ignore for things we know

---
 src/util/mount.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 69c5a7000..a3147bfde 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -95,7 +95,7 @@ int check_mounted(char *mountpoint) {
             char *tmp_test_path = joinpath(rootfs_dir, test_mountpoint);
 
             if ( is_link(tmp_test_path) == 0 ) {
-                char *linktarget = realpath(tmp_test_path, NULL);
+                char *linktarget = realpath(tmp_test_path, NULL); // Flawfinder: ignore
                 if ( linktarget == NULL ) {
                     singularity_message(ERROR, "Could not identify the source of contained link: %s\n", test_mountpoint);
                     ABORT(255);

From a04c5e47ae43ac90ee1c806059ef7e0ac2d136ff Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 14:12:24 -0700
Subject: [PATCH 13/17] Merged some of Cedric's fixes to `singularity_mount()`

---
 src/util/mount.c | 41 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 40 insertions(+), 1 deletion(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index a3147bfde..e3f9f2c6c 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -37,12 +37,44 @@ int singularity_mount(const char *source, const char *target,
                       const char *filesystemtype, unsigned long mountflags,
                       const void *data) {
     int ret;
+    int mount_errno;
     uid_t fsuid = 0;
+    char dest[PATH_MAX];
+    char *realdest;
+    int target_fd = open(target, O_RDONLY);
+
+    if ( target_fd < 0 ) {
+        singularity_message(ERROR, "Target %s doesn't exist\n", target);
+        ABORT(255);
+    }
+
+    if ( snprintf(dest, PATH_MAX-1, "/proc/self/fd/%d", target_fd) < 0 ) {
+        singularity_message(ERROR, "Failed to determine path for target file descriptor\n");
+        ABORT(255);
+    }
 
     if ( ( mountflags & MS_BIND ) ) {
         fsuid = singularity_priv_getuid();
     }
 
+    realdest = realpath(dest, NULL); // Flawfinder: ignore
+    if ( realdest == NULL ) {
+        singularity_message(ERROR, "Failed to get real path of %s %s\n", target, dest);
+        ABORT(255);
+    }
+
+    if ( (mountflags & MS_PRIVATE) == 0 && (mountflags & MS_SLAVE) == 0 ) {
+        if ( strncmp(realdest, CONTAINER_MOUNTDIR, strlen(CONTAINER_MOUNTDIR)) != 0 &&
+             strncmp(realdest, CONTAINER_FINALDIR, strlen(CONTAINER_FINALDIR)) != 0 &&
+             strncmp(realdest, CONTAINER_OVERLAY, strlen(CONTAINER_OVERLAY)) != 0 &&
+             strncmp(realdest, SESSIONDIR, strlen(SESSIONDIR)) != 0 ) {
+            singularity_message(VERBOSE, "Ignored, try to mount %s outside of container %s\n", target, realdest);
+            free(realdest);
+            close(target_fd);
+            return(0);
+        }
+    }
+
     /* don't modify user groups */
     if ( singularity_priv_userns_enabled() == 0 ) {
         if ( seteuid(0) < 0 ) {
@@ -52,12 +84,19 @@ int singularity_mount(const char *source, const char *target,
         /* NFS root_squash option set uid 0 to nobody, force use of real user ID */
         setfsuid(fsuid);
     }
-    ret = mount(source, target, filesystemtype, mountflags, data);
+
+    ret = mount(source, dest, filesystemtype, mountflags, data);
+    mount_errno = errno;
+
+    close(target_fd);
+    free(realdest);
+
     if ( singularity_priv_userns_enabled() == 0 && seteuid(singularity_priv_getuid()) < 0 ) {
         singularity_message(ERROR, "Failed to drop privileges: %s\n", strerror(errno));
         ABORT(255);
     }
 
+    errno = mount_errno;
     return ret;
 }
 

From 0ebf4a9e3fc72543d9aa66363878e54dfaf008dd Mon Sep 17 00:00:00 2001
From: Gregory Kurtzer <gmkurtzer@gmail.com>
Date: Tue, 3 Apr 2018 14:43:01 -0700
Subject: [PATCH 14/17] Some more minor updates

---
 src/util/mount.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index e3f9f2c6c..607b86595 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -140,10 +140,14 @@ int check_mounted(char *mountpoint) {
                     ABORT(255);
                 }
                 full_test_path = joinpath(rootfs_dir, linktarget);
-                singularity_message(DEBUG, "parent directory is a link, resolved: %s->%s\n", joinpath(rootfs_dir, test_mountpoint), full_test_path);
+                singularity_message(DEBUG, "Parent directory is a link, resolved: %s->%s\n", tmp_test_path, full_test_path);
                 if ( strcmp(linktarget, "/") == 0 ) {
+                    singularity_message(DEBUG, "Link is pointing to /, not allowed: %s\n", test_mountpoint);
                     retval = 1;
                     free(test_mountpoint);
+                    free(tmp_test_path);
+                    free(full_test_path);
+                    free(linktarget);
                     goto DONE;
                 }
                 free(linktarget);
@@ -156,6 +160,8 @@ int check_mounted(char *mountpoint) {
                 singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", test_mountpoint);
                 retval = 1;
                 free(test_mountpoint);
+                free(tmp_test_path);
+                free(full_test_path);
                 goto DONE;
             }
             test_mountpoint = dirname(test_mountpoint);

From 15df31d0beb101f5753d19fdbd07b1f8fcb98e0a Mon Sep 17 00:00:00 2001
From: Adam Hughes <stickmanica@gmail.com>
Date: Tue, 3 Apr 2018 18:50:56 -0400
Subject: [PATCH 15/17] Refactor check_mounted()

---
 src/util/mount.c | 95 +++++++++++++++++++++++++++++---------------------------
 1 file changed, 49 insertions(+), 46 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 607b86595..21019c5ae 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -100,6 +100,53 @@ int singularity_mount(const char *source, const char *target,
     return ret;
 }
 
+int check_proc_mount(char *mount, char *real_mountpoint) {
+    int retval = -1;
+
+    char *dup_mountpoint = strdup(real_mountpoint);
+    char *test_mountpoint = dup_mountpoint;
+
+    while ( ( retval < 0 ) && ( strcmp(test_mountpoint, "/") != 0 ) ) {
+        char *full_test_path = NULL;
+        char *tmp_test_path = joinpath(CONTAINER_FINALDIR, test_mountpoint);
+
+        if ( is_link(tmp_test_path) == 0 ) {
+            char *linktarget = realpath(tmp_test_path, NULL); // Flawfinder: ignore
+            if ( linktarget == NULL ) {
+                singularity_message(ERROR, "Could not identify the source of contained link: %s\n", test_mountpoint);
+                ABORT(255);
+            }
+            full_test_path = joinpath(CONTAINER_FINALDIR, linktarget);
+            singularity_message(DEBUG, "Parent directory is a link, resolved: %s->%s\n", tmp_test_path, full_test_path);
+            if ( strcmp(linktarget, "/") == 0 ) {
+                singularity_message(DEBUG, "Link is pointing to /, not allowed: %s\n", test_mountpoint);
+                retval = 1;
+            }
+            free(linktarget);
+        } else {
+            full_test_path = strdup(tmp_test_path);
+        }
+
+        if( retval < 0 )
+        {
+            // Check to see if mountpoint is already mounted
+            if ( strcmp(full_test_path, mount) == 0 ) {
+                singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", test_mountpoint);
+                retval = 1;
+            } else {
+                test_mountpoint = dirname(test_mountpoint);
+            }
+        }
+
+        free(tmp_test_path);
+        free(full_test_path);
+    }
+
+    free(dup_mountpoint);
+
+    return(retval);
+}
+
 int check_mounted(char *mountpoint) {
     int retval = -1;
     FILE *mounts;
@@ -121,55 +168,12 @@ int check_mounted(char *mountpoint) {
         mountpoint[mountpoint_len-1] = '\0';
     }
 
-
     singularity_message(DEBUG, "Iterating through /proc/mounts\n");
-    while ( fgets(line, MAX_LINE_LEN, mounts) != NULL ) {
+    while ( ( retval < 0 ) && ( fgets(line, MAX_LINE_LEN, mounts) != NULL ) ) {
         (void) strtok(strdup(line), " ");
         char *mount = strtok(NULL, " ");
 
-        char *test_mountpoint = strdup(real_mountpoint);
-
-        while ( strcmp(test_mountpoint, "/") != 0 ) {
-            char *full_test_path = NULL;
-            char *tmp_test_path = joinpath(rootfs_dir, test_mountpoint);
-
-            if ( is_link(tmp_test_path) == 0 ) {
-                char *linktarget = realpath(tmp_test_path, NULL); // Flawfinder: ignore
-                if ( linktarget == NULL ) {
-                    singularity_message(ERROR, "Could not identify the source of contained link: %s\n", test_mountpoint);
-                    ABORT(255);
-                }
-                full_test_path = joinpath(rootfs_dir, linktarget);
-                singularity_message(DEBUG, "Parent directory is a link, resolved: %s->%s\n", tmp_test_path, full_test_path);
-                if ( strcmp(linktarget, "/") == 0 ) {
-                    singularity_message(DEBUG, "Link is pointing to /, not allowed: %s\n", test_mountpoint);
-                    retval = 1;
-                    free(test_mountpoint);
-                    free(tmp_test_path);
-                    free(full_test_path);
-                    free(linktarget);
-                    goto DONE;
-                }
-                free(linktarget);
-            } else {
-                full_test_path = strdup(tmp_test_path);
-            }
-
-            // Check to see if mountpoint is already mounted
-            if ( strcmp(full_test_path, mount) == 0 ) {
-                singularity_message(DEBUG, "Mountpoint is already mounted: %s\n", test_mountpoint);
-                retval = 1;
-                free(test_mountpoint);
-                free(tmp_test_path);
-                free(full_test_path);
-                goto DONE;
-            }
-            test_mountpoint = dirname(test_mountpoint);
-            free(tmp_test_path);
-            free(full_test_path);
-        }
-
-        free(test_mountpoint);
+        retval = check_proc_mount(mount, real_mountpoint);
 
         // Check to see if path is in container root
         if ( strncmp(rootfs_dir, mount, strlength(rootfs_dir, 1024)) != 0 ) {
@@ -182,7 +186,6 @@ int check_mounted(char *mountpoint) {
         }
     }
 
-    DONE:
     fclose(mounts);
     free(line);
     free(real_mountpoint);

From 3a85b9307775495d322124247259858e28087555 Mon Sep 17 00:00:00 2001
From: Adam Hughes <stickmanica@gmail.com>
Date: Tue, 3 Apr 2018 19:47:06 -0400
Subject: [PATCH 16/17] Remove unnecessary strdup

---
 src/util/mount.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 21019c5ae..8a91f25fb 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -170,7 +170,7 @@ int check_mounted(char *mountpoint) {
 
     singularity_message(DEBUG, "Iterating through /proc/mounts\n");
     while ( ( retval < 0 ) && ( fgets(line, MAX_LINE_LEN, mounts) != NULL ) ) {
-        (void) strtok(strdup(line), " ");
+        (void) strtok(line, " ");
         char *mount = strtok(NULL, " ");
 
         retval = check_proc_mount(mount, real_mountpoint);

From 60fbe183a73c089a6848db7ef3dc60a75bbcb192 Mon Sep 17 00:00:00 2001
From: Adam Hughes <stickmanica@gmail.com>
Date: Tue, 3 Apr 2018 19:49:39 -0400
Subject: [PATCH 17/17] Remove continue conditionals with no effect

---
 src/util/mount.c | 11 -----------
 1 file changed, 11 deletions(-)

diff --git a/src/util/mount.c b/src/util/mount.c
index 8a91f25fb..0563460b1 100644
--- a/src/util/mount.c
+++ b/src/util/mount.c
@@ -151,7 +151,6 @@ int check_mounted(char *mountpoint) {
     int retval = -1;
     FILE *mounts;
     char *line = (char *)malloc(MAX_LINE_LEN);
-    char *rootfs_dir = CONTAINER_FINALDIR;
     unsigned int mountpoint_len = strlength(mountpoint, PATH_MAX);
     char *real_mountpoint = strdup(mountpoint);
 
@@ -174,16 +173,6 @@ int check_mounted(char *mountpoint) {
         char *mount = strtok(NULL, " ");
 
         retval = check_proc_mount(mount, real_mountpoint);
-
-        // Check to see if path is in container root
-        if ( strncmp(rootfs_dir, mount, strlength(rootfs_dir, 1024)) != 0 ) {
-            continue;
-        }
-
-        // Check to see if path is ot the container root
-        if ( strcmp(mount, rootfs_dir) == 0 ) {
-            continue;
-        }
     }
 
     fclose(mounts);
