diff --git a/cvmfs/authz/authz_session.cc b/cvmfs/authz/authz_session.cc
index 48777b0..0a4054f 100644
--- a/cvmfs/authz/authz_session.cc
+++ b/cvmfs/authz/authz_session.cc
@@ -60,6 +60,14 @@ AuthzSessionManager::~AuthzSessionManager() {
 }
 
 
+void AuthzSessionManager::ClearSessionCache() {
+  LockMutex(&lock_session2cred_);
+  session2cred_.Clear();
+  no_session_->Set(0);
+  UnlockMutex(&lock_session2cred_);
+}
+
+
 AuthzSessionManager *AuthzSessionManager::Create(
   AuthzFetcher *authz_fetcher,
   perf::Statistics *statistics)
diff --git a/cvmfs/authz/authz_session.h b/cvmfs/authz/authz_session.h
index 228a3e7..3a7df99 100644
--- a/cvmfs/authz/authz_session.h
+++ b/cvmfs/authz/authz_session.h
@@ -48,6 +48,13 @@ class AuthzSessionManager : SingleCopy {
   AuthzToken *GetTokenCopy(const pid_t pid, const std::string &membership);
   bool IsMemberOf(const pid_t pid, const std::string &membership);
 
+  /**
+   * When the membership string in the root file catalog changes, all entries in
+   * the cache become invalid because they only vouch for the previous
+   * membership entry. This function is called by MountPoint::ReEvaluateAuthz.
+   */
+  void ClearSessionCache();
+
  private:
   /**
    * Sweep caches from old entries not more often than every 5 seconds.
diff --git a/cvmfs/mountpoint.cc b/cvmfs/mountpoint.cc
index 87db0a3..5214bc1 100644
--- a/cvmfs/mountpoint.cc
+++ b/cvmfs/mountpoint.cc
@@ -1599,8 +1599,12 @@ MountPoint::~MountPoint() {
 
 
 void MountPoint::ReEvaluateAuthz() {
+  string old_membership_req = membership_req_;
   has_membership_req_ = catalog_mgr_->GetVOMSAuthz(&membership_req_);
-  authz_attachment_->set_membership(membership_req_);
+  if (old_membership_req != membership_req_) {
+    authz_session_mgr_->ClearSessionCache();
+    authz_attachment_->set_membership(membership_req_);
+  }
 }
 
 
diff --git a/test/unittests/t_authz_session.cc b/test/unittests/t_authz_session.cc
index fc5d994..7cbf497 100644
--- a/test/unittests/t_authz_session.cc
+++ b/test/unittests/t_authz_session.cc
@@ -37,7 +37,7 @@ class T_AuthzSession : public ::testing::Test {
  protected:
   virtual void SetUp() {
     authz_session_mgr_ =
-      AuthzSessionManager::Create(&authz_fetcher_, &statistics);
+      AuthzSessionManager::Create(&authz_fetcher_, &statistics_);
   }
 
   virtual void TearDown() {
@@ -46,7 +46,7 @@ class T_AuthzSession : public ::testing::Test {
 
   AuthzSessionManager *authz_session_mgr_;
   TestAuthzFetcher authz_fetcher_;
-  perf::Statistics statistics;
+  perf::Statistics statistics_;
 };
 
 
@@ -146,6 +146,24 @@ TEST_F(T_AuthzSession, IsMemberOf) {
 }
 
 
+TEST_F(T_AuthzSession, ClearSessionCache) {
+  EXPECT_EQ(0, statistics_.Lookup("authz.no_session")->Get());
+  authz_fetcher_.next_status = kAuthzOk;
+  authz_fetcher_.next_ttl = 1000;
+  EXPECT_TRUE(authz_session_mgr_->IsMemberOf(1, "A"));
+  EXPECT_FALSE(authz_session_mgr_->IsMemberOf(1, "B"));
+  EXPECT_EQ(1, statistics_.Lookup("authz.no_session")->Get());
+
+  authz_session_mgr_->ClearSessionCache();
+  EXPECT_EQ(0, statistics_.Lookup("authz.no_session")->Get());
+
+  EXPECT_TRUE(authz_session_mgr_->IsMemberOf(1, "B"));
+  EXPECT_FALSE(authz_session_mgr_->IsMemberOf(1, "A"));
+  EXPECT_EQ(1, statistics_.Lookup("authz.no_session")->Get());
+}
+
+
+
 TEST_F(T_AuthzSession, GetTokenCopy) {
   authz_fetcher_.next_status = kAuthzOk;
   authz_fetcher_.next_ttl = 0;
