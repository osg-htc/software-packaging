--- netlogger/parsers/modules/gridftp_auth.py	2012-07-31 14:03:02.742526883 -0500
+++ netlogger/parsers/modules/gridftp_auth.py	2012-09-11 13:03:38.544615708 -0500
@@ -11,7 +11,6 @@
 import re
 import sys
 
-logging.raiseExceptions=0
 from netlogger.parsers.base import BaseParser
 from netlogger.nldate import parseSyslogDate
 from netlogger import util
@@ -34,6 +33,8 @@
         BaseParser.__init__(self, f, fullname=__name__, **kw)
         self._batch = [ ]
         self._cur_pid = None
+        self.host = None
+        self.port = None
         self._gen_errs = error_events
         if self._gen_errs:
             self._hdr_host = None
@@ -47,6 +48,20 @@
         pid_str = '^\[(\d+)\]'
         self._line_re = re.compile(pid_str + '(.*?)::.(.*)$')
 
+    def set_hostport(self, message):
+        rcolon=message.rfind(':')
+        try:
+           self.port = int(message[rcolon+1:])
+        except ValueError:
+           raise InvalidURL("Nonnumeric port: '%s'" % message[rcolon+1:])
+        rsqbrace=message.rfind(']')
+        if rcolon-rsqbrace==1:
+           lsqbrace=message.rfind('[')
+           self.host=message[lsqbrace+1:rcolon]
+        else:
+           logtokens=message.split(':',2)
+           self.host=logtokens[1].lstrip()
+
     def process(self, line):
         self.log.debug("process.start", line=line)
         m = self._line_re.match(line)
@@ -56,39 +71,35 @@
         pid, date, message = m.groups()
         msg_type = 0
         # First word of message gives us the event type
-        try:
-		if message.startswith('Server'):
-            		event = dict(event=ns('start'))
-        	elif message.startswith('Configuration'):
-            		event = dict(event=ns('config'))
-        	elif message.startswith('New'):
-            		#m = re.search('from:\s*(\S+)', message)
-            		#host, port =  m.group(1).split(':')
-			m = message.split(":", 1)[1]
-			m = m.translate(None, " []")
-			host,port = m.rsplit(':', 1)
-            		#event = dict(event=ns('conn.start'), host=host, port=int(port))
-        	elif message.startswith('DN'):
-             		m = re.search('DN\s+(\/.*)\s+successfully', message)
-             		event = dict(event=ns('conn.auth.dn'), DN=m.group(1))
-        	elif message.startswith('User'):
-            		m = re.search('User\s+(\S+)\s+successfully', message)
-            		event = dict(event=ns('conn.auth.user'), user=m.group(1))
-        	elif message.startswith('Starting'):
-            		m = re.search('transfer \"([^"]*)\"', message)
-            		event = dict(event=ns('conn.transfer.start'), filename=m.group(1))
-            		msg_type = 1
-        	elif message.startswith('Finished'):
-            		m = re.search('transferring \"([^"]*)\"', message)
-            		event = dict(event=ns('conn.transfer.end'),filename=m.group(1))
-            		msg_type = 2
-        	elif message.startswith('Closed'):
-            		event = dict(event=ns('end'))
-        	else:
-            		self.log.debug("process.end", status=0, n=0)
-            		return ()
-	except (ValueError, TypeError), E:
-		raise ValueError("Could not parse logs. %s" % E)
+        if message.startswith('Server'):
+            event = dict(event=ns('start'))
+        elif message.startswith('Configuration'):
+            event = dict(event=ns('config'))
+        elif message.startswith('New'):
+            self.set_hostport(message)
+            event = dict(event=ns('conn.start'), host=self.host, 
+                         port=int(self.port))
+        elif message.startswith('DN'):
+             m = re.search('DN\s+(\/.*)\s+successfully', message)
+             event = dict(event=ns('conn.auth.dn'), DN=m.group(1))
+        elif message.startswith('User'):
+            m = re.search('User\s+(\S+)\s+successfully', message)
+            event = dict(event=ns('conn.auth.user'), user=m.group(1))
+        elif message.startswith('Starting'):
+            m = re.search('transfer \"([^"]*)\"', message)
+            event = dict(event=ns('conn.transfer.start'), 
+                         filename=m.group(1))
+            msg_type = 1
+        elif message.startswith('Finished'):
+            m = re.search('transferring \"([^"]*)\"', message)
+            event = dict(event=ns('conn.transfer.end'),
+                         filename=m.group(1))
+            msg_type = 2
+        elif message.startswith('Closed'):
+            event = dict(event=ns('end'))
+        else:
+            self.log.debug("process.end", status=0, n=0)
+            return ()
         event['ts'] = parseSyslogDate(date)
         event['PID'] = int(pid)
         event_list = (event,)
