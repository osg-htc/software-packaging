diff --git netlogger/parsers/modules/gridftp_auth.py netlogger/parsers/modules/gridftp_auth.py
index 21e8548..f622880 100644
--- netlogger/parsers/modules/gridftp_auth.py
+++ netlogger/parsers/modules/gridftp_auth.py
@@ -15,6 +15,12 @@ from netlogger.parsers.base import BaseParser
 from netlogger.nldate import parseSyslogDate
 from netlogger import util
 
+logger = logging.getLogger('netlogger.parsers.modules.gridftp_auth')
+filehdlr = logging.FileHandler('/var/log/gratia/netlogger.log','w')
+formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
+filehdlr.setFormatter(formatter)
+logger.addHandler(filehdlr)
+
 def ns(s):
     return 'gridftp_auth.%s' % s
 
@@ -33,6 +39,8 @@ class Parser(BaseParser):
         BaseParser.__init__(self, f, fullname=__name__, **kw)
         self._batch = [ ]
         self._cur_pid = None
+        self.host = None
+        self.port = None
         self._gen_errs = error_events
         if self._gen_errs:
             self._hdr_host = None
@@ -46,6 +54,26 @@ class Parser(BaseParser):
         pid_str = '^\[(\d+)\]'
         self._line_re = re.compile(pid_str + '(.*?)::.(.*)$')
 
+    def set_hostport(self, message):
+        # dealing with "New connection from: 0.0.0.0"
+        rcolon=message.rfind(':')
+        try:
+           self.port = int(message[rcolon+1:])
+        except:
+           self.log.error("Could not parse New event:%s; Set port to 0. " % ( message.strip()))
+        self.port=0
+        rsqbrace=message.rfind(']')
+        try:
+            if rcolon-rsqbrace==1:
+                lsqbrace=message.rfind('[')
+                self.host=message[lsqbrace+1:rcolon-1]
+            else:
+                logtokens=message.split(':',2)
+                self.host=logtokens[1].lstrip()
+        except:
+            self.host="unknown"
+
+
     def process(self, line):
         self.log.debug("process.start", line=line)
         m = self._line_re.match(line)
@@ -60,23 +88,35 @@ class Parser(BaseParser):
         elif message.startswith('Configuration'):
             event = dict(event=ns('config'))
         elif message.startswith('New'):
-            m = re.search('from:\s*(\S+)', message)
-            host, port =  m.group(1).split(':')
-            event = dict(event=ns('conn.start'), host=host, 
-                         port=int(port))
+            self.set_hostport(message)
+            event = dict(event=ns('conn.start'), host=self.host, 
+                         port=int(self.port))
         elif message.startswith('DN'):
              m = re.search('DN\s+(\/.*)\s+successfully', message)
+             if m is None:
+                 self.log.error("Could not parse DN event: " + message.strip())
+                 return ()
              event = dict(event=ns('conn.auth.dn'), DN=m.group(1))
         elif message.startswith('User'):
             m = re.search('User\s+(\S+)\s+successfully', message)
+            if m is None:
+                self.log.error("Could not parse User event: " + message.strip())
+                return ()
             event = dict(event=ns('conn.auth.user'), user=m.group(1))
         elif message.startswith('Starting'):
             m = re.search('transfer \"([^"]*)\"', message)
-            event = dict(event=ns('conn.transfer.start'), 
+            if m is None:
+                self.log.error("Could not parse Starting event: " + message.strip())
+                return ()
+            else:
+                event = dict(event=ns('conn.transfer.start'), 
                          filename=m.group(1))
             msg_type = 1
         elif message.startswith('Finished'):
             m = re.search('transferring \"([^"]*)\"', message)
+            if m is None:
+                self.log.error("Could not parse Finished event: " + message.strip())
+                return ()
             event = dict(event=ns('conn.transfer.end'),
                          filename=m.group(1))
             msg_type = 2
