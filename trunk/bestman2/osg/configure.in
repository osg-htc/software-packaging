dnl Process this file with autoconf to produce a configure script.
AC_INIT(BeStMan, 2.2, srm@lbl.gov)

AC_COPYRIGHT(Copyright 2011 the Regents of the University Of California)

dnl ##########################################################
dnl # make clean before configure if compiled before
dnl ##########################################################
TMP_LOGDATE="`date '+%y%m%d%H%M%S'`"
if test "$TMP_LOGDATE" ; then
	echo "LOG DATE: $TMP_LOGDATE"
else
    TMP_LOGDATE="setuplog"
	echo "LOG DATE: $TMP_LOGDATE"
fi

dnl ##########################################################
dnl # Collecting Mode information
dnl ##########################################################
GATEWAYMODE="yes"
FULLMODE="no"

AC_ARG_ENABLE(gateway-mode,
[  --enable-gateway-mode  (default=yes)    Enable BeStMan in Gateway mode],
GATEWAYMODE="yes"
FULLMODE="no")

AC_ARG_ENABLE(full-mode,
[  --enable-full-mode  (default=no)    Enable BeStMan in Full mode],
FULLMODE="yes"
GATEWAYMODE="no")

if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then
    echo "GATEWAY MODE ENABLED"
else
    if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
        echo "FULL MODE ENABLED"
	else
		echo "UNKNOWN"
        echo "GATEWAYMODE=$GATEWAYMODE"
        echo "FULLMODE=$FULLMODE"
	fi
fi

dnl ##########################################################
LOGFILE="bestman.$TMP_LOGDATE.log"
dnl ##########################################################

echo "logfile is ... $LOGFILE"
if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then
    echo "*** BESTMAN GATEWAY MODE CONFIGURATION on $TMP_LOGDATE ***"
    echo "*** BESTMAN GATEWAY MODE CONFIGURATION on $TMP_LOGDATE ***" > $LOGFILE
else 
    if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
        echo "*** BESTMAN FULL MODE CONFIGURATION on $TMP_LOGDATE ***"
        echo "*** BESTMAN FULL MODE CONFIGURATION on $TMP_LOGDATE ***" > $LOGFILE
	else
        echo "*** BESTMAN UNKNOWN MODE CONFIGURATION ***" > $LOGFILE
        echo "*** BESTMAN UNKNOWN MODE CONFIGURATION ***"
        echo "*** Exiting...  Check the configuration and retry ***"
		exit 9;
    fi 
fi
cat config.log >> $LOGFILE
echo " " >> $LOGFILE

VERBOSE=">>"
AC_ARG_ENABLE(verbose,
[  --enable-verbose                Print output to the standard output],
VERBOSE="| tee -a")

Ver_separator ()
{
	var1=$1
	if test ! "$var1" ; then
		var1=0
	fi
	var2=$2
	if test ! "$var2" ; then
		var2=0
	fi
	var3=$3
	if test ! "$var3" ; then
		var3=0
	fi
}

Ver_getter ()
{
	varget=$1
	varget=`echo $varget | sed 's/\./ /g'`
}
 
dnl ##########################################################
dnl LOGFILE="bestman.`date '+%m%d%y%H%M'`.log"
dnl LOGFILE="bestman.$TMP_LOGDATE.log"
dnl ##########################################################

HOST=`/bin/uname -n`
dnl binary directory
SETUPD=`pwd 2>&1`
INSTALLP=`echo $SETUPD | sed 's%/setup%%'`

dnl CLASSPATH to include all dependent libs to build bestman2
BUILDP="$SETUPD/build.properties"

echo "DEFAULT_PTMP=$INSTALLP"
dnl binary directory
dnl AC_PREFIX_DEFAULT([`echo $INSTALLP`/dist])
if test "x$prefix" = "xNONE"; then
   if test -f "$BUILDP" ; then
      AC_MSG_RESULT([build.properties is found])
      INSTALLPATH=`grep install.root $BUILDP | tr '=' ' ' | awk '$1 !~ /#/' | awk '{printf $2}'`
      if test "X$INSTALLPATH" = "X" ; then
          ac_default_prefix="$INSTALLP/dist"
          AC_MSG_WARN([install.root in build.properties is not found. Assume default binary distribution $INSTALLP/dist])
      else 
          ac_default_prefix="$INSTALLPATH"
          AC_MSG_RESULT([install.root=$INSTALLPATH will be used.])
      fi
   else
      AC_MSG_WARN([build.properties for setup is not found. Assume default binary distribution $INSTALLP/dist])
      ac_default_prefix="$INSTALLP/dist"
      BUILDP="NOBUILD"
   fi
   prefix=$ac_default_prefix
   ac_configure_args="$ac_configure_args --prefix $prefix"
fi
echo "DEFAULT_PREFIX=$prefix"

dnl ## for bin and sbin files
dnl my_GET_SYSTYPE
dnl my_SRM_HOME
SRM_HOME=$prefix
my_JAVA_HOME
my_JAVACHECK

dnl my_GATEWAYMODE
dnl my_FULLMODE
my_SERVERONLY
my_CLIENTONLY
my_TESTERONLY

my_MYCONFPATH

OUTPUTFILES="$SRM_HOME/bin/srm-ping:./bestman.in/srm-ping.in \
$SRM_HOME/bin/srm-copy:./bestman.in/srm-copy.in \
$SRM_HOME/bin/srm-common.sh:./bestman.in/srm-common.sh.in \
$SRM_HOME/bin/srm-copy-status:./bestman.in/srm-copy-status.in \
$SRM_HOME/bin/srm-extendfilelifetime:./bestman.in/srm-extendfilelifetime.in \
$SRM_HOME/bin/srm-ls:./bestman.in/srm-ls.in \
$SRM_HOME/bin/srm-ls-status:./bestman.in/srm-ls-status.in \
$SRM_HOME/bin/srm-mkdir:./bestman.in/srm-mkdir.in \
$SRM_HOME/bin/srm-mv:./bestman.in/srm-mv.in \
$SRM_HOME/bin/srm-permission-check:./bestman.in/srm-permission-check.in \
$SRM_HOME/bin/srm-permission-get:./bestman.in/srm-permission-get.in \
$SRM_HOME/bin/srm-permission-set:./bestman.in/srm-permission-set.in \
$SRM_HOME/bin/srm-putdone:./bestman.in/srm-putdone.in \
$SRM_HOME/bin/srm-release:./bestman.in/srm-release.in \
$SRM_HOME/bin/srm-req-abort:./bestman.in/srm-req-abort.in \
$SRM_HOME/bin/srm-req-abortfiles:./bestman.in/srm-req-abortfiles.in \
$SRM_HOME/bin/srm-req-resume:./bestman.in/srm-req-resume.in \
$SRM_HOME/bin/srm-req-summary:./bestman.in/srm-req-summary.in \
$SRM_HOME/bin/srm-req-suspend:./bestman.in/srm-req-suspend.in \
$SRM_HOME/bin/srm-req-tokens:./bestman.in/srm-req-tokens.in \
$SRM_HOME/bin/srm-rm:./bestman.in/srm-rm.in \
$SRM_HOME/bin/srm-rmdir:./bestman.in/srm-rmdir.in \
$SRM_HOME/bin/srm-sp-change:./bestman.in/srm-sp-change.in \
$SRM_HOME/bin/srm-sp-change-status:./bestman.in/srm-sp-change-status.in \
$SRM_HOME/bin/srm-sp-info:./bestman.in/srm-sp-info.in \
$SRM_HOME/bin/srm-sp-purge:./bestman.in/srm-sp-purge.in \
$SRM_HOME/bin/srm-sp-release:./bestman.in/srm-sp-release.in \
$SRM_HOME/bin/srm-sp-reserve:./bestman.in/srm-sp-reserve.in \
$SRM_HOME/bin/srm-sp-reserve-status:./bestman.in/srm-sp-reserve-status.in \
$SRM_HOME/bin/srm-sp-tokens:./bestman.in/srm-sp-tokens.in \
$SRM_HOME/bin/srm-sp-update:./bestman.in/srm-sp-update.in \
$SRM_HOME/bin/srm-sp-update-status:./bestman.in/srm-sp-update-status.in \
$SRM_HOME/bin/srm-tester:./bestman.in/srm-tester.in \
$SRM_HOME/bin/srm-transferprotocols:./bestman.in/srm-transferprotocols.in \
$SRM_HOME/bin/bestman-diag:./bestman.in/bestman-diag.in \
$SRM_HOME/conf/WEB-INF/server-config.wsdd:./bestman.in/server-config.wsdd.in \
$SRM_HOME/conf/WEB-INF/jetty.xml:./bestman.in/jetty.xml.in \
$SRM_HOME/conf/WEB-INF/web.xml:./bestman.in/web.xml.in \
$SRM_HOME/conf/srmtester.conf:./bestman.in/srmtester.conf.in \
$SRM_HOME/conf/bestman-diag.conf.sample:./bestman.in/bestman-diag.conf.sample.in \
$SRM_HOME/conf/bestman-diag-msg.conf:./bestman.in/bestman-diag-msg.conf.in \
$SRM_HOME/conf/grid-mapfile.empty:./bestman.in/grid-mapfile.empty.in \
$SRM_HOME/conf/bestmanclient.conf:./bestman.in/bestmanclient.conf.in \
$SRM_HOME/sbin/bestman.server:./bestman.in/bestman.server.in \
$SRM_HOME/sbin/SXXbestman:./bestman.in/SXXbestman.in \
$SRM_HOME/sbin/SXXbestman.personal:./bestman.in/SXXbestman.personal.in"

dnl $SRM_HOME/bin/srm-util:./bestman.in/srm-util.in \
dnl $SRM_HOME/bin/srm-request:./bestman.in/srm-request.in \
dnl $SRM_HOME/bin/srm-dir:./bestman.in/srm-dir.in \
dnl $SRM_HOME/bin/srm-space:./bestman.in/srm-space.in \

OUTPUTSERVERFILES="$SRM_HOME/sbin/bestman.server:./bestman.in/bestman.server.in \
$SRM_HOME/conf/WEB-INF/server-config.wsdd:./bestman.in/server-config.wsdd.in \
$SRM_HOME/conf/WEB-INF/jetty.xml:./bestman.in/jetty.xml.in \
$SRM_HOME/conf/WEB-INF/web.xml:./bestman.in/web.xml.in \
$SRM_HOME/conf/grid-mapfile.empty:./bestman.in/grid-mapfile.empty.in \
$SRM_HOME/conf/mss.init.sample:./bestman.in/mss.init.sample.in \
$SRM_HOME/sbin/SXXbestman:./bestman.in/SXXbestman.in \
$SRM_HOME/sbin/SXXbestman.personal:./bestman.in/SXXbestman.personal.in"

OUTPUTCLIENTFILES="$SRM_HOME/bin/srm-ping:./bestman.in/srm-ping.in \
$SRM_HOME/bin/srm-copy:./bestman.in/srm-copy.in \
$SRM_HOME/bin/srm-common.sh:./bestman.in/srm-common.sh.in \
$SRM_HOME/bin/srm-copy-status:./bestman.in/srm-copy-status.in \
$SRM_HOME/bin/srm-extendfilelifetime:./bestman.in/srm-extendfilelifetime.in \
$SRM_HOME/bin/srm-ls:./bestman.in/srm-ls.in \
$SRM_HOME/bin/srm-ls-status:./bestman.in/srm-ls-status.in \
$SRM_HOME/bin/srm-mkdir:./bestman.in/srm-mkdir.in \
$SRM_HOME/bin/srm-mv:./bestman.in/srm-mv.in \
$SRM_HOME/bin/srm-permission-check:./bestman.in/srm-permission-check.in \
$SRM_HOME/bin/srm-permission-get:./bestman.in/srm-permission-get.in \
$SRM_HOME/bin/srm-permission-set:./bestman.in/srm-permission-set.in \
$SRM_HOME/bin/srm-putdone:./bestman.in/srm-putdone.in \
$SRM_HOME/bin/srm-release:./bestman.in/srm-release.in \
$SRM_HOME/bin/srm-req-abort:./bestman.in/srm-req-abort.in \
$SRM_HOME/bin/srm-req-abortfiles:./bestman.in/srm-req-abortfiles.in \
$SRM_HOME/bin/srm-req-resume:./bestman.in/srm-req-resume.in \
$SRM_HOME/bin/srm-req-summary:./bestman.in/srm-req-summary.in \
$SRM_HOME/bin/srm-req-suspend:./bestman.in/srm-req-suspend.in \
$SRM_HOME/bin/srm-req-tokens:./bestman.in/srm-req-tokens.in \
$SRM_HOME/bin/srm-rm:./bestman.in/srm-rm.in \
$SRM_HOME/bin/srm-rmdir:./bestman.in/srm-rmdir.in \
$SRM_HOME/bin/srm-sp-change:./bestman.in/srm-sp-change.in \
$SRM_HOME/bin/srm-sp-change-status:./bestman.in/srm-sp-change-status.in \
$SRM_HOME/bin/srm-sp-info:./bestman.in/srm-sp-info.in \
$SRM_HOME/bin/srm-sp-purge:./bestman.in/srm-sp-purge.in \
$SRM_HOME/bin/srm-sp-release:./bestman.in/srm-sp-release.in \
$SRM_HOME/bin/srm-sp-reserve:./bestman.in/srm-sp-reserve.in \
$SRM_HOME/bin/srm-sp-reserve-status:./bestman.in/srm-sp-reserve-status.in \
$SRM_HOME/bin/srm-sp-tokens:./bestman.in/srm-sp-tokens.in \
$SRM_HOME/bin/srm-sp-update:./bestman.in/srm-sp-update.in \
$SRM_HOME/bin/srm-sp-update-status:./bestman.in/srm-sp-update-status.in \
$SRM_HOME/bin/srm-transferprotocols:./bestman.in/srm-transferprotocols.in \
$SRM_HOME/conf/bestmanclient.conf:./bestman.in/bestmanclient.conf.in" 

dnl $SRM_HOME/bin/srm-util:./bestman.in/srm-util.in" \
dnl $SRM_HOME/bin/srm-request:./bestman.in/srm-request.in \
dnl $SRM_HOME/bin/srm-dir:./bestman.in/srm-dir.in \
dnl $SRM_HOME/bin/srm-space:./bestman.in/srm-space.in \

OUTPUTTESTERFILES="$SRM_HOME/bin/srm-tester:./bestman.in/srm-tester.in \
$SRM_HOME/conf/srmtester.conf.sample:./bestman.in/srmtester.conf.sample.in \
$SRM_HOME/conf/srmtester.conf:./bestman.in/srmtester.conf.in"

OUTPUTURLCOPYFILES="$SRM_HOME/bin/g-urlcopy.sh:./bestman.in/g-urlcopy.sh.in"

if test ! "$MYCONFPATH" ; then
    MYCONFPATH="$SRM_HOME/conf/bestman2.rc"
fi
echo "## BESTMAN2 CONF PATH=$MYCONFPATH" 
echo "## BESTMAN2 CONF PATH=$MYCONFPATH" >> $LOGFILE

dnl ## for bestman2.rc
my_ALLOWEDPATHS
my_BLOCKEDPATHS
my_CA_DIR_PATH
my_CACHEDIDLIFETIME
my_CACHELOG_PATH
my_CERT_FILE_PATH
my_CHECKFILEFS
my_CHECKFILEGSIFTP
my_CHECKSUM_CALLOUT
my_CHECKSUMLISTING
my_CHECKSUMTYPE
my_CONCURRENCY
my_CONCURRENT_FILE_TRANSFER
my_MAX_CONTAINER_THREADS
my_MIN_CONTAINER_THREADS
my_CONNECTOR_QUEUE_SIZE
my_CONNECTION_ACCEPTOR_SIZE
my_CUSTODIAL_STORAGE_PATH
my_CUSTODIAL_STORAGE_SIZE
my_DEFAULT_FILESIZE
my_EVENTLOG
my_EVENTLOG_NUM
my_EVENTLOG_SIZE
my_EVENTLOG_LEVEL
my_EVENTLOG_PATH
my_EXTRALIBS
my_FILELIFETIME
my_FS_CONCURRENCY
my_GLOBUS_TCP_PORT_RANGE
my_GLOBUS_TCP_SOURCE_RANGE
my_GRIDFTP_BUFFERSIZE
my_GRIDFTP_STREAMS
my_GRIDMAP_PATH
my_GSIFTPFSM
my_GUC_GLOBUS_PATH
my_GUMSENABLED
my_GUMSDN
my_GUMSCERT_FILE_PATH
my_GUMSKEY_FILE_PATH
my_GUMSPROXY_FILE_PATH
my_GUMSURL
dnl my_HTTP_PORT
my_HTTPS_PORT
my_INACTIVE_TIMEOUT
my_JETTYDEBUG
my_KEY_FILE_PATH
my_MAX_FILES
my_MAX_JAVA_HEAP
my_JAVA_CLIENT_MAX_HEAP
my_JAVA_STACK_SIZE
my_JAVA_CLIENT_STACK_SIZE
my_MAX_MSS_CONNECTION
my_MAX_USERS
my_JAVA_CLIENT_MIN_HEAP
my_MSS_TIMEOUT
my_MSSENABLE
my_OUTPUT_STORAGE_PATH
my_OUTPUT_STORAGE_SIZE
my_OUTPUTLOG_PATH
my_PATHFORTOKEN
my_PID_PATH
my_PLUGIN_PATH
my_PROTOCOL_POLICY
my_PROXY_FILE_PATH
my_PUBLIC_SPACE
my_PUBLIC_SPACE_PROPORTION
my_REPLICA_STORAGE_PATH
my_REPLICA_STORAGE_SIZE
my_RESERVED_SIZE
my_SPACEFILELIFETIME
my_SRM_OWNER
my_SUDOFSM
my_SUDOLS
my_TOKENSLIST
my_TSERVERS
my_USER_SPACE_KEY
my_VOMS_DIR_PATH
my_VOMS_VALIDATION

dnl my_BERKELEYDB
dnl my_SRMCACHEKEY
dnl my_TWOQUEUES
dnl my_SRM_NAME
dnl my_GUC_GLOBUS_PATH
dnl my_APPENDTURL

SRM_NAME="srm/v2/server"
dnl SRM_SERVICE="gov.lbl.srm.impl.TSRMServiceGateway"
BERKELEYDB="yes"
SRMCACHEKEY="yes"
TWOQUEUES="yes"

echo "#" 
if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then
    SRM_SERVICE="gov.lbl.srm.impl.TSRMServiceGateway"
    echo "## GATEWAY MODE CONFIGURETION"
    echo "## GATEWAY MODE CONFIGURETION" >> $LOGFILE
else
    if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
        SRM_SERVICE="gov.lbl.srm.impl.TSRMService"
        echo "## FULL MODE CONFIGURETION"
        echo "## FULL MODE CONFIGURETION" >> $LOGFILE
    else
        SRM_SERVICE="gov.lbl.srm.impl.TSRMServiceGateway"
        echo "## GATEWAY MODE CONFIGURETION"
        echo "## GATEWAY MODE CONFIGURETION" >> $LOGFILE
    fi
fi

dnl ##########################################################
dnl # configuration
dnl ##########################################################

echo ""

dnl SRM_SERVICE="gov.lbl.srm.impl.TSRMServiceGateway"

if test "$GLOBUS_TCP_PORT_RANGE" ; then
	echo "## GLOBUS_TCP_PORT_RANGE=$GLOBUS_TCP_PORT_RANGE" >> $LOGFILE
fi

if test "$GLOBUS_TCP_SOURCE_RANGE" ; then
	echo "## GLOBUS_TCP_SOURCE_RANGE=$GLOBUS_TCP_SOURCE_RANGE" >> $LOGFILE
else
	if test "$GLOBUS_TCP_PORT_RANGE" ; then
		GLOBUS_TCP_SOURCE_RANGE=$GLOBUS_TCP_PORT_RANGE
	    echo "## GLOBUS_TCP_SOURCE_RANGE=$GLOBUS_TCP_SOURCE_RANGE" >> $LOGFILE
	fi
fi


if test "$CLIENTONLY" = "yes" ; then
		echo "## CLIENT ONLY CONFIGURETION"
		echo "## CLIENT ONLY CONFIGURETION" >> $LOGFILE
else
	if test "$TESTERONLY" = "yes" ; then
		echo "## TESTER ONLY CONFIGURETION"
		echo "## TESTER ONLY CONFIGURETION" >> $LOGFILE
	else 

if test "$GRIDMAP_PATH" ; then
    if test -f "$GRIDMAP_PATH" ; then
		echo "## GridMapFileName=$GRIDMAP_PATH"
		echo "## GridMapFileName=$GRIDMAP_PATH" >> $LOGFILE
	else
		echo "WARNING: GridMapFileName defined but does NOT exist"
		echo "WARNING: GridMapFileName defined but does NOT exist" >> $LOGFILE
		echo "WARNING: BeStMan server may not run properly"
		echo "WARNING: BeStMan server may not run properly" >> $LOGFILE
	fi
else
	echo "NOTE: GridMapFileName NOT defined"
	echo "NOTE: GridMapFileName NOT defined" >> $LOGFILE
    if test "$GUMSENABLED" = "yes" ; then
		echo "## GUMS ENABLED"
		echo "## GUMS ENABLED" >> $LOGFILE
	    GRIDMAP_PATH="$SRM_HOME/conf/grid-mapfile.empty"
		echo "GridMapFileName=$GRIDMAP_PATH" 
    else
	    GRIDMAP_PATH="/etc/grid-security/grid-mapfile"
		echo "WARNING: using default /etc/grid-security/grid-mapfile"
		echo "WARNING: using default /etc/grid-security/grid-mapfile" >> $LOGFILE
    fi
fi

if test "$GUMSENABLED" = "yes" ; then
    if test "$GUMSCERT_FILE_PATH" -a "$GUMSKEY_FILE_PATH" ; then
        echo "WARNING: GUMS client Cert/Key paths will be used as provided"
        echo "WARNING: GUMS client Cert/Key paths will be used as provided" >> $LOGFILE

        echo "## GUMSCertFileName=$GUMSCERT_FILE_PATH"
        echo "## GUMSCertFileName=$GUMSCERT_FILE_PATH" >> $LOGFILE
        echo "## GUMSKeyFileName=$GUMSKEY_FILE_PATH"
        echo "## GUMSKeyFileName=$GUMSKEY_FILE_PATH" >> $LOGFILE
	else
        if test "$GUMSPROXY_FILE_PATH" ; then
            echo "WARNING: GUMS client proxy paths will be used as provided"
            echo "WARNING: GUMS client proxy paths will be used as provided" >> $LOGFILE
            echo "## GUMSProxyFileName=$GUMSPROXY_FILE_PATH"
            echo "## GUMSProxyFileName=$GUMSPROXY_FILE_PATH" >> $LOGFILE
        else

             echo "WARNING: GUMS client Cert/Key paths will be the same as SRM service cert/key"
             echo "WARNING: GUMS client Cert/Key paths will be the same as SRM service cert/key" >> $LOGFILE

             GUMSCERT_FILE_PATH=$CERT_FILE_PATH
             GUMSKEY_FILE_PATH=$KEY_FILE_PATH
		
             echo "## GUMSCertFileName=$GUMSCERT_FILE_PATH"
             echo "## GUMSCertFileName=$GUMSCERT_FILE_PATH" >> $LOGFILE
             echo "## GUMSKeyFileName=$GUMSKEY_FILE_PATH"
             echo "## GUMSKeyFileName=$GUMSKEY_FILE_PATH" >> $LOGFILE
             if test "$PROXY_FILE_PATH" ; then
                 echo "WARNING: GUMS client proxy paths will be the same as SRM service cert/key"
                 echo "WARNING: GUMS client proxy paths will be the same as SRM service cert/key" >> $LOGFILE
                 GUMSPROXY_FILE_PATH=$PROXY_FILE_PATH
                 echo "## GUMSProxyFileName=$PROXY_FILE_PATH"
                 echo "## GUMSProxyFileName=$PROXY_FILE_PATH" >> $LOGFILE
             fi
         fi
    fi
fi
dnl #### TESTERONLY
	fi
dnl #### CLIENTONLY
fi


dnl ## for bin and sbin files
dnl AC_SUBST(SYSTYPE)
AC_SUBST(SRM_HOME)
AC_SUBST(EVENTLOG_PATH)
AC_SUBST(GRIDMAP_PATH)
AC_SUBST(MAX_CONTAINER_THREADS)
AC_SUBST(MIN_CONTAINER_THREADS)
AC_SUBST(SRM_SERVICE)
AC_SUBST(GUC_GLOBUS_PATH)
AC_SUBST(PROXY_FILE_PATH)

if ! test -d "$SRM_HOME/conf" ; then
    mkdir $SRM_HOME/conf
fi
if ! test -d "$SRM_HOME/etc" ; then
    mkdir $SRM_HOME/etc
fi
if ! test -d "$SRM_HOME/properties" ; then
    mkdir $SRM_HOME/properties
fi

if test "$CLIENTONLY" = "yes" ; then
    echo "installing SRM clients only"
    echo "installing SRM clients only" >>  $LOGFILE
	if ! test -d "$SRM_HOME/bin" ; then
		mkdir $SRM_HOME/bin
	fi
    AC_OUTPUT($OUTPUTCLIENTFILES)
else
	if test "$TESTERONLY" = "yes" ; then
    	echo "installing SRM-Tester only"
	    echo "installing SRM-Tester only" >>  $LOGFILE
		if ! test -d "$SRM_HOME/bin" ; then
			mkdir $SRM_HOME/bin
		fi
	    AC_OUTPUT($OUTPUTTESTERFILES)
	else
		if test "$SERVERONLY" = "yes" ; then
    		echo "installing BeStMan server only"
		    echo "installing BeStMan server only" >>  $LOGFILE
			if ! test -d "$SRM_HOME/sbin" ; then
				mkdir $SRM_HOME/sbin
			fi
		    AC_OUTPUT($OUTPUTSERVERFILES)
		else
		    echo "installing BeStMan server, client and tester"
		    echo "installing BeStMan server, client and tester" >>  $LOGFILE
			if ! test -d "$SRM_HOME/bin" ; then
				mkdir $SRM_HOME/bin
			fi
			if ! test -d "$SRM_HOME/sbin" ; then
				mkdir $SRM_HOME/sbin
			fi
		    AC_OUTPUT($OUTPUTFILES)
		fi
	fi
fi

dnl ###################################################################
dnl ###################################################################
dnl ###################################################################

dnl CLASSPATH to include all dependent libs to build bestman2
dnl pwdtmp=`pwd 2>&1`
dnl BUILDP="$pwdtmp/build.properties"
if test -f "$BUILDP" ; then
   AC_MSG_RESULT([build.properties is found for dependent lib paths])
else
   AC_MSG_WARN([build.properties for setup is not found])
   BUILDP="NOBUILD"
fi

dnl ##########################################################
dnl # configuration 
dnl ##########################################################

if test "$GUC_GLOBUS_PATH" ; then
    AC_OUTPUT($OUTPUTURLCOPYFILES)
fi

dnl ##########################################################
dnl # configuration 
dnl ##########################################################

echo " " >> $LOGFILE
echo "###########################################################" >> $LOGFILE
echo " " >> $LOGFILE

dnl ###########################################################
dnl # bestman2.rc
dnl ###########################################################
if test "$CLIENTONLY" = "no" -a "$TESTERONLY" = "no" ; then

echo "###########################################################" > $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
echo "# Below is ONLY for BeStMan server INTERNAL definitions">> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH

if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then
    echo "# BeStMan server GATEWAY mode configuration"
    echo "# BeStMan server GATEWAY mode configuration" >> $LOGFILE
    echo "# BeStMan server GATEWAY mode configuration" >> $MYCONFPATH
else
    if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
        echo "# BeStMan server FULL mode configuration"
        echo "# BeStMan server FULL mode configuration" >> $LOGFILE
        echo "# BeStMan server FULL mode configuration" >> $MYCONFPATH
    fi
fi

echo "# installed on `date` "
echo "# installed on `date` " >> $MYCONFPATH
echo "# administrative guide on http://sdm.lbl.gov/bestman" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH

if test "$EVENTLOG_PATH" ; then
    echo "## EventLogLocation=$EVENTLOG_PATH"
    echo "## EventLogLocation=$EVENTLOG_PATH" >> $LOGFILE
    echo "EventLogLocation=$EVENTLOG_PATH" >> $MYCONFPATH
else
    echo "WARNING: \$EVENTLOG_PATH is not defined and "
    echo "     EventLogLocation will be written in /var/log/event.bestman.log"
    EVENTLOG_PATH="/var/log"
    echo "EventLogLocation=$EVENTLOG_PATH" >> $MYCONFPATH
    echo "WARNING: \$EVENTLOG_PATH is not defined and " >> $LOGFILE
    echo "      EventLogLocation will be written in /var/log/event.bestman.log" >> $LOGFILE
fi

if test "$EVENTLOG_LEVEL" ; then
    echo "# Modify eventLogLevel to adjust logging level (DEBUG | INFO)" >> $MYCONFPATH
    if test "$EVENTLOG_LEVEL" = "DEBUG" -o "$EVENTLOG_LEVEL" = "INFO" ; then
        echo "## eventLogLevel=$EVENTLOG_LEVEL"
        echo "## eventLogLevel=$EVENTLOG_LEVEL" >> $LOGFILE
        echo "eventLogLevel=$EVENTLOG_LEVEL" >> $MYCONFPATH
    else
        echo "## invalid eventLogLevel provided. INFO is used."
        echo "## invalid eventLogLevel provided. INFO is used." >> $LOGFILE
        echo "## eventLogLevel=INFO"
        echo "## eventLogLevel=INFO" >> $LOGFILE
        echo "eventLogLevel=INFO" >> $MYCONFPATH
    fi
else 
    echo "# Modify eventLogLevel to adjust logging level (DEBUG | INFO)" >> $MYCONFPATH
    echo "## eventLogLevel=INFO"
    echo "## eventLogLevel=INFO" >> $LOGFILE
    echo "## eventLogLevel=INFO" >> $MYCONFPATH
fi  
    
echo "###########################################################" >> $MYCONFPATH

if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
    if test "$REPLICA_STORAGE_PATH" -a "$REPLICA_STORAGE_SIZE" ; then
        echo "## ReplicaQualityStorageMB=[[$REPLICA_STORAGE_SIZE]]path=$REPLICA_STORAGE_PATH;"
        echo "## ReplicaQualityStorageMB=[[$REPLICA_STORAGE_SIZE]]path=$REPLICA_STORAGE_PATH;" >> $LOGFILE
        echo "ReplicaQualityStorageMB=[[$REPLICA_STORAGE_SIZE]]path=$REPLICA_STORAGE_PATH;" >> $MYCONFPATH
        echo "NOTE: If you have more path to support, edit $MYCONFPATH"
        echo "       and add to ReplicaQualityStorageMB with "
        echo "       semi-colon \";\" as seperator"
        echo "       e.g. ReplicaQualityStorageMB=[3100]path=/tmp/cache;[200]path=/scratch/cache"
        echo "NOTE: If you have more paths to support, edit $MYCONFPATH" >> $LOGFILE
        echo "       and add to ReplicaQualityStorageMB with " >> $LOGFILE
        echo "       semi-colon \";\" as seperator" >> $LOGFILE
        echo "       e.g. ReplicaQualityStorageMB=[3100]path=/tmp/cache;[200]path=/scratch/cache" >> $LOGFILE

    else
        echo "ERROR: \$REPLICA_STORAGE_PATH or \$REPLICA_STORAGE_SIZE is not"
        echo "       defined and configuration cannot proceed"
        echo "     Use --with-replica-storage-path=<DIRPATH> and"
        echo "         --with-replica-storage-size=<INT> to define"
        echo "ERROR: \$REPLICA_STORAGE_PATH or \$REPLICA_STORAGE_SIZE is not" >> $LOGFILE
        echo "       defined and configuration cannot proceed" >> $LOGFILE
        echo "Use --with-replica-storage-path=<DIRPATH> and --with-replica-storage-size=<INT> to define" >> $LOGFILE
        exit 11;
    fi

    if test "$OUTPUT_STORAGE_PATH" -a "$OUTPUT_STORAGE_SIZE" ; then
        echo "## OutputQualityStorageMB=[[$OUTPUT_STORAGE_SIZE]]path=$OUTPUT_STORAGE_PATH;"
        echo "## OutputQualityStorageMB=[[$OUTPUT_STORAGE_SIZE]]path=$OUTPUT_STORAGE_PATH;" >> $LOGFILE
        echo "OutputQualityStorageMB=[[$OUTPUT_STORAGE_SIZE]]path=$OUTPUT_STORAGE_PATH;" >> $MYCONFPATH
        echo "NOTE: If you have more paths to support, edit $MYCONFPATH"
        echo "       and add to OutputQualityStorageMB with "
        echo "       semi-colon \";\" as seperator"
        echo "       e.g. OutputQualityStorageMB=[3100]path=/tmp/cache/d;[200]path=/scratch/cache/d"
        echo "NOTE: If you have more paths to support, edit $MYCONFPATH" >> $LOGFILE
        echo "       and add to OutputQualityStorageMB with " >> $LOGFILE
        echo "       semi-colon \";\" as seperator" >> $LOGFILE
        echo "       e.g. OutputQualityStorageMB=[3100]path=/tmp/cache/d;[200]path=/scratch/cache/d" >> $LOGFILE
    else
        echo "NOTE: \$OUTPUT_STORAGE_PATH or \$OUTPUT_STORAGE_SIZE not defined"
        echo "NOTE: If supported, use --with-output-storage-path=<DIRPATH> and"
        echo "                        --with-output-storage-size=<INT> to define"
        echo "NOTE: \$OUTPUT_STORAGE_PATH or \$OUTPUT_STORAGE_SIZE not defined" >> $LOGFILE
        echo "NOTE: If supported, use --with-output-storage-path=<DIRPATH> and" >> $LOGFILE
        echo "                        --with-output-storage-size=<INT> to define" >> $LOGFILE
    fi

    if test "$CUSTODIAL_STORAGE_PATH" -a "$CUSTODIAL_STORAGE_SIZE" ; then
        echo "## CustodialQualityStorageMB=[[$CUSTODIAL_STORAGE_SIZE]]path=$CUSTODIAL_STORAGE_PATH;"
        echo "## CustodialQualityStorageMB=[[$CUSTODIAL_STORAGE_SIZE]]path=$CUSTODIAL_STORAGE_PATH;" >> $LOGFILE
        echo "CustodialQualityStorageMB=[[$CUSTODIAL_STORAGE_SIZE]]path=$CUSTODIAL_STORAGE_PATH;" >> $MYCONFPATH
        echo "NOTE: If you have more paths to support, edit $MYCONFPATH"
        echo "       and add to CustodialQualityStorageMB with "
        echo "       semi-colon \";\" as seperator"
        echo "       e.g. CustodialQualityStorageMB=[3100]path=/tmp/cache/p;[200]path=/scratch/cache/p"
        echo "NOTE: If you have more paths to support, edit $MYCONFPATH" >> $LOGFILE
        echo "       and add to CustodialQualityStorageMB with " >> $LOGFILE
        echo "       semi-colon \";\" as seperator" >> $LOGFILE
        echo "       e.g. CustodialQualityStorageMB=[3100]path=/tmp/cache/p;[200]path=/scratch/cache/p" >> $LOGFILE
    else
        echo "NOTE: \$CUSTODIAL_STORAGE_PATH or \$CUSTODIAL_STORAGE_SIZE not defined"
        echo "NOTE: If supported, use --with-custodial-storage-path=<DIRPATH> and"
        echo "                        --with-custodial-storage-size=<INT> to define"
        echo "NOTE: \$CUSTODIAL_STORAGE_PATH or \$CUSTODIAL_STORAGE_SIZE not defined" >> $LOGFILE
        echo "NOTE: If supported, use --with-custodial-storage-path=<DIRPATH> and" >> $LOGFILE
        echo "                        --with-custodial-storage-size=<INT> to define" >> $LOGFILE
    fi

else
dnl ## Gateway mode
    echo "#F# ReplicaQualityStorageMB=[[REPLICA_STORAGE_SIZE]]path=REPLICA_STORAGE_PATH;" >> $MYCONFPATH
    echo "#F# NOTE: If you have more paths to support, " >> $MYCONFPATH
    echo "#F#        add additional ones with semi-colon \";\" as seperator" >> $MYCONFPATH
    echo "#F#        e.g. ReplicaQualityStorageMB=[3100]path=/tmp/cache;[200]path=/scratch/cache" >> $MYCONFPATH
    echo "#F#" >> $MYCONFPATH
    echo "#F# OutputQualityStorageMB=[[OUTPUT_STORAGE_SIZE]]path=OUTPUT_STORAGE_PATH;" >> $MYCONFPATH
    echo "#F# NOTE: If you have more paths to support, " >> $MYCONFPATH
    echo "#F#        add additional ones with semi-colon \";\" as seperator" >> $MYCONFPATH
    echo "#F#        e.g. OutputQualityStorageMB=[3100]path=/tmp/cache/d;[200]path=/scratch/cache/d" >> $MYCONFPATH
    echo "#F#" >> $MYCONFPATH
    echo "#F# CustodialQualityStorageMB=[[CUSTODIAL_STORAGE_SIZE]]path=CUSTODIAL_STORAGE_PATH;" >> $MYCONFPATH
    echo "#F# NOTE: If you have more paths to support, " >> $MYCONFPATH
    echo "#F#        add additional ones with semi-colon \";\" as seperator" >> $MYCONFPATH
    echo "#F#        e.g. CustodialQualityStorageMB=[3100]path=/tmp/cache/p;[200]path=/scratch/cache/p" >> $MYCONFPATH

fi
echo "###########################################################" >> $MYCONFPATH

echo "# Provide blocking for user access to the list of the local directories" >> $MYCONFPATH
echo "## default: /;/etc;/var" >> $MYCONFPATH
echo "## All definitions will include the default blocked list" >> $MYCONFPATH
echo "## e.g. localPathListToBlock=/;/etc;/var " >> $MYCONFPATH

if test "$BLOCKEDPATHS" ; then
    echo "###########################################################" >> $MYCONFPATH
    echo "## localPathListToBlock=$BLOCKEDPATHS"
    echo "## localPathListToBlock=$BLOCKEDPATHS" >> $LOGFILE
    echo "localPathListToBlock=$BLOCKEDPATHS" >> $MYCONFPATH
else
    echo "### localPathListToBlock=BLOCKEDPATHS" >> $MYCONFPATH
    echo "NOTE: \$BLOCKEDPATHS is not defined" >> $LOGFILE
    echo "         Use --with-blocked-paths=<string;string> to define" >> $LOGFILE
fi

echo "###########################################################" >> $MYCONFPATH
echo "# Provide permission for user access to the list of the local directories" >> $MYCONFPATH
echo "## If a path is listed on both blocked and allowed list," >> $MYCONFPATH
echo "##           blocked is taken priority." >> $MYCONFPATH
echo "## e.g. localPathListAllowed=/home;/project " >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
if test "$ALLOWEDPATHS" ; then
    echo "## localPathListAllowed=$ALLOWEDPATHS"
    echo "## localPathListAllowed=$ALLOWEDPATHS" >> $LOGFILE
    echo "localPathListAllowed=$ALLOWEDPATHS" >> $MYCONFPATH
else
    echo "### localPathListAllowed=$ALLOWEDPATHS" >> $MYCONFPATH
    echo "NOTE: \$ALLOWEDPATHS is not defined" >> $LOGFILE
    echo "         Use --with-allowed-paths=<string;string> to define" >> $LOGFILE
fi

if test "$HTTPS_PORT" ; then
	echo "## securePort=$HTTPS_PORT"
	echo "## securePort=$HTTPS_PORT" >> $LOGFILE
	echo "securePort=$HTTPS_PORT" >> $MYCONFPATH
else
	echo "WARNING: \$HTTPS_PORT is not defined and securePort will be 8443"
	echo "         Use --with-https-port=<INT> to define"
    HTTPS_PORT="8443"
	echo "securePort=$HTTPS_PORT" >> $MYCONFPATH
	echo "WARNING: \$HTTPS_PORT is not defined and securePort will be 8443" >> $LOGFILE
	echo "         Use --with-https-port=<INT> to define" >> $LOGFILE
fi

if test "$PROXY_FILE_PATH" ; then
	echo "## ProxyFileName=$PROXY_FILE_PATH"
	echo "## ProxyFileName=$PROXY_FILE_PATH" >> $LOGFILE
	echo "ProxyFileName=$PROXY_FILE_PATH" >> $MYCONFPATH
	if test "$CERT_FILE_PATH" ; then
	    echo "WARNING: CertFileName=$CERT_FILE_PATH will be ignored"
	    echo "WARNING: CertFileName=$CERT_FILE_PATH will be ignored" >> $LOGFILE
	fi
	if test "$KEY_FILE_PATH" ; then
	    echo "WARNING: KeyFileName=$KEY_FILE_PATH will be ignored"
	    echo "WARNING: KeyFileName=$KEY_FILE_PATH will be ignored" >> $LOGFILE
	fi

else
	echo "WARNING: \$PROXY_FILE_PATH is not defined"
	echo "         Use --with-proxyfile-path=<INT> to define if desired"
	echo "WARNING: \$PROXY_FILE_PATH is not defined" >> $LOGFILE
	echo "         Use --with-proxyfile-path=<INT> to define if desired" >> $LOGFILE

	if test "$CERT_FILE_PATH" -a "$KEY_FILE_PATH" ; then
	    echo "WARNING: Cert/Key will be used"
	    echo "WARNING: Cert/Key will be used" >> $LOGFILE

		echo "## CertFileName=$CERT_FILE_PATH"
		echo "## CertFileName=$CERT_FILE_PATH" >> $LOGFILE
		echo "CertFileName=$CERT_FILE_PATH" >> $MYCONFPATH

		echo "## KeyFileName=$KEY_FILE_PATH"
		echo "## KeyFileName=$KEY_FILE_PATH" >> $LOGFILE
		echo "KeyFileName=$KEY_FILE_PATH" >> $MYCONFPATH
	else
	    echo "WARNING: default Cert/Key will be used"
	    echo "WARNING: default Cert/Key will be used" >> $LOGFILE

		echo "         \$CERT_FILE_PATH is not defined and"
		echo "         CertFileName will be /etc/grid-security/hostcert.pem"
		echo "         Use --with-certfile-path=<INT> to define"
	    CERT_FILE_PATH="/etc/grid-security/hostcert.pem"
		echo "CertFileName=$CERT_FILE_PATH" >> $MYCONFPATH
		echo "WARNING: \$CERT_FILE_PATH is not defined and" >> $LOGFILE
		echo "         CertFileName will be /etc/grid-security/hostcert.pem" >> $LOGFILE
		echo "         Use --with-certfile-path=<INT> to define" >> $LOGFILE
	
		echo "WARNING: \$KEY_FILE_PATH is not defined and"
		echo "         KeyFileName will be /etc/grid-security/hostkey.pem"
		echo "         Use --with-keyfile-path=<INT> to define"
	    KEY_FILE_PATH="/etc/grid-security/hostkey.pem"
		echo "KeyFileName=$KEY_FILE_PATH" >> $MYCONFPATH
		echo "WARNING: \$KEY_FILE_PATH is not defined and" >> $LOGFILE
		echo "         KeyFileName will be /etc/grid-security/hostkey.pem" >> $LOGFILE
		echo "         Use --with-keyfile-path=<INT> to define" >> $LOGFILE
	fi
	echo "### ProxyFileName=PROXY_FILE_PATH" >> $MYCONFPATH

fi

echo ""
echo "" >> $LOGFILE
echo "NOTE: supportedProtocolList needs to be added in the conf/bestman2.rc"
echo "    : when different from the same hostname that BeStMan runs on"
echo "e.g. supportedProtocolList=gsiftp://myhost.domain.tld"
echo "e.g. supportedProtocolList=gsiftp://myhost.domain.tld;gsiftp://host2.domain.tld "
echo "NOTE: supportedProtocolList needs to be added in the conf/bestman2.rc"  >> $LOGFILE
echo "    : when different from the same hostname that BeStMan runs on" >> $LOGFILE
echo "e.g. supportedProtocolList=gsiftp://myhost.domain.tld"  >> $LOGFILE
echo "e.g. supportedProtocolList=gsiftp://myhost.domain.tld;gsiftp://host2.domain.tld "  >> $LOGFILE

echo "###########################################################" >> $MYCONFPATH
echo "# supportedProtocolList can be defined" >> $MYCONFPATH
echo "##      When different from the same hostname that BeStMan runs on" >> $MYCONFPATH
echo "##      Or, multiple transfer servers are supported" >> $MYCONFPATH
echo "## supportedProtocolList=gsiftp://host1.domain.tld;gsiftp://host2.domain.tld" >> $MYCONFPATH

if test "$TSERVERS" ; then
	echo "## supportedProtocolList=$TSERVERS"
	echo "## supportedProtocolList=$TSERVERS" >> $LOGFILE
	echo "supportedProtocolList=$TSERVERS" >> $MYCONFPATH
else
	echo "### supportedProtocolList=" >> $MYCONFPATH
	echo "WARNING: \$TSERVERS is not defined and supportedProtocolList will be the hostname that bestman server runs on"
	echo "         Use --with-transfer-servers=<STRING> to define"
	echo "WARNING: \$TSERVERS is not defined and supportedProtocolList will be the hostname that bestman server runs on" >> $LOGFILE
	echo "         Use --with-transfer-servers=<STRING> to define" >> $LOGFILE
fi

echo "############################################################ " >> $MYCONFPATH
echo "# NOTE: Each plugin entry must define the class name, jar file name, " >> $MYCONFPATH
echo "# and the procotol name the policy applies to. Key values are class, " >> $MYCONFPATH
echo "# jarFile and name, and they are separated by &. " >> $MYCONFPATH
echo "# Multiple plugin entries for different protocols can be defined, and " >> $MYCONFPATH
echo "# must be seperated by ;.  When two or more plugin entries are defined " >> $MYCONFPATH
echo "# for the same protocol, the last entry will be used" >> $MYCONFPATH
echo "# If key name= is missing, and there is only one plugin entry, then " >> $MYCONFPATH
echo "# the policy would be used on all protocols. " >> $MYCONFPATH
echo "# e.g., when two entries are defined for gsiftp and http respectively; " >> $MYCONFPATH
echo "# protocolSelectionPolicy=class=plugin.NotRoundRobin1&jarFile=p1.jar&name=gsiftp" >> $MYCONFPATH
echo "############################################################ " >> $MYCONFPATH
if test "$PROTOCOL_POLICY" ; then
    echo "## protocolSelectionPolicy=$PROTOCOL_POLICY"
    echo "## protocolSelectionPolicy=$PROTOCOL_POLICY" >> $LOGFILE
    echo "protocolSelectionPolicy=$PROTOCOL_POLICY" >> $MYCONFPATH
else
    echo "### protocolSelectionPolicy=PROTOCOL_POLICY" >> $MYCONFPATH
    echo "WARNING: \$PROTOCOL_POLICY is not defined "
    echo "         Use --with-protocol-selection-policy=<string> to define"
    echo "WARNING: \$PROTOCOL_POLICY is not defined " >> $LOGFILE
    echo "         Use --with-protocol-selection-policy=<string> to define" >> $LOGFILE
fi

if test "$PLUGIN_PATH" ; then
    echo "## pluginLib=$PLUGIN_PATH"
    echo "## pluginLib=$PLUGIN_PATH" >> $LOGFILE
    echo "pluginLib=$PLUGIN_PATH" >> $MYCONFPATH
else
    echo "### pluginLib=PLUGIN_PATH" >> $MYCONFPATH
    echo "WARNING: \$PLUGIN_PATH is not defined "
    echo "         Use --with-plugin-path=<INT> to define"
    echo "WARNING: \$PLUGIN_PATH is not defined " >> $LOGFILE
    echo "         Use --with-plugin-path=<INT> to define" >> $LOGFILE
fi

echo "###########################################################" >> $MYCONFPATH
if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then

    echo "### For Xrootd, xrootdTokenCompName=oss.cgroup may be needed" >> $MYCONFPATH

    if test "$TOKENSLIST" ; then
        echo "###########################################################" >> $MYCONFPATH
        echo "## staticTokenList is used only in GATEWAY MODE when necessary" >> $MYCONFPATH
        echo "## Specifies pre-allocated space tokens list with its size info" >> $MYCONFPATH
        echo "## FORMAT: token_name[KEY:VALUE][token_size_inGB] " >> $MYCONFPATH
        echo "##         KEY = desc, owner, retention, latency, path, usedBytesCommand " >> $MYCONFPATH
        echo "##         retention available values = CUSTODIAL, OUTPUT, REPLICA  " >> $MYCONFPATH
        echo "##         latency  available values = ONLINE, NEARLINE" >> $MYCONFPATH
        echo "##         usedBytesCommand = e.g. some custom script or \"du -s -b\" " >> $MYCONFPATH
        echo "##                      its output shall have the available bytes as the first value" >> $MYCONFPATH
        echo "##         totalBytesCommand = e.g. some custom script for total bytes " >> $MYCONFPATH
        echo "##                      its output shall have the priority over total_size_in_GB" >> $MYCONFPATH
        echo "##         multiple token names are separated by semi-colon " >> $MYCONFPATH
        echo "## e.g.mytoken[desc:my_tokendesc][12];mytoken2[desc:my_tokendesc2][34]" >> $MYCONFPATH
        echo "## e.g.USATLASDATA1[desc:USATLASDATA1][owner:atlas][retention:REPLICA][latency:ONLINE][path:/project/usatlas/data][usedBytesCommand:/usr/bin/du -s -b][totalBytesCommand:/usr/bin/du -s -b] " >> $MYCONFPATH
        echo "##" >> $MYCONFPATH
        echo "## staticTokenList=$TOKENSLIST"
        echo "## staticTokenList=$TOKENSLIST" >> $LOGFILE
        echo "staticTokenList=$TOKENSLIST" >> $MYCONFPATH
    else
        echo "## staticTokenList=FORMATTED_INPUT"
        echo "## staticTokenList=FORMATTED_INPUT" >> $LOGFILE
        echo "WARNING: \$TOKENSLIST is not defined "
        echo "         Use --with-tokens-list=<STRING> to define"
        echo "WARNING: \$TOKENSLIST is not defined " >> $LOGFILE
        echo "         Use --with-tokens-list=<STRING> to define" >> $LOGFILE
    fi

    echo "############################################################ " >> $MYCONFPATH
    echo "## pathForToken=true"
    echo "## pathForToken=true" >> $LOGFILE
    echo "pathForToken=true" >> $MYCONFPATH

    if test "$FS_CONCURRENCY" ; then
        echo "## fsConcurrency limits the number of filesystem-involved"
        echo "## operations processing at a time to the defined number."
        echo "## Affected operations are PUT, GET, LS, MKDIR, RMDIR and RM."
        echo "## If not specified, there is no limit."
        echo "## fsConcurrency=$FS_CONCURRENCY"
        echo "## fsConcurrency limits the number of filesystem-involved" >> $LOGFILE
        echo "## operations processing at a time to the defined number." >> $LOGFILE
        echo "## Affected operations are PUT, GET, LS, MKDIR, RMDIR and RM." >> $LOGFILE
        echo "## If not specified, there is no limit." >> $LOGFILE
        echo "## fsConcurrency=$FS_CONCURRENCY" >> $LOGFILE
        echo "# fsConcurrency limits the number of filesystem-involved" >> $MYCONFPATH
        echo "# operations processing at a time to the defined number." >> $MYCONFPATH
        echo "# Affected operations are PUT, GET, LS, MKDIR, RMDIR and RM." >> $MYCONFPATH
        echo "# If not specified, there is no limit." >> $MYCONFPATH
        echo "fsConcurrency=$FS_CONCURRENCY" >> $MYCONFPATH
    else
		FS_CONCURRENCY=$CONCURRENCY
        echo "## fsConcurrency limits the number of filesystem-involved"
        echo "## operations processing at a time to the defined number."
        echo "## Affected operations are PUT, GET, LS, MKDIR, RMDIR and RM."
        echo "## If not specified, there is no limit."
        echo "   Use --with-concurrent-fs=<INT> to define"
        echo "## fsConcurrency limits the number of filesystem-involved" >> $LOGFILE
        echo "## operations processing at a time to the defined number." >> $LOGFILE
        echo "## Affected operations are PUT, GET, LS, MKDIR, RMDIR and RM." >> $LOGFILE
        echo "## If not specified, there is no limit." >> $LOGFILE
        echo "   Use --with-concurrent-fs=<INT> to define" >> $LOGFILE
        echo "fsConcurrency=$FS_CONCURRENCY" >> $MYCONFPATH
    fi

    if test "$CHECKFILEFS" = "yes" ; then
    	echo "## checkSizeWithFS=true"
        echo "## checkSizeWithFS=true" >> $LOGFILE
        echo "checkSizeWithFS=true" >> $MYCONFPATH
    else
    	echo "## checkSizeWithFS=false"
        echo "## checkSizeWithFS=false" >> $LOGFILE
        echo "checkSizeWithFS=false" >> $MYCONFPATH
    fi

    if test "$CHECKFILEGSIFTP" = "yes" ; then
    	echo "## checkSizeWithGsiftp=true"
        echo "## checkSizeWithGsiftp=true" >> $LOGFILE
        echo "checkSizeWithGsiftp=true" >> $MYCONFPATH
    else
    	echo "## checkSizeWithGsiftp=false"
        echo "## checkSizeWithGsiftp=false" >> $LOGFILE
        echo "checkSizeWithGsiftp=false" >> $MYCONFPATH
    fi

else 
    echo "## For Xrootd, xrootdTokenCompName=oss.cgroup may be needed" >> $MYCONFPATH
    echo "###########################################################" >> $MYCONFPATH
    echo "## staticTokenList is used only in GATEWAY MODE when necessary" >> $MYCONFPATH
    echo "## Specifies pre-allocated space tokens list with its size info" >> $MYCONFPATH
    echo "## FORMAT: token_name[KEY:VALUE][token_size_inGB] " >> $MYCONFPATH
    echo "##         KEY = desc, owner, retention, latency, path, usedBytesCommand " >> $MYCONFPATH
    echo "##         retention available values = CUSTODIAL, OUTPUT, REPLICA  " >> $MYCONFPATH
    echo "##         latency  available values = ONLINE, NEARLINE" >> $MYCONFPATH
    echo "##         usedBytesCommand = e.g. some custom script or \"du -s -b\" " >> $MYCONFPATH
    echo "##                      its output shall have the available bytes as the first value" >> $MYCONFPATH
    echo "##         totalBytesCommand = e.g. some custom script for total bytes " >> $MYCONFPATH
    echo "##                      its output shall have the priority over total_size_in_GB" >> $MYCONFPATH
    echo "##         multiple token names are separated by semi-colon " >> $MYCONFPATH
    echo "## e.g.mytoken[desc:my_tokendesc][12];mytoken2[desc:my_tokendesc2][34]" >> $MYCONFPATH
    echo "## e.g.USATLASDATA1[desc:USATLASDATA1][owner:atlas][retention:REPLICA][latency:ONLINE][path:/project/usatlas/data][usedBytesCommand:/usr/bin/du -s -b][totalBytesCommand:/usr/bin/du -s -b] " >> $MYCONFPATH
    echo "##" >> $MYCONFPATH
    echo "## staticTokenList=FORMATTED_INPUT" >> $MYCONFPATH
    echo "## pathForToken=true" >> $MYCONFPATH
    echo "############################################################ " >> $MYCONFPATH
	FS_CONCURRENCY=$CONCURRENCY
    echo "#G# fsConcurrency limits the number of filesystem-involved" >> $MYCONFPATH
    echo "#G# operations processing at a time to the defined number." >> $MYCONFPATH
    echo "#G# Affected operations are PUT, GET, LS, MKDIR, RMDIR and RM." >> $MYCONFPATH
    echo "#G# If not specified, there is no limit." >> $MYCONFPATH
    echo "fsConcurrency=$FS_CONCURRENCY" >> $MYCONFPATH
    echo "#G# checkSizeWithFS=false" >> $MYCONFPATH
    echo "#G# checkSizeWithGsiftp=false" >> $MYCONFPATH
dnl ## Gatewy only
fi

echo "###########################################################" >> $LOGFILE
echo "###########################################################" >> $MYCONFPATH
echo "# Sudo to manage file system (mkdir, rmdir, rm, mv, cp, ls)" >> $MYCONFPATH
echo "# /etc/sudoers needs the following modifications" >> $MYCONFPATH
echo "#              when daemon account runs bestman server" >> $MYCONFPATH
echo "#              check proper paths for commands if needed" >> $MYCONFPATH
echo "#    Cmnd_Alias SRM_CMD = /bin/rm, /bin/mkdir, /bin/rmdir, /bin/mv, /bin/cp, /bin/ls" >> $MYCONFPATH
echo "#    Runas_Alias SRM_USR = ALL, !root" >> $MYCONFPATH
echo "#    daemon   ALL=(SRM_USR) NOPASSWD: SRM_CMD" >> $MYCONFPATH
echo "# " >> $MYCONFPATH

if test "$SUDOFSM" = "yes" ; then
    echo "## accessFileSysViaSudo=true"
    echo "## accessFileSysViaSudo=true" >> $LOGFILE
    echo "accessFileSysViaSudo=true" >> $MYCONFPATH
    echo "NOTE: \$SUDOFSM will be used as the file management"
    echo "         Use --enable-sudofsmng to use sudo"
    echo "         Use --disable-sudofsmng not to use sudo"
    if test "$SUDOLS" = "yes" ; then
        echo "###########################################################" >> $LOGFILE
        echo "# " >> $LOGFILE
        echo "## noSudoOnLs=false"
        echo "## noSudoOnLs=false" >> $LOGFILE
        echo "noSudoOnLs=false" >> $MYCONFPATH
        echo "NOTE: \$SUDOLS will be used as the file management"
        echo "         Use --enable-sudols to use sudo for ls"
        echo "         Use --disable-sudols not to use sudo for ls"
    else
        echo "## noSudoOnLs=true"
        echo "## noSudoOnLs=true" >> $LOGFILE
        echo "noSudoOnLs=true" >> $MYCONFPATH
        echo "NOTE: \$SUDOLS will not be used as the file management"
        echo "         Use --enable-sudols to use sudo for ls"
        echo "         Use --disable-sudols not to use sudo for ls"
    fi
else
    echo "## accessFileSysViaSudo=false"
    echo "## accessFileSysViaSudo=false" >> $LOGFILE
    echo "accessFileSysViaSudo=false" >> $MYCONFPATH
    echo "### noSudoOnLs=true" >> $MYCONFPATH
    echo "NOTE: \$SUDOFSM will not be used as the file management"
    echo "         Use --enable-sudofsmng to use sudo"
    echo "         Use --disable-sudofsmng not to use sudo"
    echo "###########################################################" >> $LOGFILE
    if test "$GSIFTPFSM" = "yes" ; then
        echo "# GridFTP to manage file system (mkdir, rmdir, rm, mv, cp, ls)" >> $LOGFILE
        echo "# GridFTP to manage file system (mkdir, rmdir, rm, mv, cp, ls)" >> $MYCONFPATH
        echo "## When both accessFileSysViaGsiftp and accessFileSysViaSudo are enabled" >> $MYCONFPATH
        echo "## gsiftp has priority over sudo access" >> $MYCONFPATH
        echo "## " >> $MYCONFPATH
        echo "###########################################################" >> $LOGFILE
        echo "# " >> $MYCONFPATH
        echo "## accessFileSysViaGsiftp=true"
        echo "## accessFileSysViaGsiftp=true" >> $LOGFILE
        echo "accessFileSysViaGsiftp=true" >> $MYCONFPATH
        echo "NOTE: \$GSIFTPFSM will be used as the file management"
        echo "         Use --enable-gsiftpfsmng to use gsiftp"
        echo "         Use --disable-gsiftpfsmng not to use gsiftp"
    else
        echo "## accessFileSysViaGsiftp=false"
        echo "## accessFileSysViaGsiftp=false" >> $LOGFILE
        echo "### accessFileSysViaGsiftp=false" >> $MYCONFPATH
        echo "NOTE: \$GSIFTPFSM will not be used as the file management"
        echo "         Use --enable-gsiftpfsmng to use gsiftp"
        echo "         Use --disable-gsiftpfsmng not to use gsiftp"
    fi
fi

echo "###########################################################" >> $MYCONFPATH
echo "### showChecksumWhenListingFile to return checksum in srmLs" >> $MYCONFPATH
echo "### defaultChecksumType supports adler32, md5, crc32" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
if test "$CHECKSUMLISTING" = "yes" ; then
    echo "## showChecksumWhenListingFile=true"
    echo "## showChecksumWhenListingFile=true" >> $LOGFILE
    echo "showChecksumWhenListingFile=true" >> $MYCONFPATH

    echo "## defaultChecksumType=$CHECKSUMTYPE"
    echo "## defaultChecksumType=$CHECKSUMTYPE" >> $LOGFILE
    echo "defaultChecksumType=$CHECKSUMTYPE" >> $MYCONFPATH

    echo "NOTE: \$CHECKSUMLISTING will be used as the file management"
    echo "         Use --enable-checksum-listing to use checksum in listing"
    echo "         Use --disable-checksum-listing not to use checksum in listing"
else
    echo "### showChecksumWhenListingFile=false" >> $MYCONFPATH
    echo "### defaultChecksumType=adler32" >> $MYCONFPATH
fi

echo "###########################################################" >> $MYCONFPATH
echo "### hexChecksumCommand to plugin checksum calculation callout" >> $MYCONFPATH
echo "### defaultChecksumType should be adler32 in hex" >> $MYCONFPATH
echo "### only valid when showChecksumWhenListingFile=true" >> $MYCONFPATH
echo "### e.g. hexChecksumCommand=/usr/local/mychecksum -adler32" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
if test "$CHECKSUM_CALLOUT" ; then
    echo "## hexChecksumCommand=$CHECKSUM_CALLOUT"
    echo "## hexChecksumCommand=$CHECKSUM_CALLOUT" >> $LOGFILE
    echo "hexChecksumCommand=$CHECKSUM_CALLOUT" >> $MYCONFPATH
else
    echo "### hexChecksumCommand=CHECKSUM_CALLOUT" >> $MYCONFPATH
fi

echo "###########################################################" >> $MYCONFPATH
echo "# MaxMappedIDCached limits how many mapped ids can be cached at a given time" >> $MYCONFPATH
echo "##   LifetimeSecondsMappedIDCached limits how long mapped ids are cached" >> $MYCONFPATH
echo "##   LifetimeSecondsMappedIDCached=0 : permanently cache" >> $MYCONFPATH
echo "##   LifetimeSecondsMappedIDCached<0 : never cache" >> $MYCONFPATH
echo "##   LifetimeSecondsMappedIDCached>0 : cache for the duration" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
if test "$CACHEDIDLIFETIME" ; then
    echo "## MaxMappedIDCached=1000"
    echo "## MaxMappedIDCached=1000" >> $LOGFILE
    echo "MaxMappedIDCached=1000" >> $MYCONFPATH

    echo "## LifetimeSecondsMappedIDCached=$CACHEDIDLIFETIME"
    echo "## LifetimeSecondsMappedIDCached=$CACHEDIDLIFETIME" >> $LOGFILE
    echo "LifetimeSecondsMappedIDCached=$CACHEDIDLIFETIME" >> $MYCONFPATH
else
    echo "WARNING: \$CACHEDIDLIFETIME is not defined and"
    echo "         LifetimeSecondsMappedIDCached will be 1800"
    echo "         Use --with-cached-id-lifetime=<INT> to define"
    CACHEDIDLIFETIME="1800"
    echo "MaxMappedIDCached=1000" >> $MYCONFPATH
    echo "LifetimeSecondsMappedIDCached=$CACHEDIDLIFETIME" >> $MYCONFPATH
    echo "WARNING: \$CACHEDIDLIFETIME is not defined and" >> $LOGFILE
    echo "         LifetimeSecondsMappedIDCached will be 1800" >> $LOGFILE
    echo "         Use --with-cached-id-lifetime=<INT> to define" >> $LOGFILE
fi

echo "###########################################################" >> $MYCONFPATH
echo "## userSpaceKeywords is to define keys to shorten the path" >> $MYCONFPATH
echo "## format: userSpaceKeywords=(key1=/path1)(key2=/path2)" >> $MYCONFPATH
echo "## e.g.: userSpaceKeywords=(tic=/user/tic)(tac=/proj/tac)" >> $MYCONFPATH
echo "##bestman will disable space management when this is defined" >> $MYCONFPATH
echo "## and SFN=/tic/fpath1 in SURL will be translated to SFN=/user/tic/fpath1" >> $MYCONFPATH
echo "## difference from staticTokens: space descriptions are not supported." >> $MYCONFPATH
if test "$USER_SPACE_KEY" ; then
    echo "## userSpaceKeywords=$USER_SPACE_KEY"
    echo "## userSpaceKeywords=$USER_SPACE_KEY" >> $LOGFILE
    echo "userSpaceKeywords=$USER_SPACE_KEY" >> $MYCONFPATH
else
    echo "### userSpaceKeywords=" >> $MYCONFPATH
fi

echo "###########################################################" >> $MYCONFPATH
echo "## e.g. SUMGserviceURL=https://gums.lbl.gov:8443/gums/services/GUMSAuthorizationServicePort" >> $MYCONFPATH
echo "## e.g. GUMSCurrHostDN=/DC=org/DC=doegrids/OU=Services/CN=gumsclient.lbl.gov" >> $MYCONFPATH
echo "## When DN is not provided, it could be extracted from the cert/key when running server from " >> $MYCONFPATH
echo "## GUMS-XACML is the only supported interface." >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH

if test "$GUMSENABLED" = "yes" ; then
    echo "GUMS interface enabled"
    echo "GUMS interface enabled" >>  $LOGFILE
    echo "Grid-mapfile will not be used"
    echo "Grid-mapfile will not be used" >>  $LOGFILE
	echo "## GUMSProtocol=XACML"
	echo "## GUMSProtocol=XACML" >> $LOGFILE
	echo "GUMSProtocol=XACML" >> $MYCONFPATH
	if test "$GUMSURL" ; then
		echo "## GUMSserviceURL=$GUMSURL"
		echo "## GUMSserviceURL=$GUMSURL" >> $LOGFILE
		echo "GUMSserviceURL=$GUMSURL" >> $MYCONFPATH
	else
		echo "##GUMSserviceURL=" >> $MYCONFPATH
		echo "ERROR: GUMS interface is enabled"
        echo "ERROR: but GUMS service url is not provided"
		echo "ERROR: GUMS interface is enabled" >> $LOGFILE
        echo "ERROR: but GUMS service url is not provided" >> $LOGFILE
		echo "ERROR: Re-configure with GUMS service url" 
        echo "ERROR: Re-configure with GUMS service url" >> $LOGFILE
        exit 21;
    fi
	if test "$GUMSDN" ; then
		echo "## GUMSCurrHostDN=$GUMSDN"
		echo "## GUMSCurrHostDN=$GUMSDN" >> $LOGFILE
		echo "GUMSCurrHostDN=$GUMSDN" >> $MYCONFPATH
	else
		echo "# GUMSCurrHostDN=NOT_PROVIDED" >> $MYCONFPATH
		if test "$GUMSCERT_FILE_PATH" -a "$GUMSKEY_FILE_PATH" ; then
			echo "## NOTE: $GUMSCERT_FILE_PATH and $GUMSKEY_FILE_PATH"
			echo "## NOTE: $GUMSCERT_FILE_PATH and $GUMSKEY_FILE_PATH" >> $LOGFILE
			echo "##     $GUMSCERT_FILE_PATH" >> $MYCONFPATH
			echo "##     $GUMSKEY_FILE_PATH" >> $MYCONFPATH
		else 
			echo "## NOTE: $CERT_FILE_PATH and $KEY_FILE_PATH"
			echo "## NOTE: $CERT_FILE_PATH and $KEY_FILE_PATH" >> $LOGFILE
			echo "##     $CERT_FILE_PATH" >> $MYCONFPATH
			echo "##     $KEY_FILE_PATH" >> $MYCONFPATH
		fi
		echo "WARNING: GUMS interface is enabled"
        echo "WARNING: valid client cert DN  is not provided"
		echo "WARNING: GUMS interface is enabled" >> $LOGFILE
        echo "WARNING: valid client cert DN is not provided" >> $LOGFILE
		echo "WARNING: Re-configure with client DN for GUMS interface to provide" 
        echo "WARNING: Re-configure with client DN for GUMS interface to provide" >> $LOGFILE
		echo "WARNING: Or DN will be extracted from the provided cert/key" >> $LOGFILE
        echo "WARNING: Or DN will be extracted from the provided cert/key" >> $LOGFILE
    fi
	if test "$GRIDMAP_PATH" ; then
		echo "## GridMapFileName=$GRIDMAP_PATH"
		echo "## GridMapFileName=$GRIDMAP_PATH" >> $LOGFILE
		echo "GridMapFileName=$GRIDMAP_PATH" >> $MYCONFPATH
	else
		echo "##GridMapFileName=" >> $MYCONFPATH
	fi
else
    echo "Grid-mapfile will be used"
    echo "Grid-mapfile will be used" >>  $LOGFILE

	echo "### GUMSProtocol=XACML" >> $MYCONFPATH
    echo "### GUMSserviceURL=" >> $MYCONFPATH
    echo "### GUMSCurrHostDN=" >> $MYCONFPATH
    echo "### Grid-mapfile will be used" >>  $MYCONFPATH

	if test "$GRIDMAP_PATH" ; then
		echo "## GridMapFileName=$GRIDMAP_PATH"
		echo "## GridMapFileName=$GRIDMAP_PATH" >> $LOGFILE
		echo "GridMapFileName=$GRIDMAP_PATH" >> $MYCONFPATH
	else
		echo "WARNING: \$GRIDMAP_PATH is not defined and"
		echo "         GridMapFileName will be /etc/grid-security/grid-mapfile"
		echo "         Use --with-gridmap-path=<INT> to define"
	    GRIDMAP_PATH="/etc/grid-security/grid-mapfile"
		echo "GridMapFileName=$GRIDMAP_PATH" >> $MYCONFPATH
		echo "WARNING: \$GRIDMAP_PATH is not defined and" >> $LOGFILE
		echo "         GridMapFileName will be /etc/grid-security/grid-mapfile" >> $LOGFILE
		echo "         Use --with-gridmap-path=<INT> to define" >> $LOGFILE
	fi
fi

if test "$VOMS_VALIDATION" = "yes" ; then
    echo "VOMS validation enabled"
    echo "VOMS validation enabled" >> $LOGFILE
    echo "validateVomsProxy=true" >> $MYCONFPATH
else
    echo "### validateVomsProxy=false" >> $MYCONFPATH
fi

echo "###########################################################" >> $MYCONFPATH
echo "# Do Not edit below unless you really really understand the entries" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH

if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
    echo "# FULL mode entries" >> $MYCONFPATH
    echo "###########################################################" >> $MYCONFPATH

    if test "$MAX_USERS" ; then
        echo "## MaxNumberOfUsers=$MAX_USERS"
        echo "## MaxNumberOfUsers=$MAX_USERS" >> $LOGFILE
        echo "MaxNumberOfUsers=$MAX_USERS" >> $MYCONFPATH
    else
        echo "WARNING: \$MAX_USERS is not defined and MaxNumberOfUsers will be 100"
        echo "         Use --with-max-users=<INT> to define"
        MAX_USERS="100"
        echo "MaxNumberOfUsers=$MAX_USERS" >> $MYCONFPATH
        echo "WARNING: \$MAX_USERS is not defined and MaxNumberOfUsers will be 100" >> $LOGFILE
        echo "         Use --with-max-users=<INT> to define" >> $LOGFILE
    fi

    if test "$MAX_FILES" ; then
        echo "## MaxNumberOfFileRequests=$MAX_FILES"
        echo "## MaxNumberOfFileRequests=$MAX_FILES" >> $LOGFILE
        echo "MaxNumberOfFileRequests=$MAX_FILES" >> $MYCONFPATH
    else
        echo "WARNING: \$MAX_FILES is not defined and MaxNumberOfFileRequests will be 10000"
        echo "         Use --with-max-filerequests=<INT> to define"
        MAX_FILES="1000000"
        echo "MaxNumberOfFileRequests=$MAX_FILES" >> $MYCONFPATH
        echo "WARNING: \$MAX_FILES is not defined and MaxNumberOfFileRequests will be 10000" >> $LOGFILE
        echo "         Use --with-max-filerequests=<INT> to define" >> $LOGFILE
    fi

    if test "$CONCURRENCY" ; then
        echo "## Concurrency=$CONCURRENCY"
        echo "## Concurrency=$CONCURRENCY" >> $LOGFILE
        echo "Concurrency=$CONCURRENCY" >> $MYCONFPATH
    else
        echo "WARNING: \$CONCURRENCY is not defined and Concurrency will be 40"
        echo "         Use --with-concurrency=<INT> to define"
        CONCURRENCY="40"
        echo "Concurrency=$CONCURRENCY" >> $MYCONFPATH
        echo "WARNING: \$CONCURRENCY is not defined and Concurrency will be 40" >> $LOGFILE
        echo "         Use --with-concurrency=<INT> to define" >> $LOGFILE
    fi

    if test "$CONCURRENT_FILE_TRANSFER" ; then
        echo "## MaxConcurrentFileTransfer=$CONCURRENT_FILE_TRANSFER"
        echo "## MaxConcurrentFileTransfer=$CONCURRENT_FILE_TRANSFER" >> $LOGFILE
        echo "MaxConcurrentFileTransfer=$CONCURRENT_FILE_TRANSFER" >> $MYCONFPATH
    else
        echo "WARNING: \$CONCURRENT_FILE_TRANSFER is not defined and"
        echo "         MaxConcurrentFileTransfer will be 10"
        echo "         Use --with-concurrent-filetransfer=<INT> to define"
        CONCURRENT_FILE_TRANSFER="10"
        echo "MaxConcurrentFileTransfer=$CONCURRENT_FILE_TRANSFER" >> $MYCONFPATH
        echo "WARNING: \$CONCURRENT_FILE_TRANSFER is not defined and" >> $LOGFILE
        echo "         MaxConcurrentFileTransfer will be 10" >> $LOGFILE
        echo "         Use --with-concurrent-filetransfer=<INT> to define" >> $LOGFILE
    fi

    if test "$GRIDFTP_STREAMS" ; then
        echo "## GridFTPNumStreams=$GRIDFTP_STREAMS"
        echo "## GridFTPNumStreams=$GRIDFTP_STREAMS" >> $LOGFILE
        echo "GridFTPNumStreams=$GRIDFTP_STREAMS" >> $MYCONFPATH
    else
        echo "WARNING: \$GRIDFTP_STREAMS is not defined and"
        echo "         GridFTPNumStreams will be 2"
        echo "         Use --with-gridftp-parallel-streams=<INT> to define"
        GRIDFTP_STREAMS="2"
        echo "GridFTPNumStreams=$GRIDFTP_STREAMS" >> $MYCONFPATH
        echo "WARNING: \$GRIDFTP_STREAMS is not defined and" >> $LOGFILE
        echo "         GridFTPNumStreams will be 2" >> $LOGFILE
        echo "         Use --with-gridftp-parallel-streams=<INT> to define" >> $LOGFILE
    fi

    if test "$GRIDFTP_BUFFERSIZE" ; then
        echo "## GridftpBufferSizeBytes=$GRIDFTP_BUFFERSIZE"
        echo "## GridFTPBufferSizeBytes=$GRIDFTP_BUFFERSIZE" >> $LOGFILE
        echo "GridFTPBufferSizeBytes=$GRIDFTP_BUFFERSIZE" >> $MYCONFPATH
    else
        echo "WARNING: \$GRIDFTP_BUFFERSIZE is not defined and"
        echo "         GridFTPBufferSizeBytes will be 1048576"
        echo "         Use --with-gridftp-buffersize=<INT> to define"
        GRIDFTP_BUFFERSIZE="2"
        echo "GridFTPBufferSizeBytes=$GRIDFTP_BUFFERSIZE" >> $MYCONFPATH
        echo "WARNING: \$GRIDFTP_BUFFERSIZE is not defined and" >> $LOGFILE
        echo "         GridFTPBufferSizeBytes will be 1048576" >> $LOGFILE
        echo "         Use --with-gridftp-buffersize=<INT> to define" >> $LOGFILE
    fi

    if test "$DEFAULT_FILESIZE" ; then
        echo "## DefaultFileSizeMB=$DEFAULT_FILESIZE"
        echo "## DefaultFileSizeMB=$DEFAULT_FILESIZE" >> $LOGFILE
        echo "DefaultFileSizeMB=$DEFAULT_FILESIZE" >> $MYCONFPATH
    else
        echo "WARNING: \$DEFAULT_FILESIZE is not defined and"
        echo "         DefaultFileSizeMB will be 500"
        echo "         Use --with-default-filesize=<INT> to define"
        DEFAULT_FILESIZE="500"
        echo "DefaultFileSizeMB=$DEFAULT_FILESIZE" >> $MYCONFPATH
        echo "WARNING: \$DEFAULT_FILESIZE is not defined and" >> $LOGFILE
        echo "         DefaultFileSizeMB will be 500" >> $LOGFILE
        echo "         Use --with-default-filesize=<INT> to define" >> $LOGFILE
    fi

    if test "$FILELIFETIME" ; then
        echo "## DefaultVolatileFileLifeTimeInSeconds=$FILELIFETIME"
        echo "## DefaultVolatileFileLifeTimeInSeconds=$FILELIFETIME" >> $LOGFILE
        echo "DefaultVolatileFileLifeTimeInSeconds=$FILELIFETIME" >> $MYCONFPATH
    else
        echo "WARNING: \$FILELIFETIME is not defined and"
        echo "         DefaultVolatileFileLifeTimeInSeconds will be 1800"
        echo "         Use --with-volatile-file-lifetime=<INT> to define"
        FILELIFETIME="1800"
        echo "DefaultVolatileFileLifeTimeInSeconds=$FILELIFETIME" >> $MYCONFPATH
        echo "WARNING: \$FILELIFETIME is not defined and" >> $LOGFILE
        echo "         DefaultVolatileFileLifeTimeInSeconds will be 1800" >> $LOGFILE
        echo "         Use --with-volatile-file-lifetime=<INT> to define" >> $LOGFILE
    fi

    if test "$SPACEFILELIFETIME" ; then
        echo "## PublicTokenMaxFileLifetimeInSeconds=$SPACEFILELIFETIME"
        echo "## PublicTokenMaxFileLifetimeInSeconds=$SPACEFILELIFETIME" >> $LOGFILE
        echo "PublicTokenMaxFileLifetimeInSeconds=$SPACEFILELIFETIME" >> $MYCONFPATH
    else
        echo "WARNING: \$SPACEFILELIFETIME is not defined and"
        echo "         PublicTokenMaxFileLifetimeInSeconds will be 1800"
        echo "         Use --with-space-file-lifetime=<INT> to define"
        SPACEFILELIFETIME="1800"
        echo "PublicTokenMaxFileLifetimeInSeconds=$SPACEFILELIFETIME" >> $MYCONFPATH
        echo "WARNING: \$SPACEFILELIFETIME is not defined and" >> $LOGFILE
        echo "         PublicTokenMaxFileLifetimeInSeconds will be 1800" >> $LOGFILE
        echo "         Use --with-space-file-lifetime=<INT> to define" >> $LOGFILE
    fi

    if test "$INACTIVE_TIMEOUT" ; then
        echo "## InactiveTxfTimeOutInSeconds=$INACTIVE_TIMEOUT"
        echo "## InactiveTxfTimeOutInSeconds=$INACTIVE_TIMEOUT" >> $LOGFILE
        echo "InactiveTxfTimeOutInSeconds=$INACTIVE_TIMEOUT" >> $MYCONFPATH
    else
        echo "WARNING: \$INACTIVE_TIMEOUT is not defined and"
        echo "         InactiveTxfTimeOutInSeconds will be 300"
        echo "         Use --with-inactive-transfer-timeout=<INT> to define"
        INACTIVE_TIMEOUT="300"
        echo "InactiveTxfTimeOutInSeconds=$INACTIVE_TIMEOUT" >> $MYCONFPATH
        echo "WARNING: \$INACTIVE_TIMEOUT is not defined and" >> $LOGFILE
        echo "         InactiveTxfTimeOutInSeconds will be 300" >> $LOGFILE
        echo "         Use --with-inactive-transfer-timeout=<INT> to define" >> $LOGFILE
    fi

    if test "$PUBLIC_SPACE_PORTION" ; then
        echo "## PublicSpaceProportion=$PUBLIC_SPACE_PORTION"
        echo "## PublicSpaceProportion=$PUBLIC_SPACE_PORTION" >> $LOGFILE
        echo "PublicSpaceProportion=$PUBLIC_SPACE_PORTION" >> $MYCONFPATH
        if test "$PUBLIC_SPACE" ; then
            echo "WARNING: PublicSpaceInMB=$PUBLIC_SPACE will be ignored"
            echo "WARNING: PublicSpaceInMB=$PUBLIC_SPACE will be ignored" >> $LOGFILE
        fi
    else
        echo "WARNING: \$PUBLIC_SPACE_PORTION is not defined and"
        echo "         PublicSpaceProportion will be 80"
        echo "         Use --with-public-space-proportion=<INT> to define"
        PUBLIC_SPACE_PORTION="80"
        echo "PublicSpaceProportion=$PUBLIC_SPACE_PORTION" >> $MYCONFPATH
        echo "WARNING: \$PUBLIC_SPACE_PORTION is not defined and" >> $LOGFILE
        echo "         PublicSpaceProportion will be 80" >> $LOGFILE
        echo "         Use --with-public-space-proportion=<INT> to define" >> $LOGFILE

        if test "$PUBLIC_SPACE" ; then
            echo "## PublicSpaceInMB=$PUBLIC_SPACE"
            echo "## PublicSpaceInMB=$PUBLIC_SPACE" >> $LOGFILE
            echo "PublicSpaceInMB=$PUBLIC_SPACE" >> $MYCONFPATH
        else
            echo "WARNING: \$PUBLIC_SPACE is not defined and"
            echo "         PublicSpaceProportion will be used as default"
            echo "         Use --with-public-space-size=<INT> to define"
            echo "WARNING: \$PUBLIC_SPACE is not defined and" >> $LOGFILE
            echo "         PublicSpaceProportion will be used as default" >> $LOGFILE
            echo "         Use --with-public-space-size=<INT> to define" >> $LOGFILE
        fi
    fi

    if test "$RESERVED_SIZE" ; then
        echo "## DefaultMBPerToken=$RESERVED_SIZE"
        echo "## DefaultMBPerToken=$RESERVED_SIZE" >> $LOGFILE
        echo "DefaultMBPerToken=$RESERVED_SIZE" >> $MYCONFPATH
    else
        echo "WARNING: \$RESERVED_SIZE is not defined and"
        echo "         DefaultMBPerToken will be 1000"
        echo "         Use --with-default-space-size=<INT> to define"
        RESERVED_SIZE="1000"
        echo "DefaultMBPerToken=$RESERVED_SIZE" >> $MYCONFPATH
        echo "WARNING: \$RESERVED_SIZE is not defined and" >> $LOGFILE
        echo "         DefaultMBPerToken will be 1000" >> $LOGFILE
        echo "         Use --with-default-space-size=<INT> to define" >> $LOGFILE
    fi

    echo "###########################################################" >> $MYCONFPATH
    echo "# Do Not edit below unless you really really understand the entries" >> $MYCONFPATH
    echo "###########################################################" >> $MYCONFPATH

    if test "$BERKELEYDB" = "yes" ; then
        echo "## useBerkeleyDB=true"
        echo "## useBerkeleyDB=true" >> $LOGFILE
        echo "useBerkeleyDB=true" >> $MYCONFPATH
        echo "NOTE: \$BERKELEYDB will be used as the internal management"
        echo "         Use --enable-berkeleydb to use berkeley db"
        echo "         Use --disable-berkeleydb not to use berkeley db"
    else
        if test "$BERKELEYDB" = "no" ; then
            echo "## useBerkeleyDB=false"
            echo "## useBerkeleyDB=false" >> $LOGFILE
            echo "useBerkeleyDB=false" >> $MYCONFPATH
            echo "NOTE: \$BERKELEYDB will not be used, and a text file will be used"
            echo "         Use --enable-berkeleydb to use berkeley db"
            echo "         Use --disable-berkeleydb not to use berkeley db"
        else
            echo "WARNING: \$BERKELEYDB is not defined and useBerkeleyDB will be true"
            echo "         Use --enable-berkeleydb to use berkeley db"
            echo "         Use --disable-berkeleydb not to use berkeley db"
            BERKELEYDB="yes"
            echo "useBerkeleyDB=true" >> $MYCONFPATH
            echo "WARNING: \$BERKELEYDB is not defined and useBerkeleyDB will be true" >> $LOGFILE
            echo "         Use --enable-berkeleydb to to use berkeley db" >> $LOGFILE
            echo "         Use --disable-berkeleydb not to use berkeley db" >> $LOGFILE
        fi
    fi

    echo "## noCacheLog=false"
    echo "## noCacheLog=false" >> $LOGFILE
    echo "noCacheLog=false" >> $MYCONFPATH

    if test "$CACHELOG_PATH" ; then
        echo "## CacheLogLocation=$CACHELOG_PATH"
        echo "## CacheLogLocation=$CACHELOG_PATH" >> $LOGFILE
        echo "CacheLogLocation=$CACHELOG_PATH" >> $MYCONFPATH
    else
        echo "WARNING: \$CACHELOG_PATH is not defined and"
        echo "WARNING: \$CACHELOG_PATH is not defined and" >> $LOGFILE

        if test "$BERKELEYDB" = "yes" ; then
            CACHELOG_PATH="/var/log"
            echo "CacheLogLocation=$CACHELOG_PATH" >> $MYCONFPATH
            echo "     CacheLogLocation will be written in /var/log"
            echo "     CacheLogLocation will be written in /var/log" >> $LOGFILE
        else
            if test "$BERKELEYDB" = "no" ; then
                CACHELOG_PATH="/var/log/cache.bestman.log"
                echo "CacheLogLocation=$CACHELOG_PATH" >> $MYCONFPATH
                echo "     CacheLogLocation will be written in /var/log/cache.bestman.log"
                echo "     CacheLogLocation will be written in /var/log/cache.bestman.log" >> $LOGFILE
            else
                CACHELOG_PATH="/var/log"
                echo "CacheLogLocation=$CACHELOG_PATH" >> $MYCONFPATH
                echo "     CacheLogLocation will be written in /var/log"
                echo "     CacheLogLocation will be written in /var/log" >> $LOGFILE
            fi
        fi
    fi

    echo "## pathForToken=false"
    echo "## pathForToken=false" >> $LOGFILE
    echo "pathForToken=false" >> $MYCONFPATH

    echo "## disableSpaceMgt=false"
    echo "## disableSpaceMgt=false" >> $LOGFILE
    echo "disableSpaceMgt=false" >> $MYCONFPATH

    echo "## srmcacheKeywordOn=true"
    echo "## srmcacheKeywordOn=true" >> $LOGFILE
    echo "srmcacheKeywordOn=true" >> $MYCONFPATH
    echo "NOTE: \$srmcache as keyword will be used as the internal cache management"
    echo "         Use --enable-srmcache-keyword to use srmcache as keyword"
    echo "         Use --disable-srmcache-keyword not to use srmcache as keyword"

    echo "## uploadQueueParameter=$CONCURRENCY:$CONCURRENT_FILE_TRANSFER"
    echo "## uploadQueueParameter=$CONCURRENCY:$CONCURRENT_FILE_TRANSFER" >> $LOGFILE
    echo "uploadQueueParameter=$CONCURRENCY:$CONCURRENT_FILE_TRANSFER" >> $MYCONFPATH
    echo "NOTE: uploadQueueParameter will be used as the transfer queue management"
    echo "         Use --enable-twoqueues to use uploadQueueParameter"
    echo "         Use --disable-twoqueues not to use uploadQueueParameter"

dnl ## Full mode
fi

if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then
    echo "# GATEWAY mode entries" >> $MYCONFPATH
    echo "###########################################################" >> $MYCONFPATH

    echo "## disableSpaceMgt=true"
    echo "## disableSpaceMgt=true" >> $LOGFILE
    echo "disableSpaceMgt=true" >> $MYCONFPATH

    echo "## useBerkeleyDB=false"
    echo "## useBerkeleyDB=false" >> $LOGFILE
    echo "useBerkeleyDB=false" >> $MYCONFPATH

    echo "## noCacheLog=true"
    echo "## noCacheLog=true" >> $LOGFILE
    echo "noCacheLog=true" >> $MYCONFPATH

    echo "Concurrency=40" >> $MYCONFPATH
    echo "#F# MaxNumberOfUsers=100" >> $MYCONFPATH
    echo "#F# MaxNumberOfFileRequests=1000000" >> $MYCONFPATH
    echo "#F# MaxConcurrentFileTransfer=10" >> $MYCONFPATH
    echo "#F# GridFTPNumStreams=2" >> $MYCONFPATH
    echo "#F# GridFTPBufferSizeBytes=2" >> $MYCONFPATH
    echo "#F# DefaultFileSizeMB=500" >> $MYCONFPATH
    echo "#F# DefaultVolatileFileLifeTimeInSeconds=1800" >> $MYCONFPATH
    echo "#F# PublicTokenMaxFileLifetimeInSeconds=1800" >> $MYCONFPATH
    echo "#F# InactiveTxfTimeOutInSeconds=300" >> $MYCONFPATH
    echo "#F# PublicSpaceProportion=80" >> $MYCONFPATH
    echo "#F# PublicSpaceInMB=" >> $MYCONFPATH
    echo "#F# DefaultMBPerToken=1000" >> $MYCONFPATH
    echo "#F# CacheLogLocation=/var/log" >> $MYCONFPATH
    echo "#F# CacheLogLocation=/var/log/cache.bestman.log" >> $MYCONFPATH
    echo "#F# pathForToken=false" >> $MYCONFPATH
    echo "#F# srmcacheKeywordOn=false" >> $MYCONFPATH
    echo "#F# uploadQueueParameter=40:10" >> $MYCONFPATH
    echo "#F# NOTE: uploadQueueParameter will be used as the transfer queue management" >> $MYCONFPATH
dnl ## gateway mode
fi

echo "###########################################################" >> $MYCONFPATH

echo "## FactoryID=$SRM_NAME"
echo "## FactoryID=$SRM_NAME" >> $LOGFILE
echo "FactoryID=$SRM_NAME" >> $MYCONFPATH

if test "$EVENTLOG" = "yes" ; then
    echo "## noEventLog=false"
    echo "## noEventLog=false" >> $LOGFILE
    echo "noEventLog=false" >> $MYCONFPATH
else 
    echo "## Modify noEventLog to false for NON-GATEWAY MODE" >> $MYCONFPATH
    echo "## noEventLog=true"
    echo "## noEventLog=true" >> $LOGFILE
    echo "noEventLog=true" >> $MYCONFPATH
fi

echo "###########################################################" >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
echo "# MSS related when supported " >> $MYCONFPATH
echo "###########################################################" >> $MYCONFPATH
if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
    if test "$MSSENABLE" = "yes" ; then
        if test "$MAX_MSS_CONNECTION" ; then
            echo "## MaxMSSConnections=$MAX_MSS_CONNECTION"
            echo "## MaxMSSConnections=$MAX_MSS_CONNECTION" >> $LOGFILE
            echo "MaxMSSConnections=$MAX_MSS_CONNECTION" >> $MYCONFPATH
        else
            echo "WARNING: \$MAX_MSS_CONNECTION is not defined and"
            echo "         MaxMSSConnections will be 5"
            echo "         Use --with-max-mss-connection=<INT> to define"
            MAX_MSS_CONNECTION="5"
            echo "MaxMSSConnections=$MAX_MSS_CONNECTION" >> $MYCONFPATH
            echo "WARNING: \$MAX_MSS_CONNECTION is not defined and" >> $LOGFILE
            echo "         MaxMSSConnections will be 5" >> $LOGFILE
            echo "         Use --with-max-mss-connection=<INT> to define" >> $LOGFILE
        fi

        if test "$MSS_TIMEOUT" ; then
            echo "## mssTimeOutSeconds=$MSS_TIMEOUT"
            echo "## mssTimeOutSeconds=$MSS_TIMEOUT" >> $LOGFILE
            echo "mssTimeOutSeconds=$MSS_TIMEOUT" >> $MYCONFPATH
        else
            echo "WARNING: \$MSS_TIMEOUT is not defined and"
            echo "         mssTimeOutSeconds will be 600"
            echo "         Use --with-mss-timeout=<INT> to define"
            MSS_TIMEOUT="600"
            echo "mssTimeOutSeconds=$MSS_TIMEOUT" >> $MYCONFPATH
            echo "WARNING: \$MSS_TIMEOUT is not defined and" >> $LOGFILE
            echo "         mssTimeOutSeconds will be 600" >> $LOGFILE
            echo "         Use --with-mss-timeout=<INT> to define" >> $LOGFILE
        fi
    fi

else
    echo "#F# MaxMSSConnections=15" >> $MYCONFPATH
    echo "#F# mssTimeOutSeconds=600" >> $MYCONFPATH
dnl ## full mode
fi


dnl "$CLIENTONLY" = "no" -a "$TESTERONLY" = "no"
fi
dnl ###########################################################
dnl ###########################################################
dnl ###########################################################

if test "$CLIENTONLY" = "yes" ; then
	chmod 755 $SRM_HOME/bin/srm-* 
	if test "$GUC_GLOBUS_PATH" ; then
		chmod 755 $SRM_HOME/bin/g-urlcopy.sh
	fi
else
	if test "$TESTERONLY" = "yes" ; then
		chmod 755 $SRM_HOME/bin/srm-tester 
		if test "$GUC_GLOBUS_PATH" ; then
			chmod 755 $SRM_HOME/bin/g-urlcopy.sh
		fi
	else
		if test "$SERVERONLY" = "yes" ; then
			chmod 755 $SRM_HOME/sbin/bestman.server \
			$SRM_HOME/sbin/SXXbestman \
			$SRM_HOME/sbin/SXXbestman.personal
		else
			chmod 755 $SRM_HOME/bin/srm-* \
			$SRM_HOME/bin/bestman-diag \
			$SRM_HOME/sbin/bestman.server \
			$SRM_HOME/sbin/SXXbestman \
			$SRM_HOME/sbin/SXXbestman.personal
			if test "$GUC_GLOBUS_PATH" ; then
		        chmod 755 $SRM_HOME/bin/g-urlcopy.sh 
			fi
		fi
	fi
fi

echo "" >> $LOGFILE
echo ""

if test "$CLIENTONLY" = "no" -a "$TESTERONLY" = "no"; then

if test "$GATEWAYMODE" = "yes" -a "$FULLMODE" = "no" ; then
    echo "*** BeStMan Gateway mode configuration complete ***" >> $LOGFILE
    echo "BeStMan Gateway mode configuration complete"
else
    if test "$GATEWAYMODE" = "no" -a "$FULLMODE" = "yes" ; then
        echo "*** BeStMan Full mode configuration complete ***" >> $LOGFILE
        echo "BeStMan Full mode configuration complete"
    fi
fi

else
    echo "*** BeStMan cilent mode configuration complete ***" >> $LOGFILE
    echo "BeStMan cilent  mode configuration complete"

fi

echo ""
