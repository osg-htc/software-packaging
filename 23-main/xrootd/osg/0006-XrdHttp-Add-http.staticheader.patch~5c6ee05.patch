From 3ba0e5be60841990a54c195a52ccbccc4762afde Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Wed, 15 Jan 2025 08:17:10 -0600
Subject: [PATCH 6/6] [XrdHttp] Add http.staticheader

---
 src/XrdHttp/XrdHttpProtocol.cc | 92 ++++++++++++++++++++++++++++++++++
 src/XrdHttp/XrdHttpProtocol.hh |  9 ++++
 tests/XRootD/http.cfg          |  6 +++
 tests/XRootD/http.sh           | 23 +++++++++
 4 files changed, 130 insertions(+)

diff --git a/src/XrdHttp/XrdHttpProtocol.cc b/src/XrdHttp/XrdHttpProtocol.cc
index 429678230..0de423675 100644
--- a/src/XrdHttp/XrdHttpProtocol.cc
+++ b/src/XrdHttp/XrdHttpProtocol.cc
@@ -117,6 +117,9 @@ XrdHttpChecksumHandler XrdHttpProtocol::cksumHandler = XrdHttpChecksumHandler();
 XrdHttpReadRangeHandler::Configuration XrdHttpProtocol::ReadRangeConfig;
 bool XrdHttpProtocol::tpcForwardCreds = false;
 
+decltype(XrdHttpProtocol::m_staticheader_map) XrdHttpProtocol::m_staticheader_map;
+decltype(XrdHttpProtocol::m_staticheaders) XrdHttpProtocol::m_staticheaders;
+
 XrdSysTrace XrdHttpTrace("http");
 
 namespace
@@ -1077,6 +1080,7 @@ int XrdHttpProtocol::Config(const char *ConfigFN, XrdOucEnv *myEnv) {
       else if TS_Xeq("listingredir", xlistredir);
       else if TS_Xeq("staticredir", xstaticredir);
       else if TS_Xeq("staticpreload", xstaticpreload);
+      else if TS_Xeq("staticheader", xstaticheader);
       else if TS_Xeq("listingdeny", xlistdeny);
       else if TS_Xeq("header2cgi", xheader2cgi);
       else if TS_Xeq("httpsmode", xhttpsmode);
@@ -1110,6 +1114,24 @@ int XrdHttpProtocol::Config(const char *ConfigFN, XrdOucEnv *myEnv) {
 // Test if XrdEC is loaded
    if (getenv("XRDCL_EC")) usingEC = true;
 
+// Pre-compute the static headers
+//
+  const auto default_verb = m_staticheader_map.find("");
+  std::string default_static_headers;
+  if (default_verb != m_staticheader_map.end()) {
+    for (const auto &header_entry : default_verb->second) {
+      default_static_headers += header_entry.first + ": " + header_entry.second + "\r\n";
+    }
+  }
+  for (const auto &item : m_staticheader_map) {
+    auto headers = default_static_headers;
+    for (const auto &header_entry : item.second) {
+      headers += header_entry.first + ": " + header_entry.second + "\r\n";
+    }
+
+    m_staticheaders[item.first] = headers;
+  }
+
 // If https was disabled, then issue a warning message if xrdtls configured
 // of it's disabled because httpsmode was auto and xrdtls was not configured.
 // If we get past this point then we know https is a plausible option but we
@@ -1594,6 +1616,11 @@ int XrdHttpProtocol::StartSimpleResp(int code, const char *desc, const char *hea
     ss << "Connection: Close" << crlf;
 
   ss << "Server: XrootD/" << XrdVSTRING << crlf;
+
+  const auto iter = m_staticheaders.find(CurrentReq.requestverb);
+  if (iter != m_staticheaders.end()) {
+    ss << iter->second;
+  }
   
   if ((bodylen >= 0) && (code != 100))
     ss << "Content-Length: " << bodylen << crlf;
@@ -2545,6 +2572,71 @@ int XrdHttpProtocol::xstaticpreload(XrdOucStream & Config) {
   return 0;
 }
 
+/******************************************************************************/
+/*                             x s t a t i c h e a d e r                      */
+/******************************************************************************/
+
+//
+// xstaticheader parses the http.staticheader director with the following syntax:
+//
+// http.staticheader [-verb=[GET|HEAD|...]]* header [value]
+//
+// When set, this will cause XrdHttp to always return the specified header and
+// value.
+//
+// Setting this option multiple times is additive (multiple headers may be set).
+// Omitting the value will cause the static header setting to be unset.
+//
+// Omitting the -verb argument will cause it the header to be set unconditionally
+// for all requests.
+int XrdHttpProtocol::xstaticheader(XrdOucStream & Config) {
+  auto val = Config.GetWord();
+  std::vector<std::string> verbs;
+  while (true) {
+    if (!val || !val[0]) {
+      eDest.Emsg("Config", "http.staticheader requires the header to be set to be specified");
+      return 1;
+    }
+
+    std::string match_verb;
+    std::string_view val_str(val);
+    if (val_str.substr(0, 6) == "-verb=") {
+      verbs.emplace_back(val_str.substr(6));
+    } else if (val_str == "-") {
+      eDest.Emsg("Config", "http.staticheader is ignoring unknown flag: ", val_str.data());
+    } else {
+      break;
+    }
+
+    val = Config.GetWord();
+  }
+  if (verbs.empty()) {
+    verbs.emplace_back();
+  }
+
+  std::string header = val;
+
+  val = Config.GetWord();
+  std::string header_value;
+  if (val && val[0]) {
+    header_value = val;
+  }
+
+  for (const auto &verb : verbs) {
+    auto iter = m_staticheader_map.find(verb);
+    if (iter == m_staticheader_map.end() && !header_value.empty()) {
+      m_staticheader_map.insert(iter, {verb, {{header, header_value}}});
+    } else if (header_value.empty()) {
+      iter->second.clear();
+    } else {
+      iter->second.emplace_back(header, header_value);
+    }
+  }
+
+  return 0;
+}
+
+
 /******************************************************************************/
 /*                          x s e l f h t t p s 2 h t t p                     */
 /******************************************************************************/
diff --git a/src/XrdHttp/XrdHttpProtocol.hh b/src/XrdHttp/XrdHttpProtocol.hh
index 0975c1541..ece5a52a2 100644
--- a/src/XrdHttp/XrdHttpProtocol.hh
+++ b/src/XrdHttp/XrdHttpProtocol.hh
@@ -52,6 +52,7 @@
 
 #include <openssl/ssl.h>
 
+#include <unordered_map>
 #include <vector>
 
 #include "XrdHttpReq.hh"
@@ -213,6 +214,7 @@ class XrdHttpProtocol : public XrdProtocol {
   static int xlistredir(XrdOucStream &Config);
   static int xselfhttps2http(XrdOucStream &Config);
   static int xembeddedstatic(XrdOucStream &Config);
+  static int xstaticheader(XrdOucStream &Config);
   static int xstaticredir(XrdOucStream &Config);
   static int xstaticpreload(XrdOucStream &Config);
   static int xgmap(XrdOucStream &Config);
@@ -451,5 +453,12 @@ class XrdHttpProtocol : public XrdProtocol {
 
   /// If set to true, the HTTP TPC transfers will forward the credentials to redirected hosts
   static bool tpcForwardCreds;
+
+  /// The static headers to always return; map is from verb to a list of (header, val) pairs.
+  static std::unordered_map<std::string, std::vector<std::pair<std::string, std::string>>> m_staticheader_map;
+
+  /// The static string version of m_staticheader_map.  After config parsing is done, this is
+  /// computed and we won't need to reference m_staticheader_map in the response path.
+  static std::unordered_map<std::string, std::string> m_staticheaders;
 };
 #endif
diff --git a/tests/XRootD/http.cfg b/tests/XRootD/http.cfg
index 687adeb51..3d4e39b13 100644
--- a/tests/XRootD/http.cfg
+++ b/tests/XRootD/http.cfg
@@ -18,4 +18,10 @@ http.exthandler xrdtpc libXrdHttpTPC.so
 http.exthandler xrdmacaroons libXrdMacaroons.so
 macaroons.secretkey $pwd/macaroons-secret
 
+# Verify static headers are appropriately appended to responses
+http.staticheader -verb=OPTIONS Access-Control-Allow-Origin *
+http.staticheader -verb=GET Foo Bar
+http.staticheader -verb=GET Foo Baz
+http.staticheader Test 1
+
 continue $src/common.cfg
diff --git a/tests/XRootD/http.sh b/tests/XRootD/http.sh
index cf129add4..ebd26a474 100755
--- a/tests/XRootD/http.sh
+++ b/tests/XRootD/http.sh
@@ -148,4 +148,27 @@ function test_http() {
   receivedDigest=$(grep -i "Digest" "$outputFilePath")
   assert_eq "$expectedDigest" "$receivedDigest" "HEAD request test failed (digest not supported)"
 	wait
+
+  ## OPTIONS has appropriate static headers
+  curl -s -X OPTIONS -v --raw "${HOST}/$alphabetFilePath" 2>&1 | tr -d '\r' > "$outputFilePath"
+  cat "$outputFilePath"
+  expectedHeader='< Access-Control-Allow-Origin: *'
+  receivedHeader=$(grep -i 'Access-Control-Allow-Origin:' "$outputFilePath")
+  assert_eq "$expectedHeader" "$receivedHeader" "OPTIONS is missing statically-defined Access-Control-Allow-Origin"
+  expectedHeader='< Test: 1'
+  receivedHeader=$(grep -i 'Test:' "$outputFilePath")
+  assert_eq "$expectedHeader" "$receivedHeader" "OPTIONS is missing statically-defined Test header"
+
+  ## GET has appropriate static headers
+  curl -s -v --raw "${HOST}/$alphabetFilePath" 2>&1 | tr -d '\r' > "$outputFilePath"
+  cat "$outputFilePath"
+  expectedHeader='< Foo: Bar'
+  receivedHeader=$(grep -i 'Foo: Bar' "$outputFilePath")
+  assert_eq "$expectedHeader" "$receivedHeader" "GET is missing statically-defined 'Foo: Bar' header"
+  expectedHeader='< Foo: Baz'
+  receivedHeader=$(grep -i 'Foo: Baz' "$outputFilePath")
+  assert_eq "$expectedHeader" "$receivedHeader" "GET is missing statically-defined 'Foo: Baz' header"
+  expectedHeader='< Test: 1'
+  receivedHeader=$(grep -i 'Test:' "$outputFilePath")
+  assert_eq "$expectedHeader" "$receivedHeader" "GET is missing statically-defined Test header"
 }
-- 
2.43.5

