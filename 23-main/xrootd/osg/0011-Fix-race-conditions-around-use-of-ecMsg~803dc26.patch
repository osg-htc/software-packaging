From 7e0abd5dcce5a94bb10133e08c20a49a16164fde Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Wed, 21 May 2025 17:58:14 -0500
Subject: [PATCH] Fix race conditions around use of `ecMsg`

There is one `ecMsg` object per file while there can be an arbitrary
number of outstanding operations per file (and hence, multiple threads
writing to the object's memory location concurrently).  We've observed
crashes caused by two simultaneous overwrites leading to a double-delete
of the underlying object.

This commit takes a fairly simple approach: wrap all read and writes
of `ecMsg` with a new mutex to prevent race conditions.
---
 src/XrdFfs/XrdFfsMisc.cc       |  4 +-
 src/XrdPosix/XrdPosixAdmin.cc  | 33 +++++++++++---
 src/XrdPosix/XrdPosixAdmin.hh  | 12 +++--
 src/XrdPosix/XrdPosixDir.cc    | 27 ++++++++----
 src/XrdPosix/XrdPosixDir.hh    |  2 +-
 src/XrdPosix/XrdPosixFile.cc   | 79 ++++++++++++++++++++++++++++-----
 src/XrdPosix/XrdPosixFileRH.cc |  4 +-
 src/XrdPosix/XrdPosixObject.cc |  6 +++
 src/XrdPosix/XrdPosixObject.hh | 12 +++--
 src/XrdPosix/XrdPosixPrepIO.cc |  6 ++-
 src/XrdPosix/XrdPosixXrootd.cc | 81 +++++++++++++++++++---------------
 11 files changed, 193 insertions(+), 73 deletions(-)

diff --git a/src/XrdFfs/XrdFfsMisc.cc b/src/XrdFfs/XrdFfsMisc.cc
index bc971719e..42df166d1 100644
--- a/src/XrdFfs/XrdFfsMisc.cc
+++ b/src/XrdFfs/XrdFfsMisc.cc
@@ -77,7 +77,7 @@ char XrdFfsMisc_get_current_url(const char *oldurl, char *newurl)
     }
 
     XrdOucECMsg   ecMsg;
-    XrdPosixAdmin adm(oldurl,ecMsg);
+    XrdPosixAdmin adm(oldurl,ecMsg,nullptr);
     if (adm.isOK() && adm.Stat())
     {
 // We might have been redirected to a destination server. Better 
@@ -103,7 +103,7 @@ char* XrdFfsMisc_getNameByAddr(char* ipaddr)
 int XrdFfsMisc_get_all_urls_real(const char *oldurl, char **newurls, const int nnodes)
 {
     XrdOucECMsg   ecMsg;
-    XrdPosixAdmin adm(oldurl,ecMsg);
+    XrdPosixAdmin adm(oldurl,ecMsg,nullptr);
     XrdCl::URL *uVec;
     int i, rval = 0;
 
diff --git a/src/XrdPosix/XrdPosixAdmin.cc b/src/XrdPosix/XrdPosixAdmin.cc
index f03f29e29..370498a38 100644
--- a/src/XrdPosix/XrdPosixAdmin.cc
+++ b/src/XrdPosix/XrdPosixAdmin.cc
@@ -61,7 +61,9 @@ XrdCl::URL *XrdPosixAdmin::FanOut(int &num)
 //
    xStatus = Xrd.DeepLocate(Url.GetPathWithParams(),XrdCl::OpenFlags::None,info);
    if (!xStatus.IsOK())
-      {num = XrdPosixMap::Result(xStatus, ecMsg, false);
+      {if (ecMutex) ecMutex->lock();
+       num = XrdPosixMap::Result(xStatus, ecMsg, false);
+       if (ecMutex) ecMutex->unlock();
        return 0;
       }
 
@@ -110,19 +112,34 @@ int XrdPosixAdmin::Query(XrdCl::QueryCode::Code reqCode, void *buff, int bsz)
 
 // Issue the query
 //
-   if (!XrdPosixMap::Result(Xrd.Query(reqCode, reqBuff, rspBuff),ecMsg))
+   auto st = Xrd.Query(reqCode, reqBuff, rspBuff);
+   int rc;
+   {
+      if (ecMutex) ecMutex->lock();
+      rc = XrdPosixMap::Result(st, ecMsg);
+      if (ecMutex) ecMutex->unlock();
+   }
+   if (!rc)
       {uint32_t rspSz = rspBuff->GetSize();
        char *rspbuff = rspBuff->GetBuffer();
        if (rspbuff && rspSz)
           {// if the string is null-terminated decrement the size
            if ( !(rspbuff[rspSz - 1]) ) --rspSz;
            if (bsz >= (int)rspSz + 1)
               {strncpy((char *)buff, rspbuff, rspSz);
                ((char*)buff)[rspSz] = 0; // make sure it is null-terminated
                delete rspBuff;
                return static_cast<int>(rspSz + 1);
-              } else ecMsg.SetErrno(ERANGE,0,"buffer to small to hold result");
-          } else ecMsg.SetErrno(EFAULT,0,"Invalid return results");
+              } else
+              {if (ecMutex) ecMutex->lock();
+               ecMsg.SetErrno(ERANGE,0,"buffer to small to hold result");
+               if (ecMutex) ecMutex->unlock();
+              }
+          } else
+          {if (ecMutex) ecMutex->lock();
+           ecMsg.SetErrno(EFAULT,0,"Invalid return results");
+           if (ecMutex) ecMutex->unlock();
+          }
       }
 
 // Return error
@@ -148,7 +165,9 @@ bool XrdPosixAdmin::Stat(mode_t *flags, time_t *mtime)
 //
    xStatus = Xrd.Stat(Url.GetPathWithParams(), sInfo);
    if (!xStatus.IsOK())
-      {XrdPosixMap::Result(xStatus,ecMsg);
+      {if (ecMutex) ecMutex->lock();
+       XrdPosixMap::Result(xStatus,ecMsg);
+       if (ecMutex) ecMutex->unlock();
        delete sInfo;
        return false;
       }
@@ -179,7 +198,9 @@ bool XrdPosixAdmin::Stat(struct stat &Stat)
 //
    xStatus = Xrd.Stat(Url.GetPathWithParams(), sInfo);
    if (!xStatus.IsOK())
-      {XrdPosixMap::Result(xStatus,ecMsg);
+      {if (ecMutex) ecMutex->lock();
+       XrdPosixMap::Result(xStatus,ecMsg);
+       if (ecMutex) ecMutex->unlock();
        delete sInfo;
        return false;
       }
diff --git a/src/XrdPosix/XrdPosixAdmin.hh b/src/XrdPosix/XrdPosixAdmin.hh
index 4bbd234f0..4e8223878 100644
--- a/src/XrdPosix/XrdPosixAdmin.hh
+++ b/src/XrdPosix/XrdPosixAdmin.hh
@@ -38,37 +38,43 @@
 #include "XrdCl/XrdClXRootDResponses.hh"
 #include "XrdOuc/XrdOucECMsg.hh"
 
+#include <mutex>
+
 /******************************************************************************/
 /*                         X r d P o s i x A d m i n                          */
 /******************************************************************************/
 
 struct stat;
   
 class XrdPosixAdmin
 {
 public:
 
 XrdCl::URL        Url;
 XrdCl::FileSystem Xrd;
-XrdOucECMsg&      ecMsg;
 
 bool           isOK() {if (Url.IsValid()) return true;
+                       if (ecMutex) ecMutex->lock();
                        ecMsg.Set(EINVAL, 0);
                        ecMsg.Msgf("PosixAdmin", "url '%s' is invalid",
                                   Url.GetObfuscatedURL().c_str());
+                       if (ecMutex) ecMutex->unlock();
                        errno = EINVAL;    return false;
                       }
 
 XrdCl::URL    *FanOut(int &num);
 
 int            Query(XrdCl::QueryCode::Code reqCode, void *buff, int bsz);
 
 bool           Stat(mode_t *flags=0, time_t *mtime=0);
 
 bool           Stat(struct stat &Stat);
 
-      XrdPosixAdmin(const char *path, XrdOucECMsg &ecm)
-                      : Url((std::string)path), Xrd(Url), ecMsg(ecm) {}
+      XrdPosixAdmin(const char *path, XrdOucECMsg &ecm, std::mutex *ecmut)
+                      : Url((std::string)path), Xrd(Url), ecMutex(ecmut), ecMsg(ecm) {}
      ~XrdPosixAdmin() {}
+
+std::mutex *      ecMutex;
+XrdOucECMsg&      ecMsg;
 };
 #endif
diff --git a/src/XrdPosix/XrdPosixDir.cc b/src/XrdPosix/XrdPosixDir.cc
index 008c24709..91fb7e618 100644
--- a/src/XrdPosix/XrdPosixDir.cc
+++ b/src/XrdPosix/XrdPosixDir.cc
@@ -85,10 +85,16 @@ dirent64 *XrdPosixDir::nextEntry(dirent64 *dp)
    dp->d_name[d_nlen] = '\0';
 
    // Note we fail if the stat info is needed but not available
-   int rc;
-   if (myBuf && (rc = XrdPosixMap::Entry2Buf(*dirEnt, *myBuf, ecMsg)))
-      {eNum = rc;
-       dp = nullptr;
+   if (myBuf)
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Entry2Buf(*dirEnt, *myBuf, ecMsg);
+       }
+       if (rc)
+          {eNum = rc;
+           dp = nullptr;
+          }
       }
    nxtEnt++;
    return dp;
@@ -116,15 +122,20 @@ DIR *XrdPosixDir::Open()
 // some system the dirent structure does not include the name buffer
 //
    if (!myDirEnt && !(myDirEnt = (dirent64 *)malloc(dEntSize)))
-      {ecMsg.SetErrno(ENOMEM);
+      {std::unique_lock lock(ecMutex);
+       ecMsg.SetErrno(ENOMEM);
        return (DIR*)0;
       }
 
 // Get the directory list
 //
-   rc = XrdPosixMap::Result(DAdmin.Xrd.DirList(DAdmin.Url.GetPathWithParams(),
-                                               XrdPosixGlobals::dlFlag,
-                                               myDirVec, (uint16_t)0),ecMsg);
+   auto st = DAdmin.Xrd.DirList(DAdmin.Url.GetPathWithParams(),
+                                XrdPosixGlobals::dlFlag,
+                                myDirVec, (uint16_t)0);
+   {
+      std::unique_lock lock(ecMutex);
+      rc = XrdPosixMap::Result(st, ecMsg);
+   }
 
 // If we failed, return a zero pointer ote that Result() set errno for us
 //
diff --git a/src/XrdPosix/XrdPosixDir.hh b/src/XrdPosix/XrdPosixDir.hh
index eedd8429c..a2673d842 100644
--- a/src/XrdPosix/XrdPosixDir.hh
+++ b/src/XrdPosix/XrdPosixDir.hh
@@ -52,7 +52,7 @@ class XrdPosixDir : public XrdPosixObject
 {
 public:
                    XrdPosixDir(const char *path)
-                              : DAdmin(path,ecMsg), myDirVec(0), myDirEnt(0),
+                              : DAdmin(path,ecMsg, &ecMutex), myDirVec(0), myDirEnt(0),
                                 myBuf(nullptr), nxtEnt(0), numEnt(0), eNum(0)
                               {}
 
diff --git a/src/XrdPosix/XrdPosixFile.cc b/src/XrdPosix/XrdPosixFile.cc
index 886347584..b81603679 100644
--- a/src/XrdPosix/XrdPosixFile.cc
+++ b/src/XrdPosix/XrdPosixFile.cc
@@ -402,8 +402,13 @@ void XrdPosixFile::HandleResponse(XrdCl::XRootDStatus *status,
 
 // If no errors occurred, complete the open
 //
-   if (!(status->IsOK()))          rc = XrdPosixMap::Result(*status,ecMsg,false);
-      else if (!Finalize(&Status)) rc = XrdPosixMap::Result( Status,ecMsg,false);
+   if (!(status->IsOK()))
+      {std::unique_lock lock(ecMutex);
+       rc = XrdPosixMap::Result(*status,ecMsg,false);
+      } else if (!Finalize(&Status))
+      {std::unique_lock lock(ecMutex);
+       rc = XrdPosixMap::Result( Status,ecMsg,false);
+      }
 
 // Issue XrdPosixCallBack callback with the correct result. Errors are indicated
 // by result set < 0 (typically -1) and errno set to the error number. In our
@@ -495,7 +500,12 @@ void XrdPosixFile::pgRead(XrdOucCacheIOCB       &iocb,
 // Check status, upon error we pass -errno as the result.
 //
    if (!Status.IsOK())
-      {rhP->Sched(XrdPosixMap::Result(Status, ecMsg, false));
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Result(Status, ecMsg, false);
+       }
+       rhP->Sched(rc);
        unRef();
       }
 }
@@ -523,7 +533,11 @@ int XrdPosixFile::pgWrite(char                  *buff,
    Status = clFile.PgWrite((uint64_t)offs, (uint32_t)wlen, buff, csvec);
    unRef();
 
-   return (Status.IsOK() ? wlen : XrdPosixMap::Result(Status,ecMsg,true));
+   if (Status.IsOK()) return wlen;
+   else
+      {std::unique_lock lock(ecMutex);
+       return XrdPosixMap::Result(Status,ecMsg,true);
+      }
 }
   
 /******************************************************************************/
@@ -559,7 +573,12 @@ void XrdPosixFile::pgWrite(XrdOucCacheIOCB       &iocb,
 // Check status, if error pass along -errno as the result.
 //
    if (!Status.IsOK())
-      {rhP->Sched(XrdPosixMap::Result(Status,ecMsg,false));
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Result(Status,ecMsg,false);
+       }
+       rhP->Sched(rc);
        unRef();
       }
 }
@@ -587,7 +606,11 @@ int XrdPosixFile::Read (char *Buff, long long Offs, int Len)
    Status = clFile.Read((uint64_t)Offs, (uint32_t)Len, Buff, bytes);
    unRef();
 
-   return (Status.IsOK() ? (int)bytes : XrdPosixMap::Result(Status,ecMsg,false));
+   if (Status.IsOK()) return (int)bytes;
+   else
+      {std::unique_lock lock(ecMutex);
+       return XrdPosixMap::Result(Status,ecMsg,false);
+      }
 }
   
 /******************************************************************************/
@@ -614,7 +637,12 @@ void XrdPosixFile::Read (XrdOucCacheIOCB &iocb, char *buff, long long offs,
 // Check status. Upon error pass along -errno as the result.
 //
    if (!Status.IsOK())
-      {rhP->Sched(XrdPosixMap::Result(Status, ecMsg, false));
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Result(Status, ecMsg, false);
+       }
+       rhP->Sched(rc);
        unRef();
       }
 }
@@ -651,7 +679,11 @@ int XrdPosixFile::ReadV (const XrdOucIOVec *readV, int n)
 
 // Return appropriate result (here we return -errno as the result)
 //
-   return (Status.IsOK() ? nbytes : XrdPosixMap::Result(Status, ecMsg, false));
+   if (Status.IsOK()) return nbytes;
+   else
+      {std::unique_lock lock(ecMutex);
+       return XrdPosixMap::Result(Status, ecMsg, false);
+      }
 }
 
 /******************************************************************************/
@@ -683,7 +715,12 @@ void XrdPosixFile::ReadV(XrdOucCacheIOCB &iocb, const XrdOucIOVec *readV, int n)
 // Return appropriate result
 //
    if (!Status.IsOK())
-      {rhp->Sched(XrdPosixMap::Result(Status, ecMsg, false));
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Result(Status, ecMsg, false);
+       }
+       rhp->Sched(rc);
        unRef();
       }
 }
@@ -747,6 +784,7 @@ int XrdPosixFile::Sync()
 
 // Return result
 //
+   std::unique_lock lock(ecMutex);
    return XrdPosixMap::Result(Status, ecMsg, false);
 }
 
@@ -764,7 +802,14 @@ void XrdPosixFile::Sync(XrdOucCacheIOCB &iocb)
 
 // Check status
 //
-   if (!Status.IsOK()) rhp->Sched(XrdPosixMap::Result(Status, ecMsg, false));
+   if (!Status.IsOK())
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Result(Status, ecMsg, false);
+       }
+       rhp->Sched(rc);
+      }
 }
   
 /******************************************************************************/
@@ -783,6 +828,7 @@ int XrdPosixFile::Trunc(long long Offset)
 
 // Return results
 //
+   std::unique_lock lock(ecMutex);
    return XrdPosixMap::Result(Status,ecMsg,false);
 }
   
@@ -800,7 +846,11 @@ int XrdPosixFile::Write(char *Buff, long long Offs, int Len)
    Status = clFile.Write((uint64_t)Offs, (uint32_t)Len, Buff);
    unRef();
 
-   return (Status.IsOK() ? Len : XrdPosixMap::Result(Status,ecMsg,false));
+   if (Status.IsOK()) return Len;
+   else
+      {std::unique_lock lock(ecMutex);
+       return XrdPosixMap::Result(Status,ecMsg,false);
+      }
 }
   
 /******************************************************************************/
@@ -820,7 +870,12 @@ void XrdPosixFile::Write(XrdOucCacheIOCB &iocb, char *buff, long long offs,
 // Check status
 //
    if (!Status.IsOK())
-      {rhp->Sched(XrdPosixMap::Result(Status,ecMsg,false));
+      {int rc;
+       {
+          std::unique_lock lock(ecMutex);
+          rc = XrdPosixMap::Result(Status,ecMsg,false);
+       }
+       rhp->Sched(rc);
        unRef();
       }
 }
diff --git a/src/XrdPosix/XrdPosixFileRH.cc b/src/XrdPosix/XrdPosixFileRH.cc
index a892f8072..1433567f1 100644
--- a/src/XrdPosix/XrdPosixFileRH.cc
+++ b/src/XrdPosix/XrdPosixFileRH.cc
@@ -112,7 +112,9 @@ void XrdPosixFileRH::HandleResponse(XrdCl::XRootDStatus *status,
 // Determine ending status. Note: error indicated as result set to -errno.
 //
         if (!(status->IsOK()))
-           result = XrdPosixMap::Result(*status, theFile->ecMsg, false);
+           {std::unique_lock lock(theFile->ecMutex);
+            result = XrdPosixMap::Result(*status, theFile->ecMsg, false);
+           }
    else if (typeIO == nonIO) result = 0;
    else if (typeIO == isRead)
            {XrdCl::ChunkInfo *cInfo = 0;
diff --git a/src/XrdPosix/XrdPosixObject.cc b/src/XrdPosix/XrdPosixObject.cc
index 3e054d0e6..0974a1646 100644
--- a/src/XrdPosix/XrdPosixObject.cc
+++ b/src/XrdPosix/XrdPosixObject.cc
@@ -199,6 +199,12 @@ do{if (fd >= lastFD || fd < baseFD)
    return (XrdPosixFile *)0;
 }
 
+XrdOucECMsg
+XrdPosixObject::getECMsg() const {
+    std::unique_lock lock(ecMutex);
+    return ecMsg;
+}
+
 /******************************************************************************/
 /*                                  I n i t                                   */
 /******************************************************************************/
diff --git a/src/XrdPosix/XrdPosixObject.hh b/src/XrdPosix/XrdPosixObject.hh
index 578a0d6ed..63919e4c9 100644
--- a/src/XrdPosix/XrdPosixObject.hh
+++ b/src/XrdPosix/XrdPosixObject.hh
@@ -36,6 +36,8 @@
 #include "XrdSys/XrdSysAtomics.hh"
 #include "XrdSys/XrdSysPthread.hh"
 
+#include <mutex>
+
 class XrdPosixDir;
 class XrdPosixFile;
 
@@ -53,7 +55,7 @@ static  XrdPosixFile *File(int fildes, bool glk=false);
 
         int           FDNum() {return fdNum;}
 
-        XrdOucECMsg*  getECMsg() {return &ecMsg;}
+        XrdOucECMsg   getECMsg() const;
 
 static  int           Init(int numfd);
 
@@ -90,17 +92,19 @@ virtual bool          Who(XrdPosixDir  **dirP)  {return false;}
 
 virtual bool          Who(XrdPosixFile **fileP) {return false;}
 
-                      XrdPosixObject() : ecMsg("[posix]"),fdNum(-1),refCnt(0) {}
+                      XrdPosixObject() : fdNum(-1),refCnt(0),ecMsg("[posix]") {}
 virtual              ~XrdPosixObject() {if (fdNum >= 0) Release(this);}
 
-       XrdOucECMsg      ecMsg;
-
 protected:
        XrdSysRecMutex   updMutex;
        XrdSysRWLock     objMutex;
        int              fdNum;
        int              refCnt;
 
+public:
+       mutable std::mutex ecMutex; // Mutex protecting concurrenct access to ecMsg.
+       XrdOucECMsg        ecMsg; // Last error occurring on this file.  Note multiple operations may be in flight; this may not correspond to the last operation your thread performed
+
 private:
 
 static XrdSysMutex      fdMutex;
diff --git a/src/XrdPosix/XrdPosixPrepIO.cc b/src/XrdPosix/XrdPosixPrepIO.cc
index 6ef702001..afe2f7fb5 100644
--- a/src/XrdPosix/XrdPosixPrepIO.cc
+++ b/src/XrdPosix/XrdPosixPrepIO.cc
@@ -102,7 +102,11 @@ bool XrdPosixPrepIO::Init(XrdOucCacheIOCB *iocbP)
 // Make sure all went well. If so, do a Stat() call on the underlying file
 //
    if (Status.IsOK()) fileP->Stat(Status);
-      else {openRC = XrdPosixMap::Result(Status, fileP->ecMsg, false);
+      else {
+            {
+               std::unique_lock lock(fileP->ecMutex);
+               openRC = XrdPosixMap::Result(Status, fileP->ecMsg, false);
+            }
             if (DEBUGON && errno != ENOENT && errno != ELOOP)
                {std::string eTxt = Status.ToString();
                 DEBUG(eTxt<<" deferred open "<< obfuscateAuth(fileP->Origin()));
diff --git a/src/XrdPosix/XrdPosixXrootd.cc b/src/XrdPosix/XrdPosixXrootd.cc
index f7172d534..a5120cd1a 100644
--- a/src/XrdPosix/XrdPosixXrootd.cc
+++ b/src/XrdPosix/XrdPosixXrootd.cc
@@ -241,7 +241,7 @@ XrdPosixXrootd::~XrdPosixXrootd()
   
 int XrdPosixXrootd::Access(const char *path, int amode)
 {
-   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
    mode_t stMode;
    bool   aOK = true;
 
@@ -464,7 +464,7 @@ int XrdPosixXrootd::Ftruncate(int fildes, off_t offset)
 long long XrdPosixXrootd::Getxattr (const char *path, const char *name, 
                                     void *value, unsigned long long size)
 {
-  XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+  XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
   XrdCl::QueryCode::Code reqCode;
   int vsize = static_cast<int>(size);
 
@@ -527,7 +527,7 @@ off_t   XrdPosixXrootd::Lseek(int fildes, off_t offset, int whence)
 
 int XrdPosixXrootd::Mkdir(const char *path, mode_t mode)
 {
-  XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+  XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
   XrdCl::MkDirFlags::Flags flags;
 
 // Preferentially make the whole path unless told otherwise
@@ -785,7 +785,10 @@ void XrdPosixXrootd::Pread(int fildes, void *buf, size_t nbyte, off_t offset,
 //
    if (nbyte > (size_t)0x7fffffff)
       {fp->UnLock();
-       fp->ecMsg.SetErrno(EOVERFLOW,0,"read size too large");
+       {
+          std::unique_lock lock(fp->ecMutex);
+          fp->ecMsg.SetErrno(EOVERFLOW,0,"read size too large");
+       }
        cbp->Complete(-1);
        return;
       }
@@ -852,7 +855,10 @@ void XrdPosixXrootd::Pwrite(int fildes, const void *buf, size_t nbyte,
 //
    if (nbyte > (size_t)0x7fffffff)
       {fp->UnLock();
-       fp->ecMsg.SetErrno(EOVERFLOW,0,"read size too large");
+       {
+          std::unique_lock lock(fp->ecMutex);
+          fp->ecMsg.SetErrno(EOVERFLOW,0,"read size too large");
+       }
        cbp->Complete(-1);
        return;
       }
@@ -1066,7 +1072,7 @@ int XrdPosixXrootd::Readdir64_r(DIR *dirp, struct dirent64  *entry,
 
 int XrdPosixXrootd::Rename(const char *oldpath, const char *newpath)
 {
-   XrdPosixAdmin admin(oldpath,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(oldpath,XrdPosixGlobals::ecMsg,nullptr);
    XrdCl::URL newUrl((std::string)newpath);
 
 // Make sure the admin is OK and the new url is valid
@@ -1116,7 +1122,7 @@ void XrdPosixXrootd::Rewinddir(DIR *dirp)
 
 int XrdPosixXrootd::Rmdir(const char *path)
 {
-   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
 
 // Make sure the admin is OK
 //
@@ -1165,7 +1171,7 @@ void XrdPosixXrootd::Seekdir(DIR *dirp, long loc)
   
 int XrdPosixXrootd::Stat(const char *path, struct stat *buf)
 {
-   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
    bool cacheChk = false;
 
 // Make sure the admin is OK
@@ -1267,7 +1273,7 @@ int XrdPosixXrootd::Statvfs(const char *path, struct statvfs *buf)
    static const int szVFS = sizeof(buf->f_bfree);
    static const long long max32 = 0x7fffffffLL;
 
-   XrdPosixAdmin       admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin       admin(path,XrdPosixGlobals::ecMsg,nullptr);
    XrdCl::StatInfoVFS *vfsStat;
 
    long long rwFree, ssFree, rwBlks;
@@ -1352,7 +1358,7 @@ long XrdPosixXrootd::Telldir(DIR *dirp)
   
 int XrdPosixXrootd::Truncate(const char *path, off_t Size)
 {
-  XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+  XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
   uint64_t tSize = static_cast<uint64_t>(Size);
 
 // Make sure the admin is OK
@@ -1380,7 +1386,7 @@ int XrdPosixXrootd::Truncate(const char *path, off_t Size)
 
 int XrdPosixXrootd::Unlink(const char *path)
 {
-   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
 
 // Make sure the admin is OK
 //
@@ -1489,7 +1495,7 @@ bool XrdPosixXrootd::myFD(int fd)
 int XrdPosixXrootd::QueryChksum(const char *path,  time_t &Mtime,
                                       char *value, int     vsize)
 {
-   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
 
 // Stat the file first to allow vectoring of the request to the right server
 //
@@ -1506,19 +1512,14 @@ int XrdPosixXrootd::QueryChksum(const char *path,  time_t &Mtime,
   
 int XrdPosixXrootd::QueryError(std::string& emsg, int fd, bool reset)
 {
-   XrdOucECMsg* ecmP;
-
 // If global wanted then use that one otherwise find the object specific one
 //
-   if (fd < 0) ecmP = &XrdPosixGlobals::ecMsg;
+   if (fd < 0) return XrdPosixGlobals::ecMsg.Get(emsg, reset);
        else {XrdPosixFile *fp;
              if (!(fp = XrdPosixObject::File(fd))) return -1;
-             ecmP = fp->getECMsg();
+             std::unique_lock lock(fp->ecMutex);
+             return fp->ecMsg.Get(emsg, reset);
             }
-
-// Return the message information
-//
-   return ecmP->Get(emsg, reset);
 }
   
 /******************************************************************************/
@@ -1535,16 +1536,16 @@ int XrdPosixXrootd::QueryError(std::string& emsg, DIR* dirP, bool reset)
 
 // Return result
 //
-   return dP->getECMsg()->Get(emsg, reset);
+   return dP->getECMsg().Get(emsg, reset);
 }
 
 /******************************************************************************/
 /*                           Q u e r y O p a q u e                            */
 /******************************************************************************/
   
 long long XrdPosixXrootd::QueryOpaque(const char *path, char *value, int size)
 {
-   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg);
+   XrdPosixAdmin admin(path,XrdPosixGlobals::ecMsg,nullptr);
 
 // Stat the file first to allow vectoring of the request to the right server
 //
@@ -1619,10 +1620,14 @@ int XrdPosixXrootd::EcRename(const char *oldpath, const char *newpath,
     for( size_t i = 0; i < info->GetSize(); ++i )
     {
         std::string url_i = "root://" + info->At(i).GetAddress() + "/" + file;
-        XrdPosixAdmin *admin_i = new XrdPosixAdmin(url_i.c_str(),admin.ecMsg);
-        int x = XrdPosixMap::Result(admin_i->Xrd.Mv(admin_i->Url.GetPathWithParams(),
-                                                    newUrl.GetPathWithParams()),
-                                                    admin.ecMsg);
+        XrdPosixAdmin *admin_i = new XrdPosixAdmin(url_i.c_str(),admin.ecMsg,admin.ecMutex);
+        auto st = admin_i->Xrd.Mv(admin_i->Url.GetPathWithParams(),
+                                  newUrl.GetPathWithParams());
+        int x;
+        {
+           std::unique_lock lock(*admin.ecMutex);
+           x = XrdPosixMap::Result(st, admin.ecMsg);
+        }
         if (x != -ENOENT && rc != 0)
             rc = x;
         if (admin_i) delete admin_i;
@@ -1690,7 +1695,7 @@ int XrdPosixXrootd::EcStat(const char *path, struct stat *buf,
    for( size_t i = 0; i < info->GetSize(); ++i )
    {
        std::string url_i = "root://" + info->At(i).GetAddress() + "/" + file;
-       XrdPosixAdmin *admin_i = new XrdPosixAdmin(url_i.c_str(),admin.ecMsg);
+       XrdPosixAdmin *admin_i = new XrdPosixAdmin(url_i.c_str(),admin.ecMsg,admin.ecMutex);
  
        if (admin_i->Stat(buf_i)) 
        {
@@ -1756,25 +1761,31 @@ int XrdPosixXrootd::EcUnlink(const char *path, XrdPosixAdmin &admin)
                    || queryResp->ToString() == "server\n")
     {
         if (queryResp) delete queryResp;
-        return XrdPosixMap::Result(admin.Xrd.Rm(admin.Url.GetPathWithParams()),
-                                   admin.ecMsg, true);
+        auto st = admin.Xrd.Rm(admin.Url.GetPathWithParams());
+        std::unique_lock lock(*admin.ecMutex);
+        return XrdPosixMap::Result(st, admin.ecMsg, true);
     }
     else
         if (queryResp) delete queryResp;
 
     st = fs.DeepLocate("*", XrdCl::OpenFlags::None, info );
     std::unique_ptr<XrdCl::LocationInfo> ptr( info );
-    if( !st.IsOK() ) 
-      return XrdPosixMap::Result(st, admin.ecMsg, true);
+    if( !st.IsOK() )
+      {std::unique_lock lock(*admin.ecMutex);
+       return XrdPosixMap::Result(st, admin.ecMsg, true);
+      }
 
     int rc = -ENOENT;
     for( size_t i = 0; i < info->GetSize(); ++i )
     {
         std::string url_i = "root://" + info->At(i).GetAddress() + "/" + file;
-        XrdPosixAdmin *admin_i = new XrdPosixAdmin(url_i.c_str(),admin.ecMsg);
-        int x = XrdPosixMap::Result(admin_i->
-                                    Xrd.Rm(admin_i->Url.GetPathWithParams()),
-                                    admin.ecMsg);
+        XrdPosixAdmin *admin_i = new XrdPosixAdmin(url_i.c_str(),admin.ecMsg,admin.ecMutex);
+        auto st = admin_i->Xrd.Rm(admin_i->Url.GetPathWithParams());
+        int x;
+        {
+           std::unique_lock lock(*admin.ecMutex);
+           x = XrdPosixMap::Result(st, admin.ecMsg);
+        }
         if (x != -ENOENT && rc != 0)
             rc = x;
         if (admin_i) delete admin_i;
-- 
2.43.5

