From d9dc6b3cb73eb94cdcfaa4f41d6db1ee35925dd5 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Sun, 8 Jun 2025 08:29:43 -0500
Subject: [PATCH 9/9] [XrdPfc] Ensure a reference to the file is kept when
 scheduling a sync

As soon as the block is freed, it may cause the file to be marked
as "inactive" (and thus eligible for deletion).

If a file sync is desired, then we must delay decreasing the block's
reference count until after the sync is scheduled to ensure it is still
alive when the sync scheduling increases the reference count on the file.

This change eliminates a use-after-free segfault observed on my
local stress test which would trigger about 50% of the time (10 clients
reading unique 3-byte files in a caching setup would crash after 20-30
seconds).
---
 src/XrdPfc/XrdPfcFile.cc | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/XrdPfc/XrdPfcFile.cc b/src/XrdPfc/XrdPfcFile.cc
index c00ba9e55..30b32d95d 100644
--- a/src/XrdPfc/XrdPfcFile.cc
+++ b/src/XrdPfc/XrdPfcFile.cc
@@ -1115,8 +1115,6 @@ void File::WriteBlockToDisk(Block* b)
          m_cfi.ResetCkSumNet();
       }
 
-      dec_ref_count(b);
-
       // Set synced bit or stash block index if in actual sync.
       // Synced state is only written out to cinfo file when data file is synced.
       if (m_in_sync)
@@ -1135,11 +1133,19 @@ void File::WriteBlockToDisk(Block* b)
             m_non_flushed_cnt = 0;
          }
       }
+      // As soon as the reference count is decreased on the block, the
+      // file object may be deleted.  Thus, to avoid holding both locks at a time,
+      // we defer the ref count decrease until later if a sync is needed
+      if (!schedule_sync) {
+         dec_ref_count(b);
+      }
    }
 
    if (schedule_sync)
    {
       cache()->ScheduleFileSync(this);
+      XrdSysCondVarHelper _lck(m_state_cond);
+      dec_ref_count(b);
    }
 }
 
-- 
2.47.1

