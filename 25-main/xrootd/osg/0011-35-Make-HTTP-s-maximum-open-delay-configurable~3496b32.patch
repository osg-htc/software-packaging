From c3421ce5142568869fe4821716875ba1deabde17 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelman@morgridge.org>
Date: Fri, 6 Jun 2025 11:58:17 -0500
Subject: [PATCH 11/11] [#35] Make HTTP's maximum open delay configurable

By default, the bridge will retry operations internally until the
maximum delay is hit and then return an error.  By default, the
maximum delay is 3600 seconds; this is well beyond the timeouts of
a typical HTTP client.

This makes the delay configurable for HTTP with the following:

```
http.maxdelay <seconds>
```

as in

```
http.maxdelay 10
```

It also tunes down the default delay to 30s.

Note: the response time can still be greater than 30s; this just limits
how long the bridge will process "wait" responses for.
---
 src/XrdHttp/XrdHttpProtocol.cc | 18 ++++++++++++++++++
 src/XrdHttp/XrdHttpProtocol.hh |  7 ++++++-
 2 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/src/XrdHttp/XrdHttpProtocol.cc b/src/XrdHttp/XrdHttpProtocol.cc
index 665cda2d1..ec2887d76 100644
--- a/src/XrdHttp/XrdHttpProtocol.cc
+++ b/src/XrdHttp/XrdHttpProtocol.cc
@@ -26,6 +26,7 @@
 #include "Xrd/XrdBuffer.hh"
 #include "Xrd/XrdLink.hh"
 #include "XProtocol/XProtocol.hh"
+#include "XrdOuc/XrdOuca2x.hh"
 #include "XrdOuc/XrdOucStream.hh"
 #include "XrdOuc/XrdOucEnv.hh"
 #include "XrdOuc/XrdOucGMap.hh"
@@ -45,6 +46,7 @@
 #include "XrdOuc/XrdOucUtils.hh"
 #include "XrdOuc/XrdOucPrivateUtils.hh"
 
+#include <charconv>
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 #include <vector>
@@ -84,6 +86,7 @@ char *XrdHttpProtocol::listredir = 0;
 bool XrdHttpProtocol::listdeny = false;
 bool XrdHttpProtocol::embeddedstatic = true;
 char *XrdHttpProtocol::staticredir = 0;
+int XrdHttpProtocol::m_maxdelay = -1;
 XrdOucHash<XrdHttpProtocol::StaticPreloadInfo> *XrdHttpProtocol::staticpreload = 0;
 
 kXR_int32 XrdHttpProtocol::myRole = kXR_isManager;
@@ -903,6 +906,7 @@ int XrdHttpProtocol::Process(XrdLink *lp) // We ignore the argument here
       TRACEI(REQ, " Authorization failed.");
       return -1;
     }
+    if (m_maxdelay > 0) Bridge->SetWait(m_maxdelay, false);
 
     // Let the bridge process the login, and then reinvoke us
     DoingLogin = true;
@@ -1088,6 +1092,7 @@ int XrdHttpProtocol::Config(const char *ConfigFN, XrdOucEnv *myEnv) {
       else if TS_Xeq("tlsreuse", xtlsreuse);
       else if TS_Xeq("auth", xauth);
       else if TS_Xeq("tlsclientauth", xtlsclientauth);
+      else if TS_Xeq("maxdelay", xmaxdelay);
       else {
         eDest.Say("Config warning: ignoring unknown directive '", var, "'.");
         Config.Echo();
@@ -3012,6 +3017,19 @@ int XrdHttpProtocol::xauth(XrdOucStream &Config) {
   return 0;
 }
 
+int XrdHttpProtocol::xmaxdelay(XrdOucStream &Config) {
+  char *val = Config.GetWord();
+  if(val) {
+    int maxdelay;
+    if (XrdOuca2x::a2tm(eDest, "http.maxdelay", val, &maxdelay, 1)) return 1;
+    m_maxdelay = maxdelay;
+  } else {
+    eDest.Emsg("Config", "http.maxdelay requires an argument in seconds (default is 30).  Example: http.maxdelay 30");
+    return 1;
+  }
+  return 0;
+}
+
 /******************************************************************************/
 /*                                x t r a c e                                 */
 /******************************************************************************/
diff --git a/src/XrdHttp/XrdHttpProtocol.hh b/src/XrdHttp/XrdHttpProtocol.hh
index 3d01b099f..aef651843 100644
--- a/src/XrdHttp/XrdHttpProtocol.hh
+++ b/src/XrdHttp/XrdHttpProtocol.hh
@@ -226,7 +226,8 @@ class XrdHttpProtocol : public XrdProtocol {
   static int xtlsreuse(XrdOucStream &Config);
   static int xauth(XrdOucStream &Config);
   static int xtlsclientauth(XrdOucStream &Config);
-  
+  static int xmaxdelay(XrdOucStream &Config);
+
   static bool isRequiredXtractor; // If true treat secxtractor errors as fatal
   static XrdHttpSecXtractor *secxtractor;
   
@@ -427,6 +428,10 @@ class XrdHttpProtocol : public XrdProtocol {
   // Url to redirect to in the case a /static is requested
   static char *staticredir;
 
+  // Maximum amount of time an operation on the bridge can be
+  // delayed
+  static int m_maxdelay;
+
   // Hash that keeps preloaded files
   struct StaticPreloadInfo {
     char *data;
-- 
2.47.3

